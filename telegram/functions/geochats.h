// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#ifndef LQTG_FNC_GEOCHATS
#define LQTG_FNC_GEOCHATS

#include "telegramfunctionobject.h"
#include "core/inboundpkt.h"
#include "core/outboundpkt.h"
#include "../coretypes.h"

#include "telegram/types/geochatslocated.h"
#include "telegram/types/inputgeopoint.h"
#include <QtGlobal>
#include "telegram/types/geochatsmessages.h"
#include "telegram/types/geochatsstatedmessage.h"
#include "telegram/types/inputgeochat.h"
#include "telegram/types/messageschatfull.h"
#include <QString>
#include "telegram/types/inputchatphoto.h"
#include "telegram/types/messagesfilter.h"
#include "telegram/types/inputmedia.h"

namespace Tg {
namespace Functions {

class LIBQTELEGRAMSHARED_EXPORT Geochats : public TelegramFunctionObject
{
public:
    enum GeochatsFunction {
        fncGeochatsGetLocated = 0x7f192d8f,
        fncGeochatsGetRecents = 0xe1427e6f,
        fncGeochatsCheckin = 0x55b3e8fb,
        fncGeochatsGetFullChat = 0x6722dd6f,
        fncGeochatsEditChatTitle = 0x4c8e2273,
        fncGeochatsEditChatPhoto = 0x35d81a95,
        fncGeochatsSearch = 0xcfcdc44d,
        fncGeochatsGetHistory = 0xb53f7a68,
        fncGeochatsSetTyping = 0x8b8a729,
        fncGeochatsSendMessage = 0x61b0044,
        fncGeochatsSendMedia = 0xb8f0deff,
        fncGeochatsCreateGeoChat = 0xe092e16
    };

    Geochats();
    virtual ~Geochats();

    static bool getLocated(OutboundPkt *out, const InputGeoPoint &geoPoint, qint32 radius, qint32 limit);
    static GeochatsLocated getLocatedResult(InboundPkt *in);

    static bool getRecents(OutboundPkt *out, qint32 offset, qint32 limit);
    static GeochatsMessages getRecentsResult(InboundPkt *in);

    static bool checkin(OutboundPkt *out, const InputGeoChat &peer);
    static GeochatsStatedMessage checkinResult(InboundPkt *in);

    static bool getFullChat(OutboundPkt *out, const InputGeoChat &peer);
    static MessagesChatFull getFullChatResult(InboundPkt *in);

    static bool editChatTitle(OutboundPkt *out, const InputGeoChat &peer, const QString &title, const QString &address);
    static GeochatsStatedMessage editChatTitleResult(InboundPkt *in);

    static bool editChatPhoto(OutboundPkt *out, const InputGeoChat &peer, const InputChatPhoto &photo);
    static GeochatsStatedMessage editChatPhotoResult(InboundPkt *in);

    static bool search(OutboundPkt *out, const InputGeoChat &peer, const QString &q, const MessagesFilter &filter, qint32 minDate, qint32 maxDate, qint32 offset, qint32 maxId, qint32 limit);
    static GeochatsMessages searchResult(InboundPkt *in);

    static bool getHistory(OutboundPkt *out, const InputGeoChat &peer, qint32 offset, qint32 maxId, qint32 limit);
    static GeochatsMessages getHistoryResult(InboundPkt *in);

    static bool setTyping(OutboundPkt *out, const InputGeoChat &peer, bool typing);
    static bool setTypingResult(InboundPkt *in);

    static bool sendMessage(OutboundPkt *out, const InputGeoChat &peer, const QString &message, qint64 randomId);
    static GeochatsStatedMessage sendMessageResult(InboundPkt *in);

    static bool sendMedia(OutboundPkt *out, const InputGeoChat &peer, const InputMedia &media, qint64 randomId);
    static GeochatsStatedMessage sendMediaResult(InboundPkt *in);

    static bool createGeoChat(OutboundPkt *out, const QString &title, const InputGeoPoint &geoPoint, const QString &address, const QString &venue);
    static GeochatsStatedMessage createGeoChatResult(InboundPkt *in);

};

}
inline Functions::Geochats::Geochats() {
}

inline Functions::Geochats::~Geochats() {
}

inline bool Functions::Geochats::getLocated(OutboundPkt *out, const InputGeoPoint &geoPoint, qint32 radius, qint32 limit) {
    out->appendInt(fncGeochatsGetLocated);
    if(!geoPoint.push(out)) return false;
    out->appendInt(radius);
    out->appendInt(limit);
    return true;
}

inline GeochatsLocated Functions::Geochats::getLocatedResult(InboundPkt *in) {
    GeochatsLocated result;
    if(!result.fetch(in)) return result;
    return result;
}

inline bool Functions::Geochats::getRecents(OutboundPkt *out, qint32 offset, qint32 limit) {
    out->appendInt(fncGeochatsGetRecents);
    out->appendInt(offset);
    out->appendInt(limit);
    return true;
}

inline GeochatsMessages Functions::Geochats::getRecentsResult(InboundPkt *in) {
    GeochatsMessages result;
    if(!result.fetch(in)) return result;
    return result;
}

inline bool Functions::Geochats::checkin(OutboundPkt *out, const InputGeoChat &peer) {
    out->appendInt(fncGeochatsCheckin);
    if(!peer.push(out)) return false;
    return true;
}

inline GeochatsStatedMessage Functions::Geochats::checkinResult(InboundPkt *in) {
    GeochatsStatedMessage result;
    if(!result.fetch(in)) return result;
    return result;
}

inline bool Functions::Geochats::getFullChat(OutboundPkt *out, const InputGeoChat &peer) {
    out->appendInt(fncGeochatsGetFullChat);
    if(!peer.push(out)) return false;
    return true;
}

inline MessagesChatFull Functions::Geochats::getFullChatResult(InboundPkt *in) {
    MessagesChatFull result;
    if(!result.fetch(in)) return result;
    return result;
}

inline bool Functions::Geochats::editChatTitle(OutboundPkt *out, const InputGeoChat &peer, const QString &title, const QString &address) {
    out->appendInt(fncGeochatsEditChatTitle);
    if(!peer.push(out)) return false;
    out->appendQString(title);
    out->appendQString(address);
    return true;
}

inline GeochatsStatedMessage Functions::Geochats::editChatTitleResult(InboundPkt *in) {
    GeochatsStatedMessage result;
    if(!result.fetch(in)) return result;
    return result;
}

inline bool Functions::Geochats::editChatPhoto(OutboundPkt *out, const InputGeoChat &peer, const InputChatPhoto &photo) {
    out->appendInt(fncGeochatsEditChatPhoto);
    if(!peer.push(out)) return false;
    if(!photo.push(out)) return false;
    return true;
}

inline GeochatsStatedMessage Functions::Geochats::editChatPhotoResult(InboundPkt *in) {
    GeochatsStatedMessage result;
    if(!result.fetch(in)) return result;
    return result;
}

inline bool Functions::Geochats::search(OutboundPkt *out, const InputGeoChat &peer, const QString &q, const MessagesFilter &filter, qint32 minDate, qint32 maxDate, qint32 offset, qint32 maxId, qint32 limit) {
    out->appendInt(fncGeochatsSearch);
    if(!peer.push(out)) return false;
    out->appendQString(q);
    if(!filter.push(out)) return false;
    out->appendInt(minDate);
    out->appendInt(maxDate);
    out->appendInt(offset);
    out->appendInt(maxId);
    out->appendInt(limit);
    return true;
}

inline GeochatsMessages Functions::Geochats::searchResult(InboundPkt *in) {
    GeochatsMessages result;
    if(!result.fetch(in)) return result;
    return result;
}

inline bool Functions::Geochats::getHistory(OutboundPkt *out, const InputGeoChat &peer, qint32 offset, qint32 maxId, qint32 limit) {
    out->appendInt(fncGeochatsGetHistory);
    if(!peer.push(out)) return false;
    out->appendInt(offset);
    out->appendInt(maxId);
    out->appendInt(limit);
    return true;
}

inline GeochatsMessages Functions::Geochats::getHistoryResult(InboundPkt *in) {
    GeochatsMessages result;
    if(!result.fetch(in)) return result;
    return result;
}

inline bool Functions::Geochats::setTyping(OutboundPkt *out, const InputGeoChat &peer, bool typing) {
    out->appendInt(fncGeochatsSetTyping);
    if(!peer.push(out)) return false;
    out->appendBool(typing);
    return true;
}

inline bool Functions::Geochats::setTypingResult(InboundPkt *in) {
    bool result;
    result = in->fetchBool();
    return result;
}

inline bool Functions::Geochats::sendMessage(OutboundPkt *out, const InputGeoChat &peer, const QString &message, qint64 randomId) {
    out->appendInt(fncGeochatsSendMessage);
    if(!peer.push(out)) return false;
    out->appendQString(message);
    out->appendLong(randomId);
    return true;
}

inline GeochatsStatedMessage Functions::Geochats::sendMessageResult(InboundPkt *in) {
    GeochatsStatedMessage result;
    if(!result.fetch(in)) return result;
    return result;
}

inline bool Functions::Geochats::sendMedia(OutboundPkt *out, const InputGeoChat &peer, const InputMedia &media, qint64 randomId) {
    out->appendInt(fncGeochatsSendMedia);
    if(!peer.push(out)) return false;
    if(!media.push(out)) return false;
    out->appendLong(randomId);
    return true;
}

inline GeochatsStatedMessage Functions::Geochats::sendMediaResult(InboundPkt *in) {
    GeochatsStatedMessage result;
    if(!result.fetch(in)) return result;
    return result;
}

inline bool Functions::Geochats::createGeoChat(OutboundPkt *out, const QString &title, const InputGeoPoint &geoPoint, const QString &address, const QString &venue) {
    out->appendInt(fncGeochatsCreateGeoChat);
    out->appendQString(title);
    if(!geoPoint.push(out)) return false;
    out->appendQString(address);
    out->appendQString(venue);
    return true;
}

inline GeochatsStatedMessage Functions::Geochats::createGeoChatResult(InboundPkt *in) {
    GeochatsStatedMessage result;
    if(!result.fetch(in)) return result;
    return result;
}


}

#endif // LQTG_FNC_GEOCHATS
