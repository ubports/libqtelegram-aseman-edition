// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#ifndef LQTG_TYPE_UPDATESTYPE
#define LQTG_TYPE_UPDATESTYPE

#include "telegramtypeobject.h"

#include <QMetaType>
#include <QVariant>
#include "core/inboundpkt.h"
#include "core/outboundpkt.h"
#include "../coretypes.h"

#include <QDataStream>

#include <QtGlobal>
#include <QList>
#include "chat.h"
#include <QString>
#include "update.h"
#include "user.h"

class LIBQTELEGRAMSHARED_EXPORT UpdatesType : public TelegramTypeObject
{
public:
    enum UpdatesTypeClassType {
        typeUpdatesTooLong = 0xe317af7e,
        typeUpdateShortMessage = 0xed5c2127,
        typeUpdateShortChatMessage = 0x52238b3c,
        typeUpdateShort = 0x78d4dec1,
        typeUpdatesCombined = 0x725b04c3,
        typeUpdates = 0x74ae4240
    };

    UpdatesType(UpdatesTypeClassType classType = typeUpdatesTooLong, InboundPkt *in = 0);
    UpdatesType(InboundPkt *in);
    UpdatesType(const Null&);
    virtual ~UpdatesType();

    void setChatId(qint32 chatId);
    qint32 chatId() const;

    void setChats(const QList<Chat> &chats);
    QList<Chat> chats() const;

    void setDate(qint32 date);
    qint32 date() const;

    void setFlags(qint32 flags);
    qint32 flags() const;

    void setFromId(qint32 fromId);
    qint32 fromId() const;

    void setFwdDate(qint32 fwdDate);
    qint32 fwdDate() const;

    void setFwdFromId(qint32 fwdFromId);
    qint32 fwdFromId() const;

    void setId(qint32 id);
    qint32 id() const;

    void setMessage(const QString &message);
    QString message() const;

    void setPts(qint32 pts);
    qint32 pts() const;

    void setPtsCount(qint32 ptsCount);
    qint32 ptsCount() const;

    void setReplyToMsgId(qint32 replyToMsgId);
    qint32 replyToMsgId() const;

    void setSeq(qint32 seq);
    qint32 seq() const;

    void setSeqStart(qint32 seqStart);
    qint32 seqStart() const;

    void setUpdate(const Update &update);
    Update update() const;

    void setUpdates(const QList<Update> &updates);
    QList<Update> updates() const;

    void setUserId(qint32 userId);
    qint32 userId() const;

    void setUsers(const QList<User> &users);
    QList<User> users() const;

    void setClassType(UpdatesTypeClassType classType);
    UpdatesTypeClassType classType() const;

    bool fetch(InboundPkt *in);
    bool push(OutboundPkt *out) const;

    QMap<QString, QVariant> toMap() const;
    static UpdatesType fromMap(const QMap<QString, QVariant> &map);

    bool operator ==(const UpdatesType &b) const;

    bool operator==(bool stt) const { return isNull() != stt; }
    bool operator!=(bool stt) const { return !operator ==(stt); }

    QByteArray getHash(QCryptographicHash::Algorithm alg = QCryptographicHash::Md5) const;

private:
    qint32 m_chatId;
    QList<Chat> m_chats;
    qint32 m_date;
    qint32 m_flags;
    qint32 m_fromId;
    qint32 m_fwdDate;
    qint32 m_fwdFromId;
    qint32 m_id;
    QString m_message;
    qint32 m_pts;
    qint32 m_ptsCount;
    qint32 m_replyToMsgId;
    qint32 m_seq;
    qint32 m_seqStart;
    Update m_update;
    QList<Update> m_updates;
    qint32 m_userId;
    QList<User> m_users;
    UpdatesTypeClassType m_classType;
};

Q_DECLARE_METATYPE(UpdatesType)

QDataStream LIBQTELEGRAMSHARED_EXPORT &operator<<(QDataStream &stream, const UpdatesType &item);
QDataStream LIBQTELEGRAMSHARED_EXPORT &operator>>(QDataStream &stream, UpdatesType &item);

inline UpdatesType::UpdatesType(UpdatesTypeClassType classType, InboundPkt *in) :
    m_chatId(0),
    m_date(0),
    m_flags(0),
    m_fromId(0),
    m_fwdDate(0),
    m_fwdFromId(0),
    m_id(0),
    m_pts(0),
    m_ptsCount(0),
    m_replyToMsgId(0),
    m_seq(0),
    m_seqStart(0),
    m_userId(0),
    m_classType(classType)
{
    if(in) fetch(in);
}

inline UpdatesType::UpdatesType(InboundPkt *in) :
    m_chatId(0),
    m_date(0),
    m_flags(0),
    m_fromId(0),
    m_fwdDate(0),
    m_fwdFromId(0),
    m_id(0),
    m_pts(0),
    m_ptsCount(0),
    m_replyToMsgId(0),
    m_seq(0),
    m_seqStart(0),
    m_userId(0),
    m_classType(typeUpdatesTooLong)
{
    fetch(in);
}

inline UpdatesType::UpdatesType(const Null &null) :
    TelegramTypeObject(null),
    m_chatId(0),
    m_date(0),
    m_flags(0),
    m_fromId(0),
    m_fwdDate(0),
    m_fwdFromId(0),
    m_id(0),
    m_pts(0),
    m_ptsCount(0),
    m_replyToMsgId(0),
    m_seq(0),
    m_seqStart(0),
    m_userId(0),
    m_classType(typeUpdatesTooLong)
{
}

inline UpdatesType::~UpdatesType() {
}

inline void UpdatesType::setChatId(qint32 chatId) {
    m_chatId = chatId;
}

inline qint32 UpdatesType::chatId() const {
    return m_chatId;
}

inline void UpdatesType::setChats(const QList<Chat> &chats) {
    m_chats = chats;
}

inline QList<Chat> UpdatesType::chats() const {
    return m_chats;
}

inline void UpdatesType::setDate(qint32 date) {
    m_date = date;
}

inline qint32 UpdatesType::date() const {
    return m_date;
}

inline void UpdatesType::setFlags(qint32 flags) {
    m_flags = flags;
}

inline qint32 UpdatesType::flags() const {
    return m_flags;
}

inline void UpdatesType::setFromId(qint32 fromId) {
    m_fromId = fromId;
}

inline qint32 UpdatesType::fromId() const {
    return m_fromId;
}

inline void UpdatesType::setFwdDate(qint32 fwdDate) {
    m_fwdDate = fwdDate;
}

inline qint32 UpdatesType::fwdDate() const {
    return m_fwdDate;
}

inline void UpdatesType::setFwdFromId(qint32 fwdFromId) {
    m_fwdFromId = fwdFromId;
}

inline qint32 UpdatesType::fwdFromId() const {
    return m_fwdFromId;
}

inline void UpdatesType::setId(qint32 id) {
    m_id = id;
}

inline qint32 UpdatesType::id() const {
    return m_id;
}

inline void UpdatesType::setMessage(const QString &message) {
    m_message = message;
}

inline QString UpdatesType::message() const {
    return m_message;
}

inline void UpdatesType::setPts(qint32 pts) {
    m_pts = pts;
}

inline qint32 UpdatesType::pts() const {
    return m_pts;
}

inline void UpdatesType::setPtsCount(qint32 ptsCount) {
    m_ptsCount = ptsCount;
}

inline qint32 UpdatesType::ptsCount() const {
    return m_ptsCount;
}

inline void UpdatesType::setReplyToMsgId(qint32 replyToMsgId) {
    m_replyToMsgId = replyToMsgId;
}

inline qint32 UpdatesType::replyToMsgId() const {
    return m_replyToMsgId;
}

inline void UpdatesType::setSeq(qint32 seq) {
    m_seq = seq;
}

inline qint32 UpdatesType::seq() const {
    return m_seq;
}

inline void UpdatesType::setSeqStart(qint32 seqStart) {
    m_seqStart = seqStart;
}

inline qint32 UpdatesType::seqStart() const {
    return m_seqStart;
}

inline void UpdatesType::setUpdate(const Update &update) {
    m_update = update;
}

inline Update UpdatesType::update() const {
    return m_update;
}

inline void UpdatesType::setUpdates(const QList<Update> &updates) {
    m_updates = updates;
}

inline QList<Update> UpdatesType::updates() const {
    return m_updates;
}

inline void UpdatesType::setUserId(qint32 userId) {
    m_userId = userId;
}

inline qint32 UpdatesType::userId() const {
    return m_userId;
}

inline void UpdatesType::setUsers(const QList<User> &users) {
    m_users = users;
}

inline QList<User> UpdatesType::users() const {
    return m_users;
}

inline bool UpdatesType::operator ==(const UpdatesType &b) const {
    return m_classType == b.m_classType &&
           m_chatId == b.m_chatId &&
           m_chats == b.m_chats &&
           m_date == b.m_date &&
           m_flags == b.m_flags &&
           m_fromId == b.m_fromId &&
           m_fwdDate == b.m_fwdDate &&
           m_fwdFromId == b.m_fwdFromId &&
           m_id == b.m_id &&
           m_message == b.m_message &&
           m_pts == b.m_pts &&
           m_ptsCount == b.m_ptsCount &&
           m_replyToMsgId == b.m_replyToMsgId &&
           m_seq == b.m_seq &&
           m_seqStart == b.m_seqStart &&
           m_update == b.m_update &&
           m_updates == b.m_updates &&
           m_userId == b.m_userId &&
           m_users == b.m_users;
}

inline void UpdatesType::setClassType(UpdatesType::UpdatesTypeClassType classType) {
    m_classType = classType;
}

inline UpdatesType::UpdatesTypeClassType UpdatesType::classType() const {
    return m_classType;
}

inline bool UpdatesType::fetch(InboundPkt *in) {
    LQTG_FETCH_LOG;
    int x = in->fetchInt();
    switch(x) {
    case typeUpdatesTooLong: {
        m_classType = static_cast<UpdatesTypeClassType>(x);
        return true;
    }
        break;
    
    case typeUpdateShortMessage: {
        m_flags = in->fetchInt();
        m_id = in->fetchInt();
        m_userId = in->fetchInt();
        m_message = in->fetchQString();
        m_pts = in->fetchInt();
        m_ptsCount = in->fetchInt();
        m_date = in->fetchInt();
        if(m_flags & 1<<2) {
            m_fwdFromId = in->fetchInt();
        }
        if(m_flags & 1<<2) {
            m_fwdDate = in->fetchInt();
        }
        if(m_flags & 1<<3) {
            m_replyToMsgId = in->fetchInt();
        }
        m_classType = static_cast<UpdatesTypeClassType>(x);
        return true;
    }
        break;
    
    case typeUpdateShortChatMessage: {
        m_flags = in->fetchInt();
        m_id = in->fetchInt();
        m_fromId = in->fetchInt();
        m_chatId = in->fetchInt();
        m_message = in->fetchQString();
        m_pts = in->fetchInt();
        m_ptsCount = in->fetchInt();
        m_date = in->fetchInt();
        if(m_flags & 1<<2) {
            m_fwdFromId = in->fetchInt();
        }
        if(m_flags & 1<<2) {
            m_fwdDate = in->fetchInt();
        }
        if(m_flags & 1<<3) {
            m_replyToMsgId = in->fetchInt();
        }
        m_classType = static_cast<UpdatesTypeClassType>(x);
        return true;
    }
        break;
    
    case typeUpdateShort: {
        m_update.fetch(in);
        m_date = in->fetchInt();
        m_classType = static_cast<UpdatesTypeClassType>(x);
        return true;
    }
        break;
    
    case typeUpdatesCombined: {
        if(in->fetchInt() != (qint32)CoreTypes::typeVector) return false;
        qint32 m_updates_length = in->fetchInt();
        m_updates.clear();
        for (qint32 i = 0; i < m_updates_length; i++) {
            Update type;
            type.fetch(in);
            m_updates.append(type);
        }
        if(in->fetchInt() != (qint32)CoreTypes::typeVector) return false;
        qint32 m_users_length = in->fetchInt();
        m_users.clear();
        for (qint32 i = 0; i < m_users_length; i++) {
            User type;
            type.fetch(in);
            m_users.append(type);
        }
        if(in->fetchInt() != (qint32)CoreTypes::typeVector) return false;
        qint32 m_chats_length = in->fetchInt();
        m_chats.clear();
        for (qint32 i = 0; i < m_chats_length; i++) {
            Chat type;
            type.fetch(in);
            m_chats.append(type);
        }
        m_date = in->fetchInt();
        m_seqStart = in->fetchInt();
        m_seq = in->fetchInt();
        m_classType = static_cast<UpdatesTypeClassType>(x);
        return true;
    }
        break;
    
    case typeUpdates: {
        if(in->fetchInt() != (qint32)CoreTypes::typeVector) return false;
        qint32 m_updates_length = in->fetchInt();
        m_updates.clear();
        for (qint32 i = 0; i < m_updates_length; i++) {
            Update type;
            type.fetch(in);
            m_updates.append(type);
        }
        if(in->fetchInt() != (qint32)CoreTypes::typeVector) return false;
        qint32 m_users_length = in->fetchInt();
        m_users.clear();
        for (qint32 i = 0; i < m_users_length; i++) {
            User type;
            type.fetch(in);
            m_users.append(type);
        }
        if(in->fetchInt() != (qint32)CoreTypes::typeVector) return false;
        qint32 m_chats_length = in->fetchInt();
        m_chats.clear();
        for (qint32 i = 0; i < m_chats_length; i++) {
            Chat type;
            type.fetch(in);
            m_chats.append(type);
        }
        m_date = in->fetchInt();
        m_seq = in->fetchInt();
        m_classType = static_cast<UpdatesTypeClassType>(x);
        return true;
    }
        break;
    
    default:
        LQTG_FETCH_ASSERT;
        return false;
    }
}

inline bool UpdatesType::push(OutboundPkt *out) const {
    out->appendInt(m_classType);
    switch(m_classType) {
    case typeUpdatesTooLong: {
        return true;
    }
        break;
    
    case typeUpdateShortMessage: {
        out->appendInt(m_flags);
        out->appendInt(m_id);
        out->appendInt(m_userId);
        out->appendQString(m_message);
        out->appendInt(m_pts);
        out->appendInt(m_ptsCount);
        out->appendInt(m_date);
        out->appendInt(m_fwdFromId);
        out->appendInt(m_fwdDate);
        out->appendInt(m_replyToMsgId);
        return true;
    }
        break;
    
    case typeUpdateShortChatMessage: {
        out->appendInt(m_flags);
        out->appendInt(m_id);
        out->appendInt(m_fromId);
        out->appendInt(m_chatId);
        out->appendQString(m_message);
        out->appendInt(m_pts);
        out->appendInt(m_ptsCount);
        out->appendInt(m_date);
        out->appendInt(m_fwdFromId);
        out->appendInt(m_fwdDate);
        out->appendInt(m_replyToMsgId);
        return true;
    }
        break;
    
    case typeUpdateShort: {
        m_update.push(out);
        out->appendInt(m_date);
        return true;
    }
        break;
    
    case typeUpdatesCombined: {
        out->appendInt(CoreTypes::typeVector);
        out->appendInt(m_updates.count());
        for (qint32 i = 0; i < m_updates.count(); i++) {
            m_updates[i].push(out);
        }
        out->appendInt(CoreTypes::typeVector);
        out->appendInt(m_users.count());
        for (qint32 i = 0; i < m_users.count(); i++) {
            m_users[i].push(out);
        }
        out->appendInt(CoreTypes::typeVector);
        out->appendInt(m_chats.count());
        for (qint32 i = 0; i < m_chats.count(); i++) {
            m_chats[i].push(out);
        }
        out->appendInt(m_date);
        out->appendInt(m_seqStart);
        out->appendInt(m_seq);
        return true;
    }
        break;
    
    case typeUpdates: {
        out->appendInt(CoreTypes::typeVector);
        out->appendInt(m_updates.count());
        for (qint32 i = 0; i < m_updates.count(); i++) {
            m_updates[i].push(out);
        }
        out->appendInt(CoreTypes::typeVector);
        out->appendInt(m_users.count());
        for (qint32 i = 0; i < m_users.count(); i++) {
            m_users[i].push(out);
        }
        out->appendInt(CoreTypes::typeVector);
        out->appendInt(m_chats.count());
        for (qint32 i = 0; i < m_chats.count(); i++) {
            m_chats[i].push(out);
        }
        out->appendInt(m_date);
        out->appendInt(m_seq);
        return true;
    }
        break;
    
    default:
        return false;
    }
}

inline QMap<QString, QVariant> UpdatesType::toMap() const {
    QMap<QString, QVariant> result;
    switch(static_cast<int>(m_classType)) {
    case typeUpdatesTooLong: {
        result["classType"] = "UpdatesType::typeUpdatesTooLong";
        return result;
    }
        break;
    
    case typeUpdateShortMessage: {
        result["classType"] = "UpdatesType::typeUpdateShortMessage";
        result["id"] = QVariant::fromValue<qint32>(id());
        result["userId"] = QVariant::fromValue<qint32>(userId());
        result["message"] = QVariant::fromValue<QString>(message());
        result["pts"] = QVariant::fromValue<qint32>(pts());
        result["ptsCount"] = QVariant::fromValue<qint32>(ptsCount());
        result["date"] = QVariant::fromValue<qint32>(date());
        result["fwdFromId"] = QVariant::fromValue<qint32>(fwdFromId());
        result["fwdDate"] = QVariant::fromValue<qint32>(fwdDate());
        result["replyToMsgId"] = QVariant::fromValue<qint32>(replyToMsgId());
        return result;
    }
        break;
    
    case typeUpdateShortChatMessage: {
        result["classType"] = "UpdatesType::typeUpdateShortChatMessage";
        result["id"] = QVariant::fromValue<qint32>(id());
        result["fromId"] = QVariant::fromValue<qint32>(fromId());
        result["chatId"] = QVariant::fromValue<qint32>(chatId());
        result["message"] = QVariant::fromValue<QString>(message());
        result["pts"] = QVariant::fromValue<qint32>(pts());
        result["ptsCount"] = QVariant::fromValue<qint32>(ptsCount());
        result["date"] = QVariant::fromValue<qint32>(date());
        result["fwdFromId"] = QVariant::fromValue<qint32>(fwdFromId());
        result["fwdDate"] = QVariant::fromValue<qint32>(fwdDate());
        result["replyToMsgId"] = QVariant::fromValue<qint32>(replyToMsgId());
        return result;
    }
        break;
    
    case typeUpdateShort: {
        result["classType"] = "UpdatesType::typeUpdateShort";
        result["update"] = m_update.toMap();
        result["date"] = QVariant::fromValue<qint32>(date());
        return result;
    }
        break;
    
    case typeUpdatesCombined: {
        result["classType"] = "UpdatesType::typeUpdatesCombined";
        QList<QVariant> _updates;
        Q_FOREACH(const Update &m__type, m_updates)
            _updates << m__type.toMap();
        result["updates"] = _updates;
        QList<QVariant> _users;
        Q_FOREACH(const User &m__type, m_users)
            _users << m__type.toMap();
        result["users"] = _users;
        QList<QVariant> _chats;
        Q_FOREACH(const Chat &m__type, m_chats)
            _chats << m__type.toMap();
        result["chats"] = _chats;
        result["date"] = QVariant::fromValue<qint32>(date());
        result["seqStart"] = QVariant::fromValue<qint32>(seqStart());
        result["seq"] = QVariant::fromValue<qint32>(seq());
        return result;
    }
        break;
    
    case typeUpdates: {
        result["classType"] = "UpdatesType::typeUpdates";
        QList<QVariant> _updates;
        Q_FOREACH(const Update &m__type, m_updates)
            _updates << m__type.toMap();
        result["updates"] = _updates;
        QList<QVariant> _users;
        Q_FOREACH(const User &m__type, m_users)
            _users << m__type.toMap();
        result["users"] = _users;
        QList<QVariant> _chats;
        Q_FOREACH(const Chat &m__type, m_chats)
            _chats << m__type.toMap();
        result["chats"] = _chats;
        result["date"] = QVariant::fromValue<qint32>(date());
        result["seq"] = QVariant::fromValue<qint32>(seq());
        return result;
    }
        break;
    
    default:
        return result;
    }
}

inline UpdatesType UpdatesType::fromMap(const QMap<QString, QVariant> &map) {
    UpdatesType result;
    if(map.value("classType").toString() == "UpdatesType::typeUpdatesTooLong") {
        result.setClassType(typeUpdatesTooLong);
        return result;
    }
    if(map.value("classType").toString() == "UpdatesType::typeUpdateShortMessage") {
        result.setClassType(typeUpdateShortMessage);
        result.setId( map.value("id").value<qint32>() );
        result.setUserId( map.value("userId").value<qint32>() );
        result.setMessage( map.value("message").value<QString>() );
        result.setPts( map.value("pts").value<qint32>() );
        result.setPtsCount( map.value("ptsCount").value<qint32>() );
        result.setDate( map.value("date").value<qint32>() );
        result.setFwdFromId( map.value("fwdFromId").value<qint32>() );
        result.setFwdDate( map.value("fwdDate").value<qint32>() );
        result.setReplyToMsgId( map.value("replyToMsgId").value<qint32>() );
        return result;
    }
    if(map.value("classType").toString() == "UpdatesType::typeUpdateShortChatMessage") {
        result.setClassType(typeUpdateShortChatMessage);
        result.setId( map.value("id").value<qint32>() );
        result.setFromId( map.value("fromId").value<qint32>() );
        result.setChatId( map.value("chatId").value<qint32>() );
        result.setMessage( map.value("message").value<QString>() );
        result.setPts( map.value("pts").value<qint32>() );
        result.setPtsCount( map.value("ptsCount").value<qint32>() );
        result.setDate( map.value("date").value<qint32>() );
        result.setFwdFromId( map.value("fwdFromId").value<qint32>() );
        result.setFwdDate( map.value("fwdDate").value<qint32>() );
        result.setReplyToMsgId( map.value("replyToMsgId").value<qint32>() );
        return result;
    }
    if(map.value("classType").toString() == "UpdatesType::typeUpdateShort") {
        result.setClassType(typeUpdateShort);
        result.setUpdate( Update::fromMap(map.value("update").toMap()) );
        result.setDate( map.value("date").value<qint32>() );
        return result;
    }
    if(map.value("classType").toString() == "UpdatesType::typeUpdatesCombined") {
        result.setClassType(typeUpdatesCombined);
        QList<QVariant> map_updates = map["updates"].toList();
        QList<Update> _updates;
        Q_FOREACH(const QVariant &var, map_updates)
            _updates << Update::fromMap(var.toMap());
        result.setUpdates(_updates);
        QList<QVariant> map_users = map["users"].toList();
        QList<User> _users;
        Q_FOREACH(const QVariant &var, map_users)
            _users << User::fromMap(var.toMap());
        result.setUsers(_users);
        QList<QVariant> map_chats = map["chats"].toList();
        QList<Chat> _chats;
        Q_FOREACH(const QVariant &var, map_chats)
            _chats << Chat::fromMap(var.toMap());
        result.setChats(_chats);
        result.setDate( map.value("date").value<qint32>() );
        result.setSeqStart( map.value("seqStart").value<qint32>() );
        result.setSeq( map.value("seq").value<qint32>() );
        return result;
    }
    if(map.value("classType").toString() == "UpdatesType::typeUpdates") {
        result.setClassType(typeUpdates);
        QList<QVariant> map_updates = map["updates"].toList();
        QList<Update> _updates;
        Q_FOREACH(const QVariant &var, map_updates)
            _updates << Update::fromMap(var.toMap());
        result.setUpdates(_updates);
        QList<QVariant> map_users = map["users"].toList();
        QList<User> _users;
        Q_FOREACH(const QVariant &var, map_users)
            _users << User::fromMap(var.toMap());
        result.setUsers(_users);
        QList<QVariant> map_chats = map["chats"].toList();
        QList<Chat> _chats;
        Q_FOREACH(const QVariant &var, map_chats)
            _chats << Chat::fromMap(var.toMap());
        result.setChats(_chats);
        result.setDate( map.value("date").value<qint32>() );
        result.setSeq( map.value("seq").value<qint32>() );
        return result;
    }
    return result;
}

inline QByteArray UpdatesType::getHash(QCryptographicHash::Algorithm alg) const {
    QByteArray data;
    QDataStream str(&data, QIODevice::WriteOnly);
    str << *this;
    return QCryptographicHash::hash(data, alg);
}

inline QDataStream &operator<<(QDataStream &stream, const UpdatesType &item) {
    stream << static_cast<uint>(item.classType());
    switch(item.classType()) {
    case UpdatesType::typeUpdatesTooLong:
        
        break;
    case UpdatesType::typeUpdateShortMessage:
        stream << item.flags();
        stream << item.id();
        stream << item.userId();
        stream << item.message();
        stream << item.pts();
        stream << item.ptsCount();
        stream << item.date();
        stream << item.fwdFromId();
        stream << item.fwdDate();
        stream << item.replyToMsgId();
        break;
    case UpdatesType::typeUpdateShortChatMessage:
        stream << item.flags();
        stream << item.id();
        stream << item.fromId();
        stream << item.chatId();
        stream << item.message();
        stream << item.pts();
        stream << item.ptsCount();
        stream << item.date();
        stream << item.fwdFromId();
        stream << item.fwdDate();
        stream << item.replyToMsgId();
        break;
    case UpdatesType::typeUpdateShort:
        stream << item.update();
        stream << item.date();
        break;
    case UpdatesType::typeUpdatesCombined:
        stream << item.updates();
        stream << item.users();
        stream << item.chats();
        stream << item.date();
        stream << item.seqStart();
        stream << item.seq();
        break;
    case UpdatesType::typeUpdates:
        stream << item.updates();
        stream << item.users();
        stream << item.chats();
        stream << item.date();
        stream << item.seq();
        break;
    }
    return stream;
}

inline QDataStream &operator>>(QDataStream &stream, UpdatesType &item) {
    uint type = 0;
    stream >> type;
    item.setClassType(static_cast<UpdatesType::UpdatesTypeClassType>(type));
    switch(type) {
    case UpdatesType::typeUpdatesTooLong: {
        
    }
        break;
    case UpdatesType::typeUpdateShortMessage: {
        qint32 m_flags;
        stream >> m_flags;
        item.setFlags(m_flags);
        qint32 m_id;
        stream >> m_id;
        item.setId(m_id);
        qint32 m_user_id;
        stream >> m_user_id;
        item.setUserId(m_user_id);
        QString m_message;
        stream >> m_message;
        item.setMessage(m_message);
        qint32 m_pts;
        stream >> m_pts;
        item.setPts(m_pts);
        qint32 m_pts_count;
        stream >> m_pts_count;
        item.setPtsCount(m_pts_count);
        qint32 m_date;
        stream >> m_date;
        item.setDate(m_date);
        qint32 m_fwd_from_id;
        stream >> m_fwd_from_id;
        item.setFwdFromId(m_fwd_from_id);
        qint32 m_fwd_date;
        stream >> m_fwd_date;
        item.setFwdDate(m_fwd_date);
        qint32 m_reply_to_msg_id;
        stream >> m_reply_to_msg_id;
        item.setReplyToMsgId(m_reply_to_msg_id);
    }
        break;
    case UpdatesType::typeUpdateShortChatMessage: {
        qint32 m_flags;
        stream >> m_flags;
        item.setFlags(m_flags);
        qint32 m_id;
        stream >> m_id;
        item.setId(m_id);
        qint32 m_from_id;
        stream >> m_from_id;
        item.setFromId(m_from_id);
        qint32 m_chat_id;
        stream >> m_chat_id;
        item.setChatId(m_chat_id);
        QString m_message;
        stream >> m_message;
        item.setMessage(m_message);
        qint32 m_pts;
        stream >> m_pts;
        item.setPts(m_pts);
        qint32 m_pts_count;
        stream >> m_pts_count;
        item.setPtsCount(m_pts_count);
        qint32 m_date;
        stream >> m_date;
        item.setDate(m_date);
        qint32 m_fwd_from_id;
        stream >> m_fwd_from_id;
        item.setFwdFromId(m_fwd_from_id);
        qint32 m_fwd_date;
        stream >> m_fwd_date;
        item.setFwdDate(m_fwd_date);
        qint32 m_reply_to_msg_id;
        stream >> m_reply_to_msg_id;
        item.setReplyToMsgId(m_reply_to_msg_id);
    }
        break;
    case UpdatesType::typeUpdateShort: {
        Update m_update;
        stream >> m_update;
        item.setUpdate(m_update);
        qint32 m_date;
        stream >> m_date;
        item.setDate(m_date);
    }
        break;
    case UpdatesType::typeUpdatesCombined: {
        QList<Update> m_updates;
        stream >> m_updates;
        item.setUpdates(m_updates);
        QList<User> m_users;
        stream >> m_users;
        item.setUsers(m_users);
        QList<Chat> m_chats;
        stream >> m_chats;
        item.setChats(m_chats);
        qint32 m_date;
        stream >> m_date;
        item.setDate(m_date);
        qint32 m_seq_start;
        stream >> m_seq_start;
        item.setSeqStart(m_seq_start);
        qint32 m_seq;
        stream >> m_seq;
        item.setSeq(m_seq);
    }
        break;
    case UpdatesType::typeUpdates: {
        QList<Update> m_updates;
        stream >> m_updates;
        item.setUpdates(m_updates);
        QList<User> m_users;
        stream >> m_users;
        item.setUsers(m_users);
        QList<Chat> m_chats;
        stream >> m_chats;
        item.setChats(m_chats);
        qint32 m_date;
        stream >> m_date;
        item.setDate(m_date);
        qint32 m_seq;
        stream >> m_seq;
        item.setSeq(m_seq);
    }
        break;
    }
    return stream;
}


#endif // LQTG_TYPE_UPDATESTYPE
