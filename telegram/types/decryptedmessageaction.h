// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#ifndef LQTG_TYPE_DECRYPTEDMESSAGEACTION
#define LQTG_TYPE_DECRYPTEDMESSAGEACTION

#include "telegramtypeobject.h"

#include <QMetaType>
#include <QVariant>
#include "core/inboundpkt.h"
#include "core/outboundpkt.h"
#include "../coretypes.h"

#include <QDataStream>

#include "sendmessageaction.h"
#include <QtGlobal>
#include <QByteArray>
#include <QList>

class LIBQTELEGRAMSHARED_EXPORT DecryptedMessageAction : public TelegramTypeObject
{
public:
    enum DecryptedMessageActionClassType {
        typeDecryptedMessageActionSetMessageTTLSecret8 = 0xa1733aec,
        typeDecryptedMessageActionReadMessagesSecret8 = 0xc4f40be,
        typeDecryptedMessageActionDeleteMessagesSecret8 = 0x65614304,
        typeDecryptedMessageActionScreenshotMessagesSecret8 = 0x8ac1f475,
        typeDecryptedMessageActionFlushHistorySecret8 = 0x6719e45c,
        typeDecryptedMessageActionResendSecret17 = 0x511110b0,
        typeDecryptedMessageActionNotifyLayerSecret17 = 0xf3048883,
        typeDecryptedMessageActionTypingSecret17 = 0xccb27641,
        typeDecryptedMessageActionRequestKeySecret20 = 0xf3c9611b,
        typeDecryptedMessageActionAcceptKeySecret20 = 0x6fe1735b,
        typeDecryptedMessageActionAbortKeySecret20 = 0xdd05ec6b,
        typeDecryptedMessageActionCommitKeySecret20 = 0xec2e0b9b,
        typeDecryptedMessageActionNoopSecret20 = 0xa82fdd63
    };

    DecryptedMessageAction(DecryptedMessageActionClassType classType = typeDecryptedMessageActionSetMessageTTLSecret8, InboundPkt *in = 0);
    DecryptedMessageAction(InboundPkt *in);
    DecryptedMessageAction(const Null&);
    virtual ~DecryptedMessageAction();

    void setAction(const SendMessageAction &action);
    SendMessageAction action() const;

    void setEndSeqNo(qint32 endSeqNo);
    qint32 endSeqNo() const;

    void setExchangeId(qint64 exchangeId);
    qint64 exchangeId() const;

    void setGA(const QByteArray &gA);
    QByteArray gA() const;

    void setGB(const QByteArray &gB);
    QByteArray gB() const;

    void setKeyFingerprint(qint64 keyFingerprint);
    qint64 keyFingerprint() const;

    void setLayer(qint32 layer);
    qint32 layer() const;

    void setRandomIds(const QList<qint64> &randomIds);
    QList<qint64> randomIds() const;

    void setStartSeqNo(qint32 startSeqNo);
    qint32 startSeqNo() const;

    void setTtlSeconds(qint32 ttlSeconds);
    qint32 ttlSeconds() const;

    void setClassType(DecryptedMessageActionClassType classType);
    DecryptedMessageActionClassType classType() const;

    bool fetch(InboundPkt *in);
    bool push(OutboundPkt *out) const;

    QMap<QString, QVariant> toMap() const;
    static DecryptedMessageAction fromMap(const QMap<QString, QVariant> &map);

    bool operator ==(const DecryptedMessageAction &b) const;

    bool operator==(bool stt) const { return isNull() != stt; }
    bool operator!=(bool stt) const { return !operator ==(stt); }

    QByteArray getHash(QCryptographicHash::Algorithm alg = QCryptographicHash::Md5) const;

private:
    SendMessageAction m_action;
    qint32 m_endSeqNo;
    qint64 m_exchangeId;
    QByteArray m_gA;
    QByteArray m_gB;
    qint64 m_keyFingerprint;
    qint32 m_layer;
    QList<qint64> m_randomIds;
    qint32 m_startSeqNo;
    qint32 m_ttlSeconds;
    DecryptedMessageActionClassType m_classType;
};

Q_DECLARE_METATYPE(DecryptedMessageAction)

QDataStream LIBQTELEGRAMSHARED_EXPORT &operator<<(QDataStream &stream, const DecryptedMessageAction &item);
QDataStream LIBQTELEGRAMSHARED_EXPORT &operator>>(QDataStream &stream, DecryptedMessageAction &item);

inline DecryptedMessageAction::DecryptedMessageAction(DecryptedMessageActionClassType classType, InboundPkt *in) :
    m_endSeqNo(0),
    m_exchangeId(0),
    m_keyFingerprint(0),
    m_layer(0),
    m_startSeqNo(0),
    m_ttlSeconds(0),
    m_classType(classType)
{
    if(in) fetch(in);
}

inline DecryptedMessageAction::DecryptedMessageAction(InboundPkt *in) :
    m_endSeqNo(0),
    m_exchangeId(0),
    m_keyFingerprint(0),
    m_layer(0),
    m_startSeqNo(0),
    m_ttlSeconds(0),
    m_classType(typeDecryptedMessageActionSetMessageTTLSecret8)
{
    fetch(in);
}

inline DecryptedMessageAction::DecryptedMessageAction(const Null &null) :
    TelegramTypeObject(null),
    m_endSeqNo(0),
    m_exchangeId(0),
    m_keyFingerprint(0),
    m_layer(0),
    m_startSeqNo(0),
    m_ttlSeconds(0),
    m_classType(typeDecryptedMessageActionSetMessageTTLSecret8)
{
}

inline DecryptedMessageAction::~DecryptedMessageAction() {
}

inline void DecryptedMessageAction::setAction(const SendMessageAction &action) {
    m_action = action;
}

inline SendMessageAction DecryptedMessageAction::action() const {
    return m_action;
}

inline void DecryptedMessageAction::setEndSeqNo(qint32 endSeqNo) {
    m_endSeqNo = endSeqNo;
}

inline qint32 DecryptedMessageAction::endSeqNo() const {
    return m_endSeqNo;
}

inline void DecryptedMessageAction::setExchangeId(qint64 exchangeId) {
    m_exchangeId = exchangeId;
}

inline qint64 DecryptedMessageAction::exchangeId() const {
    return m_exchangeId;
}

inline void DecryptedMessageAction::setGA(const QByteArray &gA) {
    m_gA = gA;
}

inline QByteArray DecryptedMessageAction::gA() const {
    return m_gA;
}

inline void DecryptedMessageAction::setGB(const QByteArray &gB) {
    m_gB = gB;
}

inline QByteArray DecryptedMessageAction::gB() const {
    return m_gB;
}

inline void DecryptedMessageAction::setKeyFingerprint(qint64 keyFingerprint) {
    m_keyFingerprint = keyFingerprint;
}

inline qint64 DecryptedMessageAction::keyFingerprint() const {
    return m_keyFingerprint;
}

inline void DecryptedMessageAction::setLayer(qint32 layer) {
    m_layer = layer;
}

inline qint32 DecryptedMessageAction::layer() const {
    return m_layer;
}

inline void DecryptedMessageAction::setRandomIds(const QList<qint64> &randomIds) {
    m_randomIds = randomIds;
}

inline QList<qint64> DecryptedMessageAction::randomIds() const {
    return m_randomIds;
}

inline void DecryptedMessageAction::setStartSeqNo(qint32 startSeqNo) {
    m_startSeqNo = startSeqNo;
}

inline qint32 DecryptedMessageAction::startSeqNo() const {
    return m_startSeqNo;
}

inline void DecryptedMessageAction::setTtlSeconds(qint32 ttlSeconds) {
    m_ttlSeconds = ttlSeconds;
}

inline qint32 DecryptedMessageAction::ttlSeconds() const {
    return m_ttlSeconds;
}

inline bool DecryptedMessageAction::operator ==(const DecryptedMessageAction &b) const {
    return m_classType == b.m_classType &&
           m_action == b.m_action &&
           m_endSeqNo == b.m_endSeqNo &&
           m_exchangeId == b.m_exchangeId &&
           m_gA == b.m_gA &&
           m_gB == b.m_gB &&
           m_keyFingerprint == b.m_keyFingerprint &&
           m_layer == b.m_layer &&
           m_randomIds == b.m_randomIds &&
           m_startSeqNo == b.m_startSeqNo &&
           m_ttlSeconds == b.m_ttlSeconds;
}

inline void DecryptedMessageAction::setClassType(DecryptedMessageAction::DecryptedMessageActionClassType classType) {
    m_classType = classType;
}

inline DecryptedMessageAction::DecryptedMessageActionClassType DecryptedMessageAction::classType() const {
    return m_classType;
}

inline bool DecryptedMessageAction::fetch(InboundPkt *in) {
    LQTG_FETCH_LOG;
    int x = in->fetchInt();
    switch(x) {
    case typeDecryptedMessageActionSetMessageTTLSecret8: {
        m_ttlSeconds = in->fetchInt();
        m_classType = static_cast<DecryptedMessageActionClassType>(x);
        return true;
    }
        break;
    
    case typeDecryptedMessageActionReadMessagesSecret8: {
        if(in->fetchInt() != (qint32)CoreTypes::typeVector) return false;
        qint32 m_randomIds_length = in->fetchInt();
        m_randomIds.clear();
        for (qint32 i = 0; i < m_randomIds_length; i++) {
            qint64 type;
            type = in->fetchLong();
            m_randomIds.append(type);
        }
        m_classType = static_cast<DecryptedMessageActionClassType>(x);
        return true;
    }
        break;
    
    case typeDecryptedMessageActionDeleteMessagesSecret8: {
        if(in->fetchInt() != (qint32)CoreTypes::typeVector) return false;
        qint32 m_randomIds_length = in->fetchInt();
        m_randomIds.clear();
        for (qint32 i = 0; i < m_randomIds_length; i++) {
            qint64 type;
            type = in->fetchLong();
            m_randomIds.append(type);
        }
        m_classType = static_cast<DecryptedMessageActionClassType>(x);
        return true;
    }
        break;
    
    case typeDecryptedMessageActionScreenshotMessagesSecret8: {
        if(in->fetchInt() != (qint32)CoreTypes::typeVector) return false;
        qint32 m_randomIds_length = in->fetchInt();
        m_randomIds.clear();
        for (qint32 i = 0; i < m_randomIds_length; i++) {
            qint64 type;
            type = in->fetchLong();
            m_randomIds.append(type);
        }
        m_classType = static_cast<DecryptedMessageActionClassType>(x);
        return true;
    }
        break;
    
    case typeDecryptedMessageActionFlushHistorySecret8: {
        m_classType = static_cast<DecryptedMessageActionClassType>(x);
        return true;
    }
        break;
    
    case typeDecryptedMessageActionResendSecret17: {
        m_startSeqNo = in->fetchInt();
        m_endSeqNo = in->fetchInt();
        m_classType = static_cast<DecryptedMessageActionClassType>(x);
        return true;
    }
        break;
    
    case typeDecryptedMessageActionNotifyLayerSecret17: {
        m_layer = in->fetchInt();
        m_classType = static_cast<DecryptedMessageActionClassType>(x);
        return true;
    }
        break;
    
    case typeDecryptedMessageActionTypingSecret17: {
        m_action.fetch(in);
        m_classType = static_cast<DecryptedMessageActionClassType>(x);
        return true;
    }
        break;
    
    case typeDecryptedMessageActionRequestKeySecret20: {
        m_exchangeId = in->fetchLong();
        m_gA = in->fetchBytes();
        m_classType = static_cast<DecryptedMessageActionClassType>(x);
        return true;
    }
        break;
    
    case typeDecryptedMessageActionAcceptKeySecret20: {
        m_exchangeId = in->fetchLong();
        m_gB = in->fetchBytes();
        m_keyFingerprint = in->fetchLong();
        m_classType = static_cast<DecryptedMessageActionClassType>(x);
        return true;
    }
        break;
    
    case typeDecryptedMessageActionAbortKeySecret20: {
        m_exchangeId = in->fetchLong();
        m_classType = static_cast<DecryptedMessageActionClassType>(x);
        return true;
    }
        break;
    
    case typeDecryptedMessageActionCommitKeySecret20: {
        m_exchangeId = in->fetchLong();
        m_keyFingerprint = in->fetchLong();
        m_classType = static_cast<DecryptedMessageActionClassType>(x);
        return true;
    }
        break;
    
    case typeDecryptedMessageActionNoopSecret20: {
        m_classType = static_cast<DecryptedMessageActionClassType>(x);
        return true;
    }
        break;
    
    default:
        LQTG_FETCH_ASSERT;
        return false;
    }
}

inline bool DecryptedMessageAction::push(OutboundPkt *out) const {
    out->appendInt(m_classType);
    switch(m_classType) {
    case typeDecryptedMessageActionSetMessageTTLSecret8: {
        out->appendInt(m_ttlSeconds);
        return true;
    }
        break;
    
    case typeDecryptedMessageActionReadMessagesSecret8: {
        out->appendInt(CoreTypes::typeVector);
        out->appendInt(m_randomIds.count());
        for (qint32 i = 0; i < m_randomIds.count(); i++) {
            out->appendLong(m_randomIds[i]);
        }
        return true;
    }
        break;
    
    case typeDecryptedMessageActionDeleteMessagesSecret8: {
        out->appendInt(CoreTypes::typeVector);
        out->appendInt(m_randomIds.count());
        for (qint32 i = 0; i < m_randomIds.count(); i++) {
            out->appendLong(m_randomIds[i]);
        }
        return true;
    }
        break;
    
    case typeDecryptedMessageActionScreenshotMessagesSecret8: {
        out->appendInt(CoreTypes::typeVector);
        out->appendInt(m_randomIds.count());
        for (qint32 i = 0; i < m_randomIds.count(); i++) {
            out->appendLong(m_randomIds[i]);
        }
        return true;
    }
        break;
    
    case typeDecryptedMessageActionFlushHistorySecret8: {
        return true;
    }
        break;
    
    case typeDecryptedMessageActionResendSecret17: {
        out->appendInt(m_startSeqNo);
        out->appendInt(m_endSeqNo);
        return true;
    }
        break;
    
    case typeDecryptedMessageActionNotifyLayerSecret17: {
        out->appendInt(m_layer);
        return true;
    }
        break;
    
    case typeDecryptedMessageActionTypingSecret17: {
        m_action.push(out);
        return true;
    }
        break;
    
    case typeDecryptedMessageActionRequestKeySecret20: {
        out->appendLong(m_exchangeId);
        out->appendBytes(m_gA);
        return true;
    }
        break;
    
    case typeDecryptedMessageActionAcceptKeySecret20: {
        out->appendLong(m_exchangeId);
        out->appendBytes(m_gB);
        out->appendLong(m_keyFingerprint);
        return true;
    }
        break;
    
    case typeDecryptedMessageActionAbortKeySecret20: {
        out->appendLong(m_exchangeId);
        return true;
    }
        break;
    
    case typeDecryptedMessageActionCommitKeySecret20: {
        out->appendLong(m_exchangeId);
        out->appendLong(m_keyFingerprint);
        return true;
    }
        break;
    
    case typeDecryptedMessageActionNoopSecret20: {
        return true;
    }
        break;
    
    default:
        return false;
    }
}

inline QMap<QString, QVariant> DecryptedMessageAction::toMap() const {
    QMap<QString, QVariant> result;
    switch(static_cast<int>(m_classType)) {
    case typeDecryptedMessageActionSetMessageTTLSecret8: {
        result["classType"] = "DecryptedMessageAction::typeDecryptedMessageActionSetMessageTTLSecret8";
        result["ttlSeconds"] = QVariant::fromValue<qint32>(ttlSeconds());
        return result;
    }
        break;
    
    case typeDecryptedMessageActionReadMessagesSecret8: {
        result["classType"] = "DecryptedMessageAction::typeDecryptedMessageActionReadMessagesSecret8";
        QList<QVariant> _randomIds;
        Q_FOREACH(const qint64 &m__type, m_randomIds)
            _randomIds << QVariant::fromValue<qint64>(m__type);
        result["randomIds"] = _randomIds;
        return result;
    }
        break;
    
    case typeDecryptedMessageActionDeleteMessagesSecret8: {
        result["classType"] = "DecryptedMessageAction::typeDecryptedMessageActionDeleteMessagesSecret8";
        QList<QVariant> _randomIds;
        Q_FOREACH(const qint64 &m__type, m_randomIds)
            _randomIds << QVariant::fromValue<qint64>(m__type);
        result["randomIds"] = _randomIds;
        return result;
    }
        break;
    
    case typeDecryptedMessageActionScreenshotMessagesSecret8: {
        result["classType"] = "DecryptedMessageAction::typeDecryptedMessageActionScreenshotMessagesSecret8";
        QList<QVariant> _randomIds;
        Q_FOREACH(const qint64 &m__type, m_randomIds)
            _randomIds << QVariant::fromValue<qint64>(m__type);
        result["randomIds"] = _randomIds;
        return result;
    }
        break;
    
    case typeDecryptedMessageActionFlushHistorySecret8: {
        result["classType"] = "DecryptedMessageAction::typeDecryptedMessageActionFlushHistorySecret8";
        return result;
    }
        break;
    
    case typeDecryptedMessageActionResendSecret17: {
        result["classType"] = "DecryptedMessageAction::typeDecryptedMessageActionResendSecret17";
        result["startSeqNo"] = QVariant::fromValue<qint32>(startSeqNo());
        result["endSeqNo"] = QVariant::fromValue<qint32>(endSeqNo());
        return result;
    }
        break;
    
    case typeDecryptedMessageActionNotifyLayerSecret17: {
        result["classType"] = "DecryptedMessageAction::typeDecryptedMessageActionNotifyLayerSecret17";
        result["layer"] = QVariant::fromValue<qint32>(layer());
        return result;
    }
        break;
    
    case typeDecryptedMessageActionTypingSecret17: {
        result["classType"] = "DecryptedMessageAction::typeDecryptedMessageActionTypingSecret17";
        result["action"] = m_action.toMap();
        return result;
    }
        break;
    
    case typeDecryptedMessageActionRequestKeySecret20: {
        result["classType"] = "DecryptedMessageAction::typeDecryptedMessageActionRequestKeySecret20";
        result["exchangeId"] = QVariant::fromValue<qint64>(exchangeId());
        result["gA"] = QVariant::fromValue<QByteArray>(gA());
        return result;
    }
        break;
    
    case typeDecryptedMessageActionAcceptKeySecret20: {
        result["classType"] = "DecryptedMessageAction::typeDecryptedMessageActionAcceptKeySecret20";
        result["exchangeId"] = QVariant::fromValue<qint64>(exchangeId());
        result["gB"] = QVariant::fromValue<QByteArray>(gB());
        result["keyFingerprint"] = QVariant::fromValue<qint64>(keyFingerprint());
        return result;
    }
        break;
    
    case typeDecryptedMessageActionAbortKeySecret20: {
        result["classType"] = "DecryptedMessageAction::typeDecryptedMessageActionAbortKeySecret20";
        result["exchangeId"] = QVariant::fromValue<qint64>(exchangeId());
        return result;
    }
        break;
    
    case typeDecryptedMessageActionCommitKeySecret20: {
        result["classType"] = "DecryptedMessageAction::typeDecryptedMessageActionCommitKeySecret20";
        result["exchangeId"] = QVariant::fromValue<qint64>(exchangeId());
        result["keyFingerprint"] = QVariant::fromValue<qint64>(keyFingerprint());
        return result;
    }
        break;
    
    case typeDecryptedMessageActionNoopSecret20: {
        result["classType"] = "DecryptedMessageAction::typeDecryptedMessageActionNoopSecret20";
        return result;
    }
        break;
    
    default:
        return result;
    }
}

inline DecryptedMessageAction DecryptedMessageAction::fromMap(const QMap<QString, QVariant> &map) {
    DecryptedMessageAction result;
    if(map.value("classType").toString() == "DecryptedMessageAction::typeDecryptedMessageActionSetMessageTTLSecret8") {
        result.setClassType(typeDecryptedMessageActionSetMessageTTLSecret8);
        result.setTtlSeconds( map.value("ttlSeconds").value<qint32>() );
        return result;
    }
    if(map.value("classType").toString() == "DecryptedMessageAction::typeDecryptedMessageActionReadMessagesSecret8") {
        result.setClassType(typeDecryptedMessageActionReadMessagesSecret8);
        QList<QVariant> map_randomIds = map["randomIds"].toList();
        QList<qint64> _randomIds;
        Q_FOREACH(const QVariant &var, map_randomIds)
            _randomIds << var.value<qint64>();;
        result.setRandomIds(_randomIds);
        return result;
    }
    if(map.value("classType").toString() == "DecryptedMessageAction::typeDecryptedMessageActionDeleteMessagesSecret8") {
        result.setClassType(typeDecryptedMessageActionDeleteMessagesSecret8);
        QList<QVariant> map_randomIds = map["randomIds"].toList();
        QList<qint64> _randomIds;
        Q_FOREACH(const QVariant &var, map_randomIds)
            _randomIds << var.value<qint64>();;
        result.setRandomIds(_randomIds);
        return result;
    }
    if(map.value("classType").toString() == "DecryptedMessageAction::typeDecryptedMessageActionScreenshotMessagesSecret8") {
        result.setClassType(typeDecryptedMessageActionScreenshotMessagesSecret8);
        QList<QVariant> map_randomIds = map["randomIds"].toList();
        QList<qint64> _randomIds;
        Q_FOREACH(const QVariant &var, map_randomIds)
            _randomIds << var.value<qint64>();;
        result.setRandomIds(_randomIds);
        return result;
    }
    if(map.value("classType").toString() == "DecryptedMessageAction::typeDecryptedMessageActionFlushHistorySecret8") {
        result.setClassType(typeDecryptedMessageActionFlushHistorySecret8);
        return result;
    }
    if(map.value("classType").toString() == "DecryptedMessageAction::typeDecryptedMessageActionResendSecret17") {
        result.setClassType(typeDecryptedMessageActionResendSecret17);
        result.setStartSeqNo( map.value("startSeqNo").value<qint32>() );
        result.setEndSeqNo( map.value("endSeqNo").value<qint32>() );
        return result;
    }
    if(map.value("classType").toString() == "DecryptedMessageAction::typeDecryptedMessageActionNotifyLayerSecret17") {
        result.setClassType(typeDecryptedMessageActionNotifyLayerSecret17);
        result.setLayer( map.value("layer").value<qint32>() );
        return result;
    }
    if(map.value("classType").toString() == "DecryptedMessageAction::typeDecryptedMessageActionTypingSecret17") {
        result.setClassType(typeDecryptedMessageActionTypingSecret17);
        result.setAction( SendMessageAction::fromMap(map.value("action").toMap()) );
        return result;
    }
    if(map.value("classType").toString() == "DecryptedMessageAction::typeDecryptedMessageActionRequestKeySecret20") {
        result.setClassType(typeDecryptedMessageActionRequestKeySecret20);
        result.setExchangeId( map.value("exchangeId").value<qint64>() );
        result.setGA( map.value("gA").value<QByteArray>() );
        return result;
    }
    if(map.value("classType").toString() == "DecryptedMessageAction::typeDecryptedMessageActionAcceptKeySecret20") {
        result.setClassType(typeDecryptedMessageActionAcceptKeySecret20);
        result.setExchangeId( map.value("exchangeId").value<qint64>() );
        result.setGB( map.value("gB").value<QByteArray>() );
        result.setKeyFingerprint( map.value("keyFingerprint").value<qint64>() );
        return result;
    }
    if(map.value("classType").toString() == "DecryptedMessageAction::typeDecryptedMessageActionAbortKeySecret20") {
        result.setClassType(typeDecryptedMessageActionAbortKeySecret20);
        result.setExchangeId( map.value("exchangeId").value<qint64>() );
        return result;
    }
    if(map.value("classType").toString() == "DecryptedMessageAction::typeDecryptedMessageActionCommitKeySecret20") {
        result.setClassType(typeDecryptedMessageActionCommitKeySecret20);
        result.setExchangeId( map.value("exchangeId").value<qint64>() );
        result.setKeyFingerprint( map.value("keyFingerprint").value<qint64>() );
        return result;
    }
    if(map.value("classType").toString() == "DecryptedMessageAction::typeDecryptedMessageActionNoopSecret20") {
        result.setClassType(typeDecryptedMessageActionNoopSecret20);
        return result;
    }
    return result;
}

inline QByteArray DecryptedMessageAction::getHash(QCryptographicHash::Algorithm alg) const {
    QByteArray data;
    QDataStream str(&data, QIODevice::WriteOnly);
    str << *this;
    return QCryptographicHash::hash(data, alg);
}

inline QDataStream &operator<<(QDataStream &stream, const DecryptedMessageAction &item) {
    stream << static_cast<uint>(item.classType());
    switch(item.classType()) {
    case DecryptedMessageAction::typeDecryptedMessageActionSetMessageTTLSecret8:
        stream << item.ttlSeconds();
        break;
    case DecryptedMessageAction::typeDecryptedMessageActionReadMessagesSecret8:
        stream << item.randomIds();
        break;
    case DecryptedMessageAction::typeDecryptedMessageActionDeleteMessagesSecret8:
        stream << item.randomIds();
        break;
    case DecryptedMessageAction::typeDecryptedMessageActionScreenshotMessagesSecret8:
        stream << item.randomIds();
        break;
    case DecryptedMessageAction::typeDecryptedMessageActionFlushHistorySecret8:
        
        break;
    case DecryptedMessageAction::typeDecryptedMessageActionResendSecret17:
        stream << item.startSeqNo();
        stream << item.endSeqNo();
        break;
    case DecryptedMessageAction::typeDecryptedMessageActionNotifyLayerSecret17:
        stream << item.layer();
        break;
    case DecryptedMessageAction::typeDecryptedMessageActionTypingSecret17:
        stream << item.action();
        break;
    case DecryptedMessageAction::typeDecryptedMessageActionRequestKeySecret20:
        stream << item.exchangeId();
        stream << item.gA();
        break;
    case DecryptedMessageAction::typeDecryptedMessageActionAcceptKeySecret20:
        stream << item.exchangeId();
        stream << item.gB();
        stream << item.keyFingerprint();
        break;
    case DecryptedMessageAction::typeDecryptedMessageActionAbortKeySecret20:
        stream << item.exchangeId();
        break;
    case DecryptedMessageAction::typeDecryptedMessageActionCommitKeySecret20:
        stream << item.exchangeId();
        stream << item.keyFingerprint();
        break;
    case DecryptedMessageAction::typeDecryptedMessageActionNoopSecret20:
        
        break;
    }
    return stream;
}

inline QDataStream &operator>>(QDataStream &stream, DecryptedMessageAction &item) {
    uint type = 0;
    stream >> type;
    item.setClassType(static_cast<DecryptedMessageAction::DecryptedMessageActionClassType>(type));
    switch(type) {
    case DecryptedMessageAction::typeDecryptedMessageActionSetMessageTTLSecret8: {
        qint32 m_ttl_seconds;
        stream >> m_ttl_seconds;
        item.setTtlSeconds(m_ttl_seconds);
    }
        break;
    case DecryptedMessageAction::typeDecryptedMessageActionReadMessagesSecret8: {
        QList<qint64> m_random_ids;
        stream >> m_random_ids;
        item.setRandomIds(m_random_ids);
    }
        break;
    case DecryptedMessageAction::typeDecryptedMessageActionDeleteMessagesSecret8: {
        QList<qint64> m_random_ids;
        stream >> m_random_ids;
        item.setRandomIds(m_random_ids);
    }
        break;
    case DecryptedMessageAction::typeDecryptedMessageActionScreenshotMessagesSecret8: {
        QList<qint64> m_random_ids;
        stream >> m_random_ids;
        item.setRandomIds(m_random_ids);
    }
        break;
    case DecryptedMessageAction::typeDecryptedMessageActionFlushHistorySecret8: {
        
    }
        break;
    case DecryptedMessageAction::typeDecryptedMessageActionResendSecret17: {
        qint32 m_start_seq_no;
        stream >> m_start_seq_no;
        item.setStartSeqNo(m_start_seq_no);
        qint32 m_end_seq_no;
        stream >> m_end_seq_no;
        item.setEndSeqNo(m_end_seq_no);
    }
        break;
    case DecryptedMessageAction::typeDecryptedMessageActionNotifyLayerSecret17: {
        qint32 m_layer;
        stream >> m_layer;
        item.setLayer(m_layer);
    }
        break;
    case DecryptedMessageAction::typeDecryptedMessageActionTypingSecret17: {
        SendMessageAction m_action;
        stream >> m_action;
        item.setAction(m_action);
    }
        break;
    case DecryptedMessageAction::typeDecryptedMessageActionRequestKeySecret20: {
        qint64 m_exchange_id;
        stream >> m_exchange_id;
        item.setExchangeId(m_exchange_id);
        QByteArray m_g_a;
        stream >> m_g_a;
        item.setGA(m_g_a);
    }
        break;
    case DecryptedMessageAction::typeDecryptedMessageActionAcceptKeySecret20: {
        qint64 m_exchange_id;
        stream >> m_exchange_id;
        item.setExchangeId(m_exchange_id);
        QByteArray m_g_b;
        stream >> m_g_b;
        item.setGB(m_g_b);
        qint64 m_key_fingerprint;
        stream >> m_key_fingerprint;
        item.setKeyFingerprint(m_key_fingerprint);
    }
        break;
    case DecryptedMessageAction::typeDecryptedMessageActionAbortKeySecret20: {
        qint64 m_exchange_id;
        stream >> m_exchange_id;
        item.setExchangeId(m_exchange_id);
    }
        break;
    case DecryptedMessageAction::typeDecryptedMessageActionCommitKeySecret20: {
        qint64 m_exchange_id;
        stream >> m_exchange_id;
        item.setExchangeId(m_exchange_id);
        qint64 m_key_fingerprint;
        stream >> m_key_fingerprint;
        item.setKeyFingerprint(m_key_fingerprint);
    }
        break;
    case DecryptedMessageAction::typeDecryptedMessageActionNoopSecret20: {
        
    }
        break;
    }
    return stream;
}


#endif // LQTG_TYPE_DECRYPTEDMESSAGEACTION
