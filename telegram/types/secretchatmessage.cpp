// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "secretchatmessage.h"
#include "core/inboundpkt.h"
#include "core/outboundpkt.h"
#include "../coretypes.h"

#include <QDataStream>

SecretChatMessage::SecretChatMessage(SecretChatMessageClassType classType, InboundPkt *in) :
    m_chatId(0),
    m_date(0),
    m_ttl(0),
    m_classType(classType)
{
    if(in) fetch(in);
}

SecretChatMessage::SecretChatMessage(InboundPkt *in) :
    m_chatId(0),
    m_date(0),
    m_ttl(0),
    m_classType(typeSecretChatMessage)
{
    fetch(in);
}

SecretChatMessage::SecretChatMessage(const SecretChatMessage &another) :
    TelegramTypeObject(),
    m_chatId(0),
    m_date(0),
    m_ttl(0),
    m_classType(typeSecretChatMessage)
{
    operator=(another);
}

SecretChatMessage::SecretChatMessage(const Null &null) :
    TelegramTypeObject(null),
    m_chatId(0),
    m_date(0),
    m_ttl(0),
    m_classType(typeSecretChatMessage)
{
}

SecretChatMessage::~SecretChatMessage() {
    
}

void SecretChatMessage::setAttachment(const EncryptedFile &attachment) {
    m_attachment = attachment;
}

EncryptedFile SecretChatMessage::attachment() const {
    return m_attachment;
}

void SecretChatMessage::setChatId(qint32 chatId) {
    m_chatId = chatId;
}

qint32 SecretChatMessage::chatId() const {
    return m_chatId;
}

void SecretChatMessage::setDate(qint32 date) {
    m_date = date;
}

qint32 SecretChatMessage::date() const {
    return m_date;
}

void SecretChatMessage::setDecryptedMessage(const DecryptedMessage &decryptedMessage) {
    m_decryptedMessage = decryptedMessage;
}

DecryptedMessage SecretChatMessage::decryptedMessage() const {
    return m_decryptedMessage;
}

void SecretChatMessage::setTtl(qint32 ttl) {
    m_ttl = ttl;
}

qint32 SecretChatMessage::ttl() const {
    return m_ttl;
}

bool SecretChatMessage::operator ==(const SecretChatMessage &b) const {
    return m_classType == b.m_classType &&
           m_attachment == b.m_attachment &&
           m_chatId == b.m_chatId &&
           m_date == b.m_date &&
           m_decryptedMessage == b.m_decryptedMessage &&
           m_ttl == b.m_ttl;
}

SecretChatMessage &SecretChatMessage::operator =(const SecretChatMessage &b) {
    m_classType = b.m_classType;
    m_attachment = b.m_attachment;
    m_chatId = b.m_chatId;
    m_date = b.m_date;
    m_decryptedMessage = b.m_decryptedMessage;
    m_ttl = b.m_ttl;
    setNull(b.isNull());
    return *this;
}

void SecretChatMessage::setClassType(SecretChatMessage::SecretChatMessageClassType classType) {
    m_classType = classType;
}

SecretChatMessage::SecretChatMessageClassType SecretChatMessage::classType() const {
    return m_classType;
}

bool SecretChatMessage::fetch(InboundPkt *in) {
    LQTG_FETCH_LOG;
    int x = in->fetchInt();
    switch(x) {
    case typeSecretChatMessage: {
        m_chatId = in->fetchInt();
        m_ttl = in->fetchInt();
        m_date = in->fetchInt();
        m_decryptedMessage.fetch(in);
        m_attachment.fetch(in);
        m_classType = static_cast<SecretChatMessageClassType>(x);
        return true;
    }
        break;
    
    default:
        LQTG_FETCH_ASSERT;
        return false;
    }
}

bool SecretChatMessage::push(OutboundPkt *out) const {
    out->appendInt(m_classType);
    switch(m_classType) {
    case typeSecretChatMessage: {
        out->appendInt(m_chatId);
        out->appendInt(m_ttl);
        out->appendInt(m_date);
        m_decryptedMessage.push(out);
        m_attachment.push(out);
        return true;
    }
        break;
    
    default:
        return false;
    }
}

QMap<QString, QVariant> SecretChatMessage::toMap() const {
    QMap<QString, QVariant> result;
    switch(static_cast<int>(m_classType)) {
    case typeSecretChatMessage: {
        result["classType"] = "SecretChatMessage::typeSecretChatMessage";
        result["chatId"] = QVariant::fromValue<qint32>(chatId());
        result["ttl"] = QVariant::fromValue<qint32>(ttl());
        result["date"] = QVariant::fromValue<qint32>(date());
        result["decryptedMessage"] = m_decryptedMessage.toMap();
        result["attachment"] = m_attachment.toMap();
        return result;
    }
        break;
    
    default:
        return result;
    }
}

SecretChatMessage SecretChatMessage::fromMap(const QMap<QString, QVariant> &map) {
    SecretChatMessage result;
    if(map.value("classType").toString() == "SecretChatMessage::typeSecretChatMessage") {
        result.setClassType(typeSecretChatMessage);
        result.setChatId( map.value("chatId").value<qint32>() );
        result.setTtl( map.value("ttl").value<qint32>() );
        result.setDate( map.value("date").value<qint32>() );
        result.setDecryptedMessage( DecryptedMessage::fromMap(map.value("decryptedMessage").toMap()) );
        result.setAttachment( EncryptedFile::fromMap(map.value("attachment").toMap()) );
        return result;
    }
    return result;
}

QByteArray SecretChatMessage::getHash(QCryptographicHash::Algorithm alg) const {
    QByteArray data;
    QDataStream str(&data, QIODevice::WriteOnly);
    str << *this;
    return QCryptographicHash::hash(data, alg);
}

QDataStream &operator<<(QDataStream &stream, const SecretChatMessage &item) {
    stream << static_cast<uint>(item.classType());
    switch(item.classType()) {
    case SecretChatMessage::typeSecretChatMessage:
        stream << item.chatId();
        stream << item.ttl();
        stream << item.date();
        stream << item.decryptedMessage();
        stream << item.attachment();
        break;
    }
    return stream;
}

QDataStream &operator>>(QDataStream &stream, SecretChatMessage &item) {
    uint type = 0;
    stream >> type;
    item.setClassType(static_cast<SecretChatMessage::SecretChatMessageClassType>(type));
    switch(type) {
    case SecretChatMessage::typeSecretChatMessage: {
        qint32 m_chat_id;
        stream >> m_chat_id;
        item.setChatId(m_chat_id);
        qint32 m_ttl;
        stream >> m_ttl;
        item.setTtl(m_ttl);
        qint32 m_date;
        stream >> m_date;
        item.setDate(m_date);
        DecryptedMessage m_decryptedMessage;
        stream >> m_decryptedMessage;
        item.setDecryptedMessage(m_decryptedMessage);
        EncryptedFile m_attachment;
        stream >> m_attachment;
        item.setAttachment(m_attachment);
    }
        break;
    }
    return stream;
}

QDebug operator<<(QDebug debug,  const SecretChatMessage &item) {
    QDebugStateSaver saver(debug);
    Q_UNUSED(saver)
    debug.nospace() << "Telegram.SecretChatMessage(";
    switch(item.classType()) {
    case SecretChatMessage::typeSecretChatMessage:
        debug.nospace() << "classType: typeSecretChatMessage";
        debug.nospace() << ", chatId: " << item.chatId();
        debug.nospace() << ", ttl: " << item.ttl();
        debug.nospace() << ", date: " << item.date();
        debug.nospace() << ", decryptedMessage: " << item.decryptedMessage();
        debug.nospace() << ", attachment: " << item.attachment();
        break;
    }
    debug.nospace() << ")";
    return debug;
}

