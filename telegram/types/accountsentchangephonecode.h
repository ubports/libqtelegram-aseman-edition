// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#ifndef LQTG_TYPE_ACCOUNTSENTCHANGEPHONECODE
#define LQTG_TYPE_ACCOUNTSENTCHANGEPHONECODE

#include "telegramtypeobject.h"

#include <QMetaType>
#include <QVariant>
#include "core/inboundpkt.h"
#include "core/outboundpkt.h"
#include "../coretypes.h"

#include <QDataStream>

#include <QString>
#include <QtGlobal>

class LIBQTELEGRAMSHARED_EXPORT AccountSentChangePhoneCode : public TelegramTypeObject
{
public:
    enum AccountSentChangePhoneCodeClassType {
        typeAccountSentChangePhoneCode = 0xa4f58c4c
    };

    AccountSentChangePhoneCode(AccountSentChangePhoneCodeClassType classType = typeAccountSentChangePhoneCode, InboundPkt *in = 0);
    AccountSentChangePhoneCode(InboundPkt *in);
    AccountSentChangePhoneCode(const Null&);
    virtual ~AccountSentChangePhoneCode();

    void setPhoneCodeHash(const QString &phoneCodeHash);
    QString phoneCodeHash() const;

    void setSendCallTimeout(qint32 sendCallTimeout);
    qint32 sendCallTimeout() const;

    void setClassType(AccountSentChangePhoneCodeClassType classType);
    AccountSentChangePhoneCodeClassType classType() const;

    bool fetch(InboundPkt *in);
    bool push(OutboundPkt *out) const;

    QMap<QString, QVariant> toMap() const;
    static AccountSentChangePhoneCode fromMap(const QMap<QString, QVariant> &map);

    bool operator ==(const AccountSentChangePhoneCode &b) const;

    bool operator==(bool stt) const { return isNull() != stt; }
    bool operator!=(bool stt) const { return !operator ==(stt); }

    QByteArray getHash(QCryptographicHash::Algorithm alg = QCryptographicHash::Md5) const;

private:
    QString m_phoneCodeHash;
    qint32 m_sendCallTimeout;
    AccountSentChangePhoneCodeClassType m_classType;
};

Q_DECLARE_METATYPE(AccountSentChangePhoneCode)

QDataStream LIBQTELEGRAMSHARED_EXPORT &operator<<(QDataStream &stream, const AccountSentChangePhoneCode &item);
QDataStream LIBQTELEGRAMSHARED_EXPORT &operator>>(QDataStream &stream, AccountSentChangePhoneCode &item);

inline AccountSentChangePhoneCode::AccountSentChangePhoneCode(AccountSentChangePhoneCodeClassType classType, InboundPkt *in) :
    m_sendCallTimeout(0),
    m_classType(classType)
{
    if(in) fetch(in);
}

inline AccountSentChangePhoneCode::AccountSentChangePhoneCode(InboundPkt *in) :
    m_sendCallTimeout(0),
    m_classType(typeAccountSentChangePhoneCode)
{
    fetch(in);
}

inline AccountSentChangePhoneCode::AccountSentChangePhoneCode(const Null &null) :
    TelegramTypeObject(null),
    m_sendCallTimeout(0),
    m_classType(typeAccountSentChangePhoneCode)
{
}

inline AccountSentChangePhoneCode::~AccountSentChangePhoneCode() {
}

inline void AccountSentChangePhoneCode::setPhoneCodeHash(const QString &phoneCodeHash) {
    m_phoneCodeHash = phoneCodeHash;
}

inline QString AccountSentChangePhoneCode::phoneCodeHash() const {
    return m_phoneCodeHash;
}

inline void AccountSentChangePhoneCode::setSendCallTimeout(qint32 sendCallTimeout) {
    m_sendCallTimeout = sendCallTimeout;
}

inline qint32 AccountSentChangePhoneCode::sendCallTimeout() const {
    return m_sendCallTimeout;
}

inline bool AccountSentChangePhoneCode::operator ==(const AccountSentChangePhoneCode &b) const {
    return m_classType == b.m_classType &&
           m_phoneCodeHash == b.m_phoneCodeHash &&
           m_sendCallTimeout == b.m_sendCallTimeout;
}

inline void AccountSentChangePhoneCode::setClassType(AccountSentChangePhoneCode::AccountSentChangePhoneCodeClassType classType) {
    m_classType = classType;
}

inline AccountSentChangePhoneCode::AccountSentChangePhoneCodeClassType AccountSentChangePhoneCode::classType() const {
    return m_classType;
}

inline bool AccountSentChangePhoneCode::fetch(InboundPkt *in) {
    LQTG_FETCH_LOG;
    int x = in->fetchInt();
    switch(x) {
    case typeAccountSentChangePhoneCode: {
        m_phoneCodeHash = in->fetchQString();
        m_sendCallTimeout = in->fetchInt();
        m_classType = static_cast<AccountSentChangePhoneCodeClassType>(x);
        return true;
    }
        break;
    
    default:
        LQTG_FETCH_ASSERT;
        return false;
    }
}

inline bool AccountSentChangePhoneCode::push(OutboundPkt *out) const {
    out->appendInt(m_classType);
    switch(m_classType) {
    case typeAccountSentChangePhoneCode: {
        out->appendQString(m_phoneCodeHash);
        out->appendInt(m_sendCallTimeout);
        return true;
    }
        break;
    
    default:
        return false;
    }
}

inline QMap<QString, QVariant> AccountSentChangePhoneCode::toMap() const {
    QMap<QString, QVariant> result;
    switch(static_cast<int>(m_classType)) {
    case typeAccountSentChangePhoneCode: {
        result["classType"] = "AccountSentChangePhoneCode::typeAccountSentChangePhoneCode";
        result["phoneCodeHash"] = QVariant::fromValue<QString>(phoneCodeHash());
        result["sendCallTimeout"] = QVariant::fromValue<qint32>(sendCallTimeout());
        return result;
    }
        break;
    
    default:
        return result;
    }
}

inline AccountSentChangePhoneCode AccountSentChangePhoneCode::fromMap(const QMap<QString, QVariant> &map) {
    AccountSentChangePhoneCode result;
    if(map.value("classType").toString() == "AccountSentChangePhoneCode::typeAccountSentChangePhoneCode") {
        result.setClassType(typeAccountSentChangePhoneCode);
        result.setPhoneCodeHash( map.value("phoneCodeHash").value<QString>() );
        result.setSendCallTimeout( map.value("sendCallTimeout").value<qint32>() );
        return result;
    }
    return result;
}

inline QByteArray AccountSentChangePhoneCode::getHash(QCryptographicHash::Algorithm alg) const {
    QByteArray data;
    QDataStream str(&data, QIODevice::WriteOnly);
    str << *this;
    return QCryptographicHash::hash(data, alg);
}

inline QDataStream &operator<<(QDataStream &stream, const AccountSentChangePhoneCode &item) {
    stream << static_cast<uint>(item.classType());
    switch(item.classType()) {
    case AccountSentChangePhoneCode::typeAccountSentChangePhoneCode:
        stream << item.phoneCodeHash();
        stream << item.sendCallTimeout();
        break;
    }
    return stream;
}

inline QDataStream &operator>>(QDataStream &stream, AccountSentChangePhoneCode &item) {
    uint type = 0;
    stream >> type;
    item.setClassType(static_cast<AccountSentChangePhoneCode::AccountSentChangePhoneCodeClassType>(type));
    switch(type) {
    case AccountSentChangePhoneCode::typeAccountSentChangePhoneCode: {
        QString m_phone_code_hash;
        stream >> m_phone_code_hash;
        item.setPhoneCodeHash(m_phone_code_hash);
        qint32 m_send_call_timeout;
        stream >> m_send_call_timeout;
        item.setSendCallTimeout(m_send_call_timeout);
    }
        break;
    }
    return stream;
}


#endif // LQTG_TYPE_ACCOUNTSENTCHANGEPHONECODE
