// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#ifndef LQTG_TYPE_DECRYPTEDMESSAGEMEDIA
#define LQTG_TYPE_DECRYPTEDMESSAGEMEDIA

#include "telegramtypeobject.h"

#include <QMetaType>
#include <QVariant>
#include "core/inboundpkt.h"
#include "core/outboundpkt.h"
#include "../coretypes.h"

#include <QDataStream>

#include <QtGlobal>
#include <QList>
#include "documentattribute.h"
#include <QString>
#include <QByteArray>
#include "photosize.h"

class LIBQTELEGRAMSHARED_EXPORT DecryptedMessageMedia : public TelegramTypeObject
{
public:
    enum DecryptedMessageMediaClassType {
        typeDecryptedMessageMediaEmptySecret8 = 0x89f5c4a,
        typeDecryptedMessageMediaPhotoSecret8 = 0x32798a8c,
        typeDecryptedMessageMediaVideoSecret8 = 0x4cee6ef3,
        typeDecryptedMessageMediaGeoPointSecret8 = 0x35480a59,
        typeDecryptedMessageMediaContactSecret8 = 0x588a0a97,
        typeDecryptedMessageMediaDocumentSecret8 = 0xb095434b,
        typeDecryptedMessageMediaAudioSecret8 = 0x6080758f,
        typeDecryptedMessageMediaVideoSecret17 = 0x524a415d,
        typeDecryptedMessageMediaAudioSecret17 = 0x57e0a9cb,
        typeDecryptedMessageMediaExternalDocumentSecret23 = 0xfa95b0dd
    };

    DecryptedMessageMedia(DecryptedMessageMediaClassType classType = typeDecryptedMessageMediaEmptySecret8, InboundPkt *in = 0);
    DecryptedMessageMedia(InboundPkt *in);
    DecryptedMessageMedia(const Null&);
    virtual ~DecryptedMessageMedia();

    void setAccessHash(qint64 accessHash);
    qint64 accessHash() const;

    void setAttributes(const QList<DocumentAttribute> &attributes);
    QList<DocumentAttribute> attributes() const;

    void setDate(qint32 date);
    qint32 date() const;

    void setDcId(qint32 dcId);
    qint32 dcId() const;

    void setDuration(qint32 duration);
    qint32 duration() const;

    void setFileName(const QString &fileName);
    QString fileName() const;

    void setFirstName(const QString &firstName);
    QString firstName() const;

    void setH(qint32 h);
    qint32 h() const;

    void setId(qint64 id);
    qint64 id() const;

    void setIv(const QByteArray &iv);
    QByteArray iv() const;

    void setKey(const QByteArray &key);
    QByteArray key() const;

    void setLastName(const QString &lastName);
    QString lastName() const;

    void setLat(qreal lat);
    qreal lat() const;

    void setLongValue(qreal longValue);
    qreal longValue() const;

    void setMimeType(const QString &mimeType);
    QString mimeType() const;

    void setPhoneNumber(const QString &phoneNumber);
    QString phoneNumber() const;

    void setSize(qint32 size);
    qint32 size() const;

    void setThumbPhotoSize(const PhotoSize &thumbPhotoSize);
    PhotoSize thumbPhotoSize() const;

    void setThumbBytes(const QByteArray &thumbBytes);
    QByteArray thumbBytes() const;

    void setThumbH(qint32 thumbH);
    qint32 thumbH() const;

    void setThumbW(qint32 thumbW);
    qint32 thumbW() const;

    void setUserId(qint32 userId);
    qint32 userId() const;

    void setW(qint32 w);
    qint32 w() const;

    void setClassType(DecryptedMessageMediaClassType classType);
    DecryptedMessageMediaClassType classType() const;

    bool fetch(InboundPkt *in);
    bool push(OutboundPkt *out) const;

    QMap<QString, QVariant> toMap() const;
    static DecryptedMessageMedia fromMap(const QMap<QString, QVariant> &map);

    bool operator ==(const DecryptedMessageMedia &b) const;

    bool operator==(bool stt) const { return isNull() != stt; }
    bool operator!=(bool stt) const { return !operator ==(stt); }

    QByteArray getHash(QCryptographicHash::Algorithm alg = QCryptographicHash::Md5) const;

private:
    qint64 m_accessHash;
    QList<DocumentAttribute> m_attributes;
    qint32 m_date;
    qint32 m_dcId;
    qint32 m_duration;
    QString m_fileName;
    QString m_firstName;
    qint32 m_h;
    qint64 m_id;
    QByteArray m_iv;
    QByteArray m_key;
    QString m_lastName;
    qreal m_lat;
    qreal m_longValue;
    QString m_mimeType;
    QString m_phoneNumber;
    qint32 m_size;
    PhotoSize m_thumbPhotoSize;
    QByteArray m_thumbBytes;
    qint32 m_thumbH;
    qint32 m_thumbW;
    qint32 m_userId;
    qint32 m_w;
    DecryptedMessageMediaClassType m_classType;
};

Q_DECLARE_METATYPE(DecryptedMessageMedia)

QDataStream LIBQTELEGRAMSHARED_EXPORT &operator<<(QDataStream &stream, const DecryptedMessageMedia &item);
QDataStream LIBQTELEGRAMSHARED_EXPORT &operator>>(QDataStream &stream, DecryptedMessageMedia &item);

inline DecryptedMessageMedia::DecryptedMessageMedia(DecryptedMessageMediaClassType classType, InboundPkt *in) :
    m_accessHash(0),
    m_date(0),
    m_dcId(0),
    m_duration(0),
    m_h(0),
    m_id(0),
    m_lat(0),
    m_longValue(0),
    m_size(0),
    m_thumbH(0),
    m_thumbW(0),
    m_userId(0),
    m_w(0),
    m_classType(classType)
{
    if(in) fetch(in);
}

inline DecryptedMessageMedia::DecryptedMessageMedia(InboundPkt *in) :
    m_accessHash(0),
    m_date(0),
    m_dcId(0),
    m_duration(0),
    m_h(0),
    m_id(0),
    m_lat(0),
    m_longValue(0),
    m_size(0),
    m_thumbH(0),
    m_thumbW(0),
    m_userId(0),
    m_w(0),
    m_classType(typeDecryptedMessageMediaEmptySecret8)
{
    fetch(in);
}

inline DecryptedMessageMedia::DecryptedMessageMedia(const Null &null) :
    TelegramTypeObject(null),
    m_accessHash(0),
    m_date(0),
    m_dcId(0),
    m_duration(0),
    m_h(0),
    m_id(0),
    m_lat(0),
    m_longValue(0),
    m_size(0),
    m_thumbH(0),
    m_thumbW(0),
    m_userId(0),
    m_w(0),
    m_classType(typeDecryptedMessageMediaEmptySecret8)
{
}

inline DecryptedMessageMedia::~DecryptedMessageMedia() {
}

inline void DecryptedMessageMedia::setAccessHash(qint64 accessHash) {
    m_accessHash = accessHash;
}

inline qint64 DecryptedMessageMedia::accessHash() const {
    return m_accessHash;
}

inline void DecryptedMessageMedia::setAttributes(const QList<DocumentAttribute> &attributes) {
    m_attributes = attributes;
}

inline QList<DocumentAttribute> DecryptedMessageMedia::attributes() const {
    return m_attributes;
}

inline void DecryptedMessageMedia::setDate(qint32 date) {
    m_date = date;
}

inline qint32 DecryptedMessageMedia::date() const {
    return m_date;
}

inline void DecryptedMessageMedia::setDcId(qint32 dcId) {
    m_dcId = dcId;
}

inline qint32 DecryptedMessageMedia::dcId() const {
    return m_dcId;
}

inline void DecryptedMessageMedia::setDuration(qint32 duration) {
    m_duration = duration;
}

inline qint32 DecryptedMessageMedia::duration() const {
    return m_duration;
}

inline void DecryptedMessageMedia::setFileName(const QString &fileName) {
    m_fileName = fileName;
}

inline QString DecryptedMessageMedia::fileName() const {
    return m_fileName;
}

inline void DecryptedMessageMedia::setFirstName(const QString &firstName) {
    m_firstName = firstName;
}

inline QString DecryptedMessageMedia::firstName() const {
    return m_firstName;
}

inline void DecryptedMessageMedia::setH(qint32 h) {
    m_h = h;
}

inline qint32 DecryptedMessageMedia::h() const {
    return m_h;
}

inline void DecryptedMessageMedia::setId(qint64 id) {
    m_id = id;
}

inline qint64 DecryptedMessageMedia::id() const {
    return m_id;
}

inline void DecryptedMessageMedia::setIv(const QByteArray &iv) {
    m_iv = iv;
}

inline QByteArray DecryptedMessageMedia::iv() const {
    return m_iv;
}

inline void DecryptedMessageMedia::setKey(const QByteArray &key) {
    m_key = key;
}

inline QByteArray DecryptedMessageMedia::key() const {
    return m_key;
}

inline void DecryptedMessageMedia::setLastName(const QString &lastName) {
    m_lastName = lastName;
}

inline QString DecryptedMessageMedia::lastName() const {
    return m_lastName;
}

inline void DecryptedMessageMedia::setLat(qreal lat) {
    m_lat = lat;
}

inline qreal DecryptedMessageMedia::lat() const {
    return m_lat;
}

inline void DecryptedMessageMedia::setLongValue(qreal longValue) {
    m_longValue = longValue;
}

inline qreal DecryptedMessageMedia::longValue() const {
    return m_longValue;
}

inline void DecryptedMessageMedia::setMimeType(const QString &mimeType) {
    m_mimeType = mimeType;
}

inline QString DecryptedMessageMedia::mimeType() const {
    return m_mimeType;
}

inline void DecryptedMessageMedia::setPhoneNumber(const QString &phoneNumber) {
    m_phoneNumber = phoneNumber;
}

inline QString DecryptedMessageMedia::phoneNumber() const {
    return m_phoneNumber;
}

inline void DecryptedMessageMedia::setSize(qint32 size) {
    m_size = size;
}

inline qint32 DecryptedMessageMedia::size() const {
    return m_size;
}

inline void DecryptedMessageMedia::setThumbPhotoSize(const PhotoSize &thumbPhotoSize) {
    m_thumbPhotoSize = thumbPhotoSize;
}

inline PhotoSize DecryptedMessageMedia::thumbPhotoSize() const {
    return m_thumbPhotoSize;
}

inline void DecryptedMessageMedia::setThumbBytes(const QByteArray &thumbBytes) {
    m_thumbBytes = thumbBytes;
}

inline QByteArray DecryptedMessageMedia::thumbBytes() const {
    return m_thumbBytes;
}

inline void DecryptedMessageMedia::setThumbH(qint32 thumbH) {
    m_thumbH = thumbH;
}

inline qint32 DecryptedMessageMedia::thumbH() const {
    return m_thumbH;
}

inline void DecryptedMessageMedia::setThumbW(qint32 thumbW) {
    m_thumbW = thumbW;
}

inline qint32 DecryptedMessageMedia::thumbW() const {
    return m_thumbW;
}

inline void DecryptedMessageMedia::setUserId(qint32 userId) {
    m_userId = userId;
}

inline qint32 DecryptedMessageMedia::userId() const {
    return m_userId;
}

inline void DecryptedMessageMedia::setW(qint32 w) {
    m_w = w;
}

inline qint32 DecryptedMessageMedia::w() const {
    return m_w;
}

inline bool DecryptedMessageMedia::operator ==(const DecryptedMessageMedia &b) const {
    return m_classType == b.m_classType &&
           m_accessHash == b.m_accessHash &&
           m_attributes == b.m_attributes &&
           m_date == b.m_date &&
           m_dcId == b.m_dcId &&
           m_duration == b.m_duration &&
           m_fileName == b.m_fileName &&
           m_firstName == b.m_firstName &&
           m_h == b.m_h &&
           m_id == b.m_id &&
           m_iv == b.m_iv &&
           m_key == b.m_key &&
           m_lastName == b.m_lastName &&
           m_lat == b.m_lat &&
           m_longValue == b.m_longValue &&
           m_mimeType == b.m_mimeType &&
           m_phoneNumber == b.m_phoneNumber &&
           m_size == b.m_size &&
           m_thumbPhotoSize == b.m_thumbPhotoSize &&
           m_thumbBytes == b.m_thumbBytes &&
           m_thumbH == b.m_thumbH &&
           m_thumbW == b.m_thumbW &&
           m_userId == b.m_userId &&
           m_w == b.m_w;
}

inline void DecryptedMessageMedia::setClassType(DecryptedMessageMedia::DecryptedMessageMediaClassType classType) {
    m_classType = classType;
}

inline DecryptedMessageMedia::DecryptedMessageMediaClassType DecryptedMessageMedia::classType() const {
    return m_classType;
}

inline bool DecryptedMessageMedia::fetch(InboundPkt *in) {
    LQTG_FETCH_LOG;
    int x = in->fetchInt();
    switch(x) {
    case typeDecryptedMessageMediaEmptySecret8: {
        m_classType = static_cast<DecryptedMessageMediaClassType>(x);
        return true;
    }
        break;
    
    case typeDecryptedMessageMediaPhotoSecret8: {
        m_thumbBytes = in->fetchBytes();
        m_thumbW = in->fetchInt();
        m_thumbH = in->fetchInt();
        m_w = in->fetchInt();
        m_h = in->fetchInt();
        m_size = in->fetchInt();
        m_key = in->fetchBytes();
        m_iv = in->fetchBytes();
        m_classType = static_cast<DecryptedMessageMediaClassType>(x);
        return true;
    }
        break;
    
    case typeDecryptedMessageMediaVideoSecret8: {
        m_thumbBytes = in->fetchBytes();
        m_thumbW = in->fetchInt();
        m_thumbH = in->fetchInt();
        m_duration = in->fetchInt();
        m_w = in->fetchInt();
        m_h = in->fetchInt();
        m_size = in->fetchInt();
        m_key = in->fetchBytes();
        m_iv = in->fetchBytes();
        m_classType = static_cast<DecryptedMessageMediaClassType>(x);
        return true;
    }
        break;
    
    case typeDecryptedMessageMediaGeoPointSecret8: {
        m_lat = in->fetchDouble();
        m_longValue = in->fetchDouble();
        m_classType = static_cast<DecryptedMessageMediaClassType>(x);
        return true;
    }
        break;
    
    case typeDecryptedMessageMediaContactSecret8: {
        m_phoneNumber = in->fetchQString();
        m_firstName = in->fetchQString();
        m_lastName = in->fetchQString();
        m_userId = in->fetchInt();
        m_classType = static_cast<DecryptedMessageMediaClassType>(x);
        return true;
    }
        break;
    
    case typeDecryptedMessageMediaDocumentSecret8: {
        m_thumbBytes = in->fetchBytes();
        m_thumbW = in->fetchInt();
        m_thumbH = in->fetchInt();
        m_fileName = in->fetchQString();
        m_mimeType = in->fetchQString();
        m_size = in->fetchInt();
        m_key = in->fetchBytes();
        m_iv = in->fetchBytes();
        m_classType = static_cast<DecryptedMessageMediaClassType>(x);
        return true;
    }
        break;
    
    case typeDecryptedMessageMediaAudioSecret8: {
        m_duration = in->fetchInt();
        m_size = in->fetchInt();
        m_key = in->fetchBytes();
        m_iv = in->fetchBytes();
        m_classType = static_cast<DecryptedMessageMediaClassType>(x);
        return true;
    }
        break;
    
    case typeDecryptedMessageMediaVideoSecret17: {
        m_thumbBytes = in->fetchBytes();
        m_thumbW = in->fetchInt();
        m_thumbH = in->fetchInt();
        m_duration = in->fetchInt();
        m_mimeType = in->fetchQString();
        m_w = in->fetchInt();
        m_h = in->fetchInt();
        m_size = in->fetchInt();
        m_key = in->fetchBytes();
        m_iv = in->fetchBytes();
        m_classType = static_cast<DecryptedMessageMediaClassType>(x);
        return true;
    }
        break;
    
    case typeDecryptedMessageMediaAudioSecret17: {
        m_duration = in->fetchInt();
        m_mimeType = in->fetchQString();
        m_size = in->fetchInt();
        m_key = in->fetchBytes();
        m_iv = in->fetchBytes();
        m_classType = static_cast<DecryptedMessageMediaClassType>(x);
        return true;
    }
        break;
    
    case typeDecryptedMessageMediaExternalDocumentSecret23: {
        m_id = in->fetchLong();
        m_accessHash = in->fetchLong();
        m_date = in->fetchInt();
        m_mimeType = in->fetchQString();
        m_size = in->fetchInt();
        m_thumbPhotoSize.fetch(in);
        m_dcId = in->fetchInt();
        if(in->fetchInt() != (qint32)CoreTypes::typeVector) return false;
        qint32 m_attributes_length = in->fetchInt();
        m_attributes.clear();
        for (qint32 i = 0; i < m_attributes_length; i++) {
            DocumentAttribute type;
            type.fetch(in);
            m_attributes.append(type);
        }
        m_classType = static_cast<DecryptedMessageMediaClassType>(x);
        return true;
    }
        break;
    
    default:
        LQTG_FETCH_ASSERT;
        return false;
    }
}

inline bool DecryptedMessageMedia::push(OutboundPkt *out) const {
    out->appendInt(m_classType);
    switch(m_classType) {
    case typeDecryptedMessageMediaEmptySecret8: {
        return true;
    }
        break;
    
    case typeDecryptedMessageMediaPhotoSecret8: {
        out->appendBytes(m_thumbBytes);
        out->appendInt(m_thumbW);
        out->appendInt(m_thumbH);
        out->appendInt(m_w);
        out->appendInt(m_h);
        out->appendInt(m_size);
        out->appendBytes(m_key);
        out->appendBytes(m_iv);
        return true;
    }
        break;
    
    case typeDecryptedMessageMediaVideoSecret8: {
        out->appendBytes(m_thumbBytes);
        out->appendInt(m_thumbW);
        out->appendInt(m_thumbH);
        out->appendInt(m_duration);
        out->appendInt(m_w);
        out->appendInt(m_h);
        out->appendInt(m_size);
        out->appendBytes(m_key);
        out->appendBytes(m_iv);
        return true;
    }
        break;
    
    case typeDecryptedMessageMediaGeoPointSecret8: {
        out->appendDouble(m_lat);
        out->appendDouble(m_longValue);
        return true;
    }
        break;
    
    case typeDecryptedMessageMediaContactSecret8: {
        out->appendQString(m_phoneNumber);
        out->appendQString(m_firstName);
        out->appendQString(m_lastName);
        out->appendInt(m_userId);
        return true;
    }
        break;
    
    case typeDecryptedMessageMediaDocumentSecret8: {
        out->appendBytes(m_thumbBytes);
        out->appendInt(m_thumbW);
        out->appendInt(m_thumbH);
        out->appendQString(m_fileName);
        out->appendQString(m_mimeType);
        out->appendInt(m_size);
        out->appendBytes(m_key);
        out->appendBytes(m_iv);
        return true;
    }
        break;
    
    case typeDecryptedMessageMediaAudioSecret8: {
        out->appendInt(m_duration);
        out->appendInt(m_size);
        out->appendBytes(m_key);
        out->appendBytes(m_iv);
        return true;
    }
        break;
    
    case typeDecryptedMessageMediaVideoSecret17: {
        out->appendBytes(m_thumbBytes);
        out->appendInt(m_thumbW);
        out->appendInt(m_thumbH);
        out->appendInt(m_duration);
        out->appendQString(m_mimeType);
        out->appendInt(m_w);
        out->appendInt(m_h);
        out->appendInt(m_size);
        out->appendBytes(m_key);
        out->appendBytes(m_iv);
        return true;
    }
        break;
    
    case typeDecryptedMessageMediaAudioSecret17: {
        out->appendInt(m_duration);
        out->appendQString(m_mimeType);
        out->appendInt(m_size);
        out->appendBytes(m_key);
        out->appendBytes(m_iv);
        return true;
    }
        break;
    
    case typeDecryptedMessageMediaExternalDocumentSecret23: {
        out->appendLong(m_id);
        out->appendLong(m_accessHash);
        out->appendInt(m_date);
        out->appendQString(m_mimeType);
        out->appendInt(m_size);
        m_thumbPhotoSize.push(out);
        out->appendInt(m_dcId);
        out->appendInt(CoreTypes::typeVector);
        out->appendInt(m_attributes.count());
        for (qint32 i = 0; i < m_attributes.count(); i++) {
            m_attributes[i].push(out);
        }
        return true;
    }
        break;
    
    default:
        return false;
    }
}

inline QMap<QString, QVariant> DecryptedMessageMedia::toMap() const {
    QMap<QString, QVariant> result;
    switch(static_cast<int>(m_classType)) {
    case typeDecryptedMessageMediaEmptySecret8: {
        result["classType"] = "DecryptedMessageMedia::typeDecryptedMessageMediaEmptySecret8";
        return result;
    }
        break;
    
    case typeDecryptedMessageMediaPhotoSecret8: {
        result["classType"] = "DecryptedMessageMedia::typeDecryptedMessageMediaPhotoSecret8";
        result["thumbBytes"] = QVariant::fromValue<QByteArray>(thumbBytes());
        result["thumbW"] = QVariant::fromValue<qint32>(thumbW());
        result["thumbH"] = QVariant::fromValue<qint32>(thumbH());
        result["w"] = QVariant::fromValue<qint32>(w());
        result["h"] = QVariant::fromValue<qint32>(h());
        result["size"] = QVariant::fromValue<qint32>(size());
        result["key"] = QVariant::fromValue<QByteArray>(key());
        result["iv"] = QVariant::fromValue<QByteArray>(iv());
        return result;
    }
        break;
    
    case typeDecryptedMessageMediaVideoSecret8: {
        result["classType"] = "DecryptedMessageMedia::typeDecryptedMessageMediaVideoSecret8";
        result["thumbBytes"] = QVariant::fromValue<QByteArray>(thumbBytes());
        result["thumbW"] = QVariant::fromValue<qint32>(thumbW());
        result["thumbH"] = QVariant::fromValue<qint32>(thumbH());
        result["duration"] = QVariant::fromValue<qint32>(duration());
        result["w"] = QVariant::fromValue<qint32>(w());
        result["h"] = QVariant::fromValue<qint32>(h());
        result["size"] = QVariant::fromValue<qint32>(size());
        result["key"] = QVariant::fromValue<QByteArray>(key());
        result["iv"] = QVariant::fromValue<QByteArray>(iv());
        return result;
    }
        break;
    
    case typeDecryptedMessageMediaGeoPointSecret8: {
        result["classType"] = "DecryptedMessageMedia::typeDecryptedMessageMediaGeoPointSecret8";
        result["lat"] = QVariant::fromValue<qreal>(lat());
        result["longValue"] = QVariant::fromValue<qreal>(longValue());
        return result;
    }
        break;
    
    case typeDecryptedMessageMediaContactSecret8: {
        result["classType"] = "DecryptedMessageMedia::typeDecryptedMessageMediaContactSecret8";
        result["phoneNumber"] = QVariant::fromValue<QString>(phoneNumber());
        result["firstName"] = QVariant::fromValue<QString>(firstName());
        result["lastName"] = QVariant::fromValue<QString>(lastName());
        result["userId"] = QVariant::fromValue<qint32>(userId());
        return result;
    }
        break;
    
    case typeDecryptedMessageMediaDocumentSecret8: {
        result["classType"] = "DecryptedMessageMedia::typeDecryptedMessageMediaDocumentSecret8";
        result["thumbBytes"] = QVariant::fromValue<QByteArray>(thumbBytes());
        result["thumbW"] = QVariant::fromValue<qint32>(thumbW());
        result["thumbH"] = QVariant::fromValue<qint32>(thumbH());
        result["fileName"] = QVariant::fromValue<QString>(fileName());
        result["mimeType"] = QVariant::fromValue<QString>(mimeType());
        result["size"] = QVariant::fromValue<qint32>(size());
        result["key"] = QVariant::fromValue<QByteArray>(key());
        result["iv"] = QVariant::fromValue<QByteArray>(iv());
        return result;
    }
        break;
    
    case typeDecryptedMessageMediaAudioSecret8: {
        result["classType"] = "DecryptedMessageMedia::typeDecryptedMessageMediaAudioSecret8";
        result["duration"] = QVariant::fromValue<qint32>(duration());
        result["size"] = QVariant::fromValue<qint32>(size());
        result["key"] = QVariant::fromValue<QByteArray>(key());
        result["iv"] = QVariant::fromValue<QByteArray>(iv());
        return result;
    }
        break;
    
    case typeDecryptedMessageMediaVideoSecret17: {
        result["classType"] = "DecryptedMessageMedia::typeDecryptedMessageMediaVideoSecret17";
        result["thumbBytes"] = QVariant::fromValue<QByteArray>(thumbBytes());
        result["thumbW"] = QVariant::fromValue<qint32>(thumbW());
        result["thumbH"] = QVariant::fromValue<qint32>(thumbH());
        result["duration"] = QVariant::fromValue<qint32>(duration());
        result["mimeType"] = QVariant::fromValue<QString>(mimeType());
        result["w"] = QVariant::fromValue<qint32>(w());
        result["h"] = QVariant::fromValue<qint32>(h());
        result["size"] = QVariant::fromValue<qint32>(size());
        result["key"] = QVariant::fromValue<QByteArray>(key());
        result["iv"] = QVariant::fromValue<QByteArray>(iv());
        return result;
    }
        break;
    
    case typeDecryptedMessageMediaAudioSecret17: {
        result["classType"] = "DecryptedMessageMedia::typeDecryptedMessageMediaAudioSecret17";
        result["duration"] = QVariant::fromValue<qint32>(duration());
        result["mimeType"] = QVariant::fromValue<QString>(mimeType());
        result["size"] = QVariant::fromValue<qint32>(size());
        result["key"] = QVariant::fromValue<QByteArray>(key());
        result["iv"] = QVariant::fromValue<QByteArray>(iv());
        return result;
    }
        break;
    
    case typeDecryptedMessageMediaExternalDocumentSecret23: {
        result["classType"] = "DecryptedMessageMedia::typeDecryptedMessageMediaExternalDocumentSecret23";
        result["id"] = QVariant::fromValue<qint64>(id());
        result["accessHash"] = QVariant::fromValue<qint64>(accessHash());
        result["date"] = QVariant::fromValue<qint32>(date());
        result["mimeType"] = QVariant::fromValue<QString>(mimeType());
        result["size"] = QVariant::fromValue<qint32>(size());
        result["thumbPhotoSize"] = m_thumbPhotoSize.toMap();
        result["dcId"] = QVariant::fromValue<qint32>(dcId());
        QList<QVariant> _attributes;
        Q_FOREACH(const DocumentAttribute &m__type, m_attributes)
            _attributes << m__type.toMap();
        result["attributes"] = _attributes;
        return result;
    }
        break;
    
    default:
        return result;
    }
}

inline DecryptedMessageMedia DecryptedMessageMedia::fromMap(const QMap<QString, QVariant> &map) {
    DecryptedMessageMedia result;
    if(map.value("classType").toString() == "DecryptedMessageMedia::typeDecryptedMessageMediaEmptySecret8") {
        result.setClassType(typeDecryptedMessageMediaEmptySecret8);
        return result;
    }
    if(map.value("classType").toString() == "DecryptedMessageMedia::typeDecryptedMessageMediaPhotoSecret8") {
        result.setClassType(typeDecryptedMessageMediaPhotoSecret8);
        result.setThumbBytes( map.value("thumbBytes").value<QByteArray>() );
        result.setThumbW( map.value("thumbW").value<qint32>() );
        result.setThumbH( map.value("thumbH").value<qint32>() );
        result.setW( map.value("w").value<qint32>() );
        result.setH( map.value("h").value<qint32>() );
        result.setSize( map.value("size").value<qint32>() );
        result.setKey( map.value("key").value<QByteArray>() );
        result.setIv( map.value("iv").value<QByteArray>() );
        return result;
    }
    if(map.value("classType").toString() == "DecryptedMessageMedia::typeDecryptedMessageMediaVideoSecret8") {
        result.setClassType(typeDecryptedMessageMediaVideoSecret8);
        result.setThumbBytes( map.value("thumbBytes").value<QByteArray>() );
        result.setThumbW( map.value("thumbW").value<qint32>() );
        result.setThumbH( map.value("thumbH").value<qint32>() );
        result.setDuration( map.value("duration").value<qint32>() );
        result.setW( map.value("w").value<qint32>() );
        result.setH( map.value("h").value<qint32>() );
        result.setSize( map.value("size").value<qint32>() );
        result.setKey( map.value("key").value<QByteArray>() );
        result.setIv( map.value("iv").value<QByteArray>() );
        return result;
    }
    if(map.value("classType").toString() == "DecryptedMessageMedia::typeDecryptedMessageMediaGeoPointSecret8") {
        result.setClassType(typeDecryptedMessageMediaGeoPointSecret8);
        result.setLat( map.value("lat").value<qreal>() );
        result.setLongValue( map.value("longValue").value<qreal>() );
        return result;
    }
    if(map.value("classType").toString() == "DecryptedMessageMedia::typeDecryptedMessageMediaContactSecret8") {
        result.setClassType(typeDecryptedMessageMediaContactSecret8);
        result.setPhoneNumber( map.value("phoneNumber").value<QString>() );
        result.setFirstName( map.value("firstName").value<QString>() );
        result.setLastName( map.value("lastName").value<QString>() );
        result.setUserId( map.value("userId").value<qint32>() );
        return result;
    }
    if(map.value("classType").toString() == "DecryptedMessageMedia::typeDecryptedMessageMediaDocumentSecret8") {
        result.setClassType(typeDecryptedMessageMediaDocumentSecret8);
        result.setThumbBytes( map.value("thumbBytes").value<QByteArray>() );
        result.setThumbW( map.value("thumbW").value<qint32>() );
        result.setThumbH( map.value("thumbH").value<qint32>() );
        result.setFileName( map.value("fileName").value<QString>() );
        result.setMimeType( map.value("mimeType").value<QString>() );
        result.setSize( map.value("size").value<qint32>() );
        result.setKey( map.value("key").value<QByteArray>() );
        result.setIv( map.value("iv").value<QByteArray>() );
        return result;
    }
    if(map.value("classType").toString() == "DecryptedMessageMedia::typeDecryptedMessageMediaAudioSecret8") {
        result.setClassType(typeDecryptedMessageMediaAudioSecret8);
        result.setDuration( map.value("duration").value<qint32>() );
        result.setSize( map.value("size").value<qint32>() );
        result.setKey( map.value("key").value<QByteArray>() );
        result.setIv( map.value("iv").value<QByteArray>() );
        return result;
    }
    if(map.value("classType").toString() == "DecryptedMessageMedia::typeDecryptedMessageMediaVideoSecret17") {
        result.setClassType(typeDecryptedMessageMediaVideoSecret17);
        result.setThumbBytes( map.value("thumbBytes").value<QByteArray>() );
        result.setThumbW( map.value("thumbW").value<qint32>() );
        result.setThumbH( map.value("thumbH").value<qint32>() );
        result.setDuration( map.value("duration").value<qint32>() );
        result.setMimeType( map.value("mimeType").value<QString>() );
        result.setW( map.value("w").value<qint32>() );
        result.setH( map.value("h").value<qint32>() );
        result.setSize( map.value("size").value<qint32>() );
        result.setKey( map.value("key").value<QByteArray>() );
        result.setIv( map.value("iv").value<QByteArray>() );
        return result;
    }
    if(map.value("classType").toString() == "DecryptedMessageMedia::typeDecryptedMessageMediaAudioSecret17") {
        result.setClassType(typeDecryptedMessageMediaAudioSecret17);
        result.setDuration( map.value("duration").value<qint32>() );
        result.setMimeType( map.value("mimeType").value<QString>() );
        result.setSize( map.value("size").value<qint32>() );
        result.setKey( map.value("key").value<QByteArray>() );
        result.setIv( map.value("iv").value<QByteArray>() );
        return result;
    }
    if(map.value("classType").toString() == "DecryptedMessageMedia::typeDecryptedMessageMediaExternalDocumentSecret23") {
        result.setClassType(typeDecryptedMessageMediaExternalDocumentSecret23);
        result.setId( map.value("id").value<qint64>() );
        result.setAccessHash( map.value("accessHash").value<qint64>() );
        result.setDate( map.value("date").value<qint32>() );
        result.setMimeType( map.value("mimeType").value<QString>() );
        result.setSize( map.value("size").value<qint32>() );
        result.setThumbPhotoSize( PhotoSize::fromMap(map.value("thumbPhotoSize").toMap()) );
        result.setDcId( map.value("dcId").value<qint32>() );
        QList<QVariant> map_attributes = map["attributes"].toList();
        QList<DocumentAttribute> _attributes;
        Q_FOREACH(const QVariant &var, map_attributes)
            _attributes << DocumentAttribute::fromMap(var.toMap());
        result.setAttributes(_attributes);
        return result;
    }
    return result;
}

inline QByteArray DecryptedMessageMedia::getHash(QCryptographicHash::Algorithm alg) const {
    QByteArray data;
    QDataStream str(&data, QIODevice::WriteOnly);
    str << *this;
    return QCryptographicHash::hash(data, alg);
}

inline QDataStream &operator<<(QDataStream &stream, const DecryptedMessageMedia &item) {
    stream << static_cast<uint>(item.classType());
    switch(item.classType()) {
    case DecryptedMessageMedia::typeDecryptedMessageMediaEmptySecret8:
        
        break;
    case DecryptedMessageMedia::typeDecryptedMessageMediaPhotoSecret8:
        stream << item.thumbBytes();
        stream << item.thumbW();
        stream << item.thumbH();
        stream << item.w();
        stream << item.h();
        stream << item.size();
        stream << item.key();
        stream << item.iv();
        break;
    case DecryptedMessageMedia::typeDecryptedMessageMediaVideoSecret8:
        stream << item.thumbBytes();
        stream << item.thumbW();
        stream << item.thumbH();
        stream << item.duration();
        stream << item.w();
        stream << item.h();
        stream << item.size();
        stream << item.key();
        stream << item.iv();
        break;
    case DecryptedMessageMedia::typeDecryptedMessageMediaGeoPointSecret8:
        stream << item.lat();
        stream << item.longValue();
        break;
    case DecryptedMessageMedia::typeDecryptedMessageMediaContactSecret8:
        stream << item.phoneNumber();
        stream << item.firstName();
        stream << item.lastName();
        stream << item.userId();
        break;
    case DecryptedMessageMedia::typeDecryptedMessageMediaDocumentSecret8:
        stream << item.thumbBytes();
        stream << item.thumbW();
        stream << item.thumbH();
        stream << item.fileName();
        stream << item.mimeType();
        stream << item.size();
        stream << item.key();
        stream << item.iv();
        break;
    case DecryptedMessageMedia::typeDecryptedMessageMediaAudioSecret8:
        stream << item.duration();
        stream << item.size();
        stream << item.key();
        stream << item.iv();
        break;
    case DecryptedMessageMedia::typeDecryptedMessageMediaVideoSecret17:
        stream << item.thumbBytes();
        stream << item.thumbW();
        stream << item.thumbH();
        stream << item.duration();
        stream << item.mimeType();
        stream << item.w();
        stream << item.h();
        stream << item.size();
        stream << item.key();
        stream << item.iv();
        break;
    case DecryptedMessageMedia::typeDecryptedMessageMediaAudioSecret17:
        stream << item.duration();
        stream << item.mimeType();
        stream << item.size();
        stream << item.key();
        stream << item.iv();
        break;
    case DecryptedMessageMedia::typeDecryptedMessageMediaExternalDocumentSecret23:
        stream << item.id();
        stream << item.accessHash();
        stream << item.date();
        stream << item.mimeType();
        stream << item.size();
        stream << item.thumbPhotoSize();
        stream << item.dcId();
        stream << item.attributes();
        break;
    }
    return stream;
}

inline QDataStream &operator>>(QDataStream &stream, DecryptedMessageMedia &item) {
    uint type = 0;
    stream >> type;
    item.setClassType(static_cast<DecryptedMessageMedia::DecryptedMessageMediaClassType>(type));
    switch(type) {
    case DecryptedMessageMedia::typeDecryptedMessageMediaEmptySecret8: {
        
    }
        break;
    case DecryptedMessageMedia::typeDecryptedMessageMediaPhotoSecret8: {
        QByteArray m_thumb_bytes;
        stream >> m_thumb_bytes;
        item.setThumbBytes(m_thumb_bytes);
        qint32 m_thumb_w;
        stream >> m_thumb_w;
        item.setThumbW(m_thumb_w);
        qint32 m_thumb_h;
        stream >> m_thumb_h;
        item.setThumbH(m_thumb_h);
        qint32 m_w;
        stream >> m_w;
        item.setW(m_w);
        qint32 m_h;
        stream >> m_h;
        item.setH(m_h);
        qint32 m_size;
        stream >> m_size;
        item.setSize(m_size);
        QByteArray m_key;
        stream >> m_key;
        item.setKey(m_key);
        QByteArray m_iv;
        stream >> m_iv;
        item.setIv(m_iv);
    }
        break;
    case DecryptedMessageMedia::typeDecryptedMessageMediaVideoSecret8: {
        QByteArray m_thumb_bytes;
        stream >> m_thumb_bytes;
        item.setThumbBytes(m_thumb_bytes);
        qint32 m_thumb_w;
        stream >> m_thumb_w;
        item.setThumbW(m_thumb_w);
        qint32 m_thumb_h;
        stream >> m_thumb_h;
        item.setThumbH(m_thumb_h);
        qint32 m_duration;
        stream >> m_duration;
        item.setDuration(m_duration);
        qint32 m_w;
        stream >> m_w;
        item.setW(m_w);
        qint32 m_h;
        stream >> m_h;
        item.setH(m_h);
        qint32 m_size;
        stream >> m_size;
        item.setSize(m_size);
        QByteArray m_key;
        stream >> m_key;
        item.setKey(m_key);
        QByteArray m_iv;
        stream >> m_iv;
        item.setIv(m_iv);
    }
        break;
    case DecryptedMessageMedia::typeDecryptedMessageMediaGeoPointSecret8: {
        qreal m_lat;
        stream >> m_lat;
        item.setLat(m_lat);
        qreal m_longValue;
        stream >> m_longValue;
        item.setLongValue(m_longValue);
    }
        break;
    case DecryptedMessageMedia::typeDecryptedMessageMediaContactSecret8: {
        QString m_phone_number;
        stream >> m_phone_number;
        item.setPhoneNumber(m_phone_number);
        QString m_first_name;
        stream >> m_first_name;
        item.setFirstName(m_first_name);
        QString m_last_name;
        stream >> m_last_name;
        item.setLastName(m_last_name);
        qint32 m_user_id;
        stream >> m_user_id;
        item.setUserId(m_user_id);
    }
        break;
    case DecryptedMessageMedia::typeDecryptedMessageMediaDocumentSecret8: {
        QByteArray m_thumb_bytes;
        stream >> m_thumb_bytes;
        item.setThumbBytes(m_thumb_bytes);
        qint32 m_thumb_w;
        stream >> m_thumb_w;
        item.setThumbW(m_thumb_w);
        qint32 m_thumb_h;
        stream >> m_thumb_h;
        item.setThumbH(m_thumb_h);
        QString m_file_name;
        stream >> m_file_name;
        item.setFileName(m_file_name);
        QString m_mime_type;
        stream >> m_mime_type;
        item.setMimeType(m_mime_type);
        qint32 m_size;
        stream >> m_size;
        item.setSize(m_size);
        QByteArray m_key;
        stream >> m_key;
        item.setKey(m_key);
        QByteArray m_iv;
        stream >> m_iv;
        item.setIv(m_iv);
    }
        break;
    case DecryptedMessageMedia::typeDecryptedMessageMediaAudioSecret8: {
        qint32 m_duration;
        stream >> m_duration;
        item.setDuration(m_duration);
        qint32 m_size;
        stream >> m_size;
        item.setSize(m_size);
        QByteArray m_key;
        stream >> m_key;
        item.setKey(m_key);
        QByteArray m_iv;
        stream >> m_iv;
        item.setIv(m_iv);
    }
        break;
    case DecryptedMessageMedia::typeDecryptedMessageMediaVideoSecret17: {
        QByteArray m_thumb_bytes;
        stream >> m_thumb_bytes;
        item.setThumbBytes(m_thumb_bytes);
        qint32 m_thumb_w;
        stream >> m_thumb_w;
        item.setThumbW(m_thumb_w);
        qint32 m_thumb_h;
        stream >> m_thumb_h;
        item.setThumbH(m_thumb_h);
        qint32 m_duration;
        stream >> m_duration;
        item.setDuration(m_duration);
        QString m_mime_type;
        stream >> m_mime_type;
        item.setMimeType(m_mime_type);
        qint32 m_w;
        stream >> m_w;
        item.setW(m_w);
        qint32 m_h;
        stream >> m_h;
        item.setH(m_h);
        qint32 m_size;
        stream >> m_size;
        item.setSize(m_size);
        QByteArray m_key;
        stream >> m_key;
        item.setKey(m_key);
        QByteArray m_iv;
        stream >> m_iv;
        item.setIv(m_iv);
    }
        break;
    case DecryptedMessageMedia::typeDecryptedMessageMediaAudioSecret17: {
        qint32 m_duration;
        stream >> m_duration;
        item.setDuration(m_duration);
        QString m_mime_type;
        stream >> m_mime_type;
        item.setMimeType(m_mime_type);
        qint32 m_size;
        stream >> m_size;
        item.setSize(m_size);
        QByteArray m_key;
        stream >> m_key;
        item.setKey(m_key);
        QByteArray m_iv;
        stream >> m_iv;
        item.setIv(m_iv);
    }
        break;
    case DecryptedMessageMedia::typeDecryptedMessageMediaExternalDocumentSecret23: {
        qint64 m_id;
        stream >> m_id;
        item.setId(m_id);
        qint64 m_access_hash;
        stream >> m_access_hash;
        item.setAccessHash(m_access_hash);
        qint32 m_date;
        stream >> m_date;
        item.setDate(m_date);
        QString m_mime_type;
        stream >> m_mime_type;
        item.setMimeType(m_mime_type);
        qint32 m_size;
        stream >> m_size;
        item.setSize(m_size);
        PhotoSize m_thumb_PhotoSize;
        stream >> m_thumb_PhotoSize;
        item.setThumbPhotoSize(m_thumb_PhotoSize);
        qint32 m_dc_id;
        stream >> m_dc_id;
        item.setDcId(m_dc_id);
        QList<DocumentAttribute> m_attributes;
        stream >> m_attributes;
        item.setAttributes(m_attributes);
    }
        break;
    }
    return stream;
}


#endif // LQTG_TYPE_DECRYPTEDMESSAGEMEDIA
