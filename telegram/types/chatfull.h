// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#ifndef LQTG_TYPE_CHATFULL
#define LQTG_TYPE_CHATFULL

#include "telegramtypeobject.h"

#include <QMetaType>
#include <QVariant>
#include "core/inboundpkt.h"
#include "core/outboundpkt.h"
#include "../coretypes.h"

#include <QDataStream>

#include <QList>
#include "botinfo.h"
#include "photo.h"
#include "exportedchatinvite.h"
#include <QtGlobal>
#include "peernotifysettings.h"
#include "chatparticipants.h"

class LIBQTELEGRAMSHARED_EXPORT ChatFull : public TelegramTypeObject
{
public:
    enum ChatFullClassType {
        typeChatFull = 0x2e02a614
    };

    ChatFull(ChatFullClassType classType = typeChatFull, InboundPkt *in = 0);
    ChatFull(InboundPkt *in);
    ChatFull(const Null&);
    virtual ~ChatFull();

    void setBotInfo(const QList<BotInfo> &botInfo);
    QList<BotInfo> botInfo() const;

    void setChatPhoto(const Photo &chatPhoto);
    Photo chatPhoto() const;

    void setExportedInvite(const ExportedChatInvite &exportedInvite);
    ExportedChatInvite exportedInvite() const;

    void setId(qint32 id);
    qint32 id() const;

    void setNotifySettings(const PeerNotifySettings &notifySettings);
    PeerNotifySettings notifySettings() const;

    void setParticipants(const ChatParticipants &participants);
    ChatParticipants participants() const;

    void setClassType(ChatFullClassType classType);
    ChatFullClassType classType() const;

    bool fetch(InboundPkt *in);
    bool push(OutboundPkt *out) const;

    QMap<QString, QVariant> toMap() const;
    static ChatFull fromMap(const QMap<QString, QVariant> &map);

    bool operator ==(const ChatFull &b) const;

    bool operator==(bool stt) const { return isNull() != stt; }
    bool operator!=(bool stt) const { return !operator ==(stt); }

    QByteArray getHash(QCryptographicHash::Algorithm alg = QCryptographicHash::Md5) const;

private:
    QList<BotInfo> m_botInfo;
    Photo m_chatPhoto;
    ExportedChatInvite m_exportedInvite;
    qint32 m_id;
    PeerNotifySettings m_notifySettings;
    ChatParticipants m_participants;
    ChatFullClassType m_classType;
};

Q_DECLARE_METATYPE(ChatFull)

QDataStream LIBQTELEGRAMSHARED_EXPORT &operator<<(QDataStream &stream, const ChatFull &item);
QDataStream LIBQTELEGRAMSHARED_EXPORT &operator>>(QDataStream &stream, ChatFull &item);

inline ChatFull::ChatFull(ChatFullClassType classType, InboundPkt *in) :
    m_id(0),
    m_classType(classType)
{
    if(in) fetch(in);
}

inline ChatFull::ChatFull(InboundPkt *in) :
    m_id(0),
    m_classType(typeChatFull)
{
    fetch(in);
}

inline ChatFull::ChatFull(const Null &null) :
    TelegramTypeObject(null),
    m_id(0),
    m_classType(typeChatFull)
{
}

inline ChatFull::~ChatFull() {
}

inline void ChatFull::setBotInfo(const QList<BotInfo> &botInfo) {
    m_botInfo = botInfo;
}

inline QList<BotInfo> ChatFull::botInfo() const {
    return m_botInfo;
}

inline void ChatFull::setChatPhoto(const Photo &chatPhoto) {
    m_chatPhoto = chatPhoto;
}

inline Photo ChatFull::chatPhoto() const {
    return m_chatPhoto;
}

inline void ChatFull::setExportedInvite(const ExportedChatInvite &exportedInvite) {
    m_exportedInvite = exportedInvite;
}

inline ExportedChatInvite ChatFull::exportedInvite() const {
    return m_exportedInvite;
}

inline void ChatFull::setId(qint32 id) {
    m_id = id;
}

inline qint32 ChatFull::id() const {
    return m_id;
}

inline void ChatFull::setNotifySettings(const PeerNotifySettings &notifySettings) {
    m_notifySettings = notifySettings;
}

inline PeerNotifySettings ChatFull::notifySettings() const {
    return m_notifySettings;
}

inline void ChatFull::setParticipants(const ChatParticipants &participants) {
    m_participants = participants;
}

inline ChatParticipants ChatFull::participants() const {
    return m_participants;
}

inline bool ChatFull::operator ==(const ChatFull &b) const {
    return m_classType == b.m_classType &&
           m_botInfo == b.m_botInfo &&
           m_chatPhoto == b.m_chatPhoto &&
           m_exportedInvite == b.m_exportedInvite &&
           m_id == b.m_id &&
           m_notifySettings == b.m_notifySettings &&
           m_participants == b.m_participants;
}

inline void ChatFull::setClassType(ChatFull::ChatFullClassType classType) {
    m_classType = classType;
}

inline ChatFull::ChatFullClassType ChatFull::classType() const {
    return m_classType;
}

inline bool ChatFull::fetch(InboundPkt *in) {
    LQTG_FETCH_LOG;
    int x = in->fetchInt();
    switch(x) {
    case typeChatFull: {
        m_id = in->fetchInt();
        m_participants.fetch(in);
        m_chatPhoto.fetch(in);
        m_notifySettings.fetch(in);
        m_exportedInvite.fetch(in);
        if(in->fetchInt() != (qint32)CoreTypes::typeVector) return false;
        qint32 m_botInfo_length = in->fetchInt();
        m_botInfo.clear();
        for (qint32 i = 0; i < m_botInfo_length; i++) {
            BotInfo type;
            type.fetch(in);
            m_botInfo.append(type);
        }
        m_classType = static_cast<ChatFullClassType>(x);
        return true;
    }
        break;
    
    default:
        LQTG_FETCH_ASSERT;
        return false;
    }
}

inline bool ChatFull::push(OutboundPkt *out) const {
    out->appendInt(m_classType);
    switch(m_classType) {
    case typeChatFull: {
        out->appendInt(m_id);
        m_participants.push(out);
        m_chatPhoto.push(out);
        m_notifySettings.push(out);
        m_exportedInvite.push(out);
        out->appendInt(CoreTypes::typeVector);
        out->appendInt(m_botInfo.count());
        for (qint32 i = 0; i < m_botInfo.count(); i++) {
            m_botInfo[i].push(out);
        }
        return true;
    }
        break;
    
    default:
        return false;
    }
}

inline QMap<QString, QVariant> ChatFull::toMap() const {
    QMap<QString, QVariant> result;
    switch(static_cast<int>(m_classType)) {
    case typeChatFull: {
        result["classType"] = "ChatFull::typeChatFull";
        result["id"] = QVariant::fromValue<qint32>(id());
        result["participants"] = m_participants.toMap();
        result["chatPhoto"] = m_chatPhoto.toMap();
        result["notifySettings"] = m_notifySettings.toMap();
        result["exportedInvite"] = m_exportedInvite.toMap();
        QList<QVariant> _botInfo;
        Q_FOREACH(const BotInfo &m__type, m_botInfo)
            _botInfo << m__type.toMap();
        result["botInfo"] = _botInfo;
        return result;
    }
        break;
    
    default:
        return result;
    }
}

inline ChatFull ChatFull::fromMap(const QMap<QString, QVariant> &map) {
    ChatFull result;
    if(map.value("classType").toString() == "ChatFull::typeChatFull") {
        result.setClassType(typeChatFull);
        result.setId( map.value("id").value<qint32>() );
        result.setParticipants( ChatParticipants::fromMap(map.value("participants").toMap()) );
        result.setChatPhoto( Photo::fromMap(map.value("chatPhoto").toMap()) );
        result.setNotifySettings( PeerNotifySettings::fromMap(map.value("notifySettings").toMap()) );
        result.setExportedInvite( ExportedChatInvite::fromMap(map.value("exportedInvite").toMap()) );
        QList<QVariant> map_botInfo = map["botInfo"].toList();
        QList<BotInfo> _botInfo;
        Q_FOREACH(const QVariant &var, map_botInfo)
            _botInfo << BotInfo::fromMap(var.toMap());
        result.setBotInfo(_botInfo);
        return result;
    }
    return result;
}

inline QByteArray ChatFull::getHash(QCryptographicHash::Algorithm alg) const {
    QByteArray data;
    QDataStream str(&data, QIODevice::WriteOnly);
    str << *this;
    return QCryptographicHash::hash(data, alg);
}

inline QDataStream &operator<<(QDataStream &stream, const ChatFull &item) {
    stream << static_cast<uint>(item.classType());
    switch(item.classType()) {
    case ChatFull::typeChatFull:
        stream << item.id();
        stream << item.participants();
        stream << item.chatPhoto();
        stream << item.notifySettings();
        stream << item.exportedInvite();
        stream << item.botInfo();
        break;
    }
    return stream;
}

inline QDataStream &operator>>(QDataStream &stream, ChatFull &item) {
    uint type = 0;
    stream >> type;
    item.setClassType(static_cast<ChatFull::ChatFullClassType>(type));
    switch(type) {
    case ChatFull::typeChatFull: {
        qint32 m_id;
        stream >> m_id;
        item.setId(m_id);
        ChatParticipants m_participants;
        stream >> m_participants;
        item.setParticipants(m_participants);
        Photo m_chat_photo;
        stream >> m_chat_photo;
        item.setChatPhoto(m_chat_photo);
        PeerNotifySettings m_notify_settings;
        stream >> m_notify_settings;
        item.setNotifySettings(m_notify_settings);
        ExportedChatInvite m_exported_invite;
        stream >> m_exported_invite;
        item.setExportedInvite(m_exported_invite);
        QList<BotInfo> m_bot_info;
        stream >> m_bot_info;
        item.setBotInfo(m_bot_info);
    }
        break;
    }
    return stream;
}


#endif // LQTG_TYPE_CHATFULL
