// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#ifndef LQTG_TYPE_CONTACTSUGGESTED
#define LQTG_TYPE_CONTACTSUGGESTED

#include "telegramtypeobject.h"

#include <QMetaType>
#include <QVariant>
#include "core/inboundpkt.h"
#include "core/outboundpkt.h"
#include "../coretypes.h"

#include <QDataStream>

#include <QtGlobal>

class LIBQTELEGRAMSHARED_EXPORT ContactSuggested : public TelegramTypeObject
{
public:
    enum ContactSuggestedClassType {
        typeContactSuggested = 0x3de191a1
    };

    ContactSuggested(ContactSuggestedClassType classType = typeContactSuggested, InboundPkt *in = 0);
    ContactSuggested(InboundPkt *in);
    ContactSuggested(const Null&);
    virtual ~ContactSuggested();

    void setMutualContacts(qint32 mutualContacts);
    qint32 mutualContacts() const;

    void setUserId(qint32 userId);
    qint32 userId() const;

    void setClassType(ContactSuggestedClassType classType);
    ContactSuggestedClassType classType() const;

    bool fetch(InboundPkt *in);
    bool push(OutboundPkt *out) const;

    QMap<QString, QVariant> toMap() const;
    static ContactSuggested fromMap(const QMap<QString, QVariant> &map);

    bool operator ==(const ContactSuggested &b) const;

    bool operator==(bool stt) const { return isNull() != stt; }
    bool operator!=(bool stt) const { return !operator ==(stt); }

    QByteArray getHash(QCryptographicHash::Algorithm alg = QCryptographicHash::Md5) const;

private:
    qint32 m_mutualContacts;
    qint32 m_userId;
    ContactSuggestedClassType m_classType;
};

Q_DECLARE_METATYPE(ContactSuggested)

QDataStream LIBQTELEGRAMSHARED_EXPORT &operator<<(QDataStream &stream, const ContactSuggested &item);
QDataStream LIBQTELEGRAMSHARED_EXPORT &operator>>(QDataStream &stream, ContactSuggested &item);

inline ContactSuggested::ContactSuggested(ContactSuggestedClassType classType, InboundPkt *in) :
    m_mutualContacts(0),
    m_userId(0),
    m_classType(classType)
{
    if(in) fetch(in);
}

inline ContactSuggested::ContactSuggested(InboundPkt *in) :
    m_mutualContacts(0),
    m_userId(0),
    m_classType(typeContactSuggested)
{
    fetch(in);
}

inline ContactSuggested::ContactSuggested(const Null &null) :
    TelegramTypeObject(null),
    m_mutualContacts(0),
    m_userId(0),
    m_classType(typeContactSuggested)
{
}

inline ContactSuggested::~ContactSuggested() {
}

inline void ContactSuggested::setMutualContacts(qint32 mutualContacts) {
    m_mutualContacts = mutualContacts;
}

inline qint32 ContactSuggested::mutualContacts() const {
    return m_mutualContacts;
}

inline void ContactSuggested::setUserId(qint32 userId) {
    m_userId = userId;
}

inline qint32 ContactSuggested::userId() const {
    return m_userId;
}

inline bool ContactSuggested::operator ==(const ContactSuggested &b) const {
    return m_classType == b.m_classType &&
           m_mutualContacts == b.m_mutualContacts &&
           m_userId == b.m_userId;
}

inline void ContactSuggested::setClassType(ContactSuggested::ContactSuggestedClassType classType) {
    m_classType = classType;
}

inline ContactSuggested::ContactSuggestedClassType ContactSuggested::classType() const {
    return m_classType;
}

inline bool ContactSuggested::fetch(InboundPkt *in) {
    LQTG_FETCH_LOG;
    int x = in->fetchInt();
    switch(x) {
    case typeContactSuggested: {
        m_userId = in->fetchInt();
        m_mutualContacts = in->fetchInt();
        m_classType = static_cast<ContactSuggestedClassType>(x);
        return true;
    }
        break;
    
    default:
        LQTG_FETCH_ASSERT;
        return false;
    }
}

inline bool ContactSuggested::push(OutboundPkt *out) const {
    out->appendInt(m_classType);
    switch(m_classType) {
    case typeContactSuggested: {
        out->appendInt(m_userId);
        out->appendInt(m_mutualContacts);
        return true;
    }
        break;
    
    default:
        return false;
    }
}

inline QMap<QString, QVariant> ContactSuggested::toMap() const {
    QMap<QString, QVariant> result;
    switch(static_cast<int>(m_classType)) {
    case typeContactSuggested: {
        result["classType"] = "ContactSuggested::typeContactSuggested";
        result["userId"] = QVariant::fromValue<qint32>(userId());
        result["mutualContacts"] = QVariant::fromValue<qint32>(mutualContacts());
        return result;
    }
        break;
    
    default:
        return result;
    }
}

inline ContactSuggested ContactSuggested::fromMap(const QMap<QString, QVariant> &map) {
    ContactSuggested result;
    if(map.value("classType").toString() == "ContactSuggested::typeContactSuggested") {
        result.setClassType(typeContactSuggested);
        result.setUserId( map.value("userId").value<qint32>() );
        result.setMutualContacts( map.value("mutualContacts").value<qint32>() );
        return result;
    }
    return result;
}

inline QByteArray ContactSuggested::getHash(QCryptographicHash::Algorithm alg) const {
    QByteArray data;
    QDataStream str(&data, QIODevice::WriteOnly);
    str << *this;
    return QCryptographicHash::hash(data, alg);
}

inline QDataStream &operator<<(QDataStream &stream, const ContactSuggested &item) {
    stream << static_cast<uint>(item.classType());
    switch(item.classType()) {
    case ContactSuggested::typeContactSuggested:
        stream << item.userId();
        stream << item.mutualContacts();
        break;
    }
    return stream;
}

inline QDataStream &operator>>(QDataStream &stream, ContactSuggested &item) {
    uint type = 0;
    stream >> type;
    item.setClassType(static_cast<ContactSuggested::ContactSuggestedClassType>(type));
    switch(type) {
    case ContactSuggested::typeContactSuggested: {
        qint32 m_user_id;
        stream >> m_user_id;
        item.setUserId(m_user_id);
        qint32 m_mutual_contacts;
        stream >> m_mutual_contacts;
        item.setMutualContacts(m_mutual_contacts);
    }
        break;
    }
    return stream;
}


#endif // LQTG_TYPE_CONTACTSUGGESTED
