// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#ifndef LQTG_TYPE_GEOCHATSSTATEDMESSAGE_OBJECT
#define LQTG_TYPE_GEOCHATSSTATEDMESSAGE_OBJECT

#include "telegramtypeqobject.h"
#include "telegram/types/geochatsstatedmessage.h"

#include <QPointer>
#include "geochatmessageobject.h"

class LIBQTELEGRAMSHARED_EXPORT GeochatsStatedMessageObject : public TelegramTypeQObject
{
    Q_OBJECT
    Q_ENUMS(GeochatsStatedMessageClassType)
    Q_PROPERTY(QList<Chat> chats READ chats WRITE setChats NOTIFY chatsChanged)
    Q_PROPERTY(GeoChatMessageObject* message READ message WRITE setMessage NOTIFY messageChanged)
    Q_PROPERTY(qint32 seq READ seq WRITE setSeq NOTIFY seqChanged)
    Q_PROPERTY(QList<User> users READ users WRITE setUsers NOTIFY usersChanged)
    Q_PROPERTY(GeochatsStatedMessage core READ core WRITE setCore NOTIFY coreChanged)
    Q_PROPERTY(quint32 classType READ classType WRITE setClassType NOTIFY classTypeChanged)

public:
    enum GeochatsStatedMessageClassType {
        TypeGeochatsStatedMessage
    };

    GeochatsStatedMessageObject(const GeochatsStatedMessage &core, QObject *parent = 0);
    GeochatsStatedMessageObject(QObject *parent = 0);
    virtual ~GeochatsStatedMessageObject();

    void setChats(const QList<Chat> &chats);
    QList<Chat> chats() const;

    void setMessage(GeoChatMessageObject* message);
    GeoChatMessageObject* message() const;

    void setSeq(qint32 seq);
    qint32 seq() const;

    void setUsers(const QList<User> &users);
    QList<User> users() const;

    void setClassType(quint32 classType);
    quint32 classType() const;

    void setCore(const GeochatsStatedMessage &core);
    GeochatsStatedMessage core() const;

    GeochatsStatedMessageObject &operator =(const GeochatsStatedMessage &b);
    bool operator ==(const GeochatsStatedMessage &b) const;

Q_SIGNALS:
    void coreChanged();
    void classTypeChanged();
    void chatsChanged();
    void messageChanged();
    void seqChanged();
    void usersChanged();

private Q_SLOTS:
    void coreMessageChanged();

private:
    QPointer<GeoChatMessageObject> m_message;
    GeochatsStatedMessage m_core;
};

inline GeochatsStatedMessageObject::GeochatsStatedMessageObject(const GeochatsStatedMessage &core, QObject *parent) :
    TelegramTypeQObject(parent),
    m_message(0),
    m_core(core)
{
    m_message = new GeoChatMessageObject(m_core.message(), this);
    connect(m_message.data(), &GeoChatMessageObject::coreChanged, this, &GeochatsStatedMessageObject::coreMessageChanged);
}

inline GeochatsStatedMessageObject::GeochatsStatedMessageObject(QObject *parent) :
    TelegramTypeQObject(parent),
    m_message(0),
    m_core()
{
    m_message = new GeoChatMessageObject(m_core.message(), this);
    connect(m_message.data(), &GeoChatMessageObject::coreChanged, this, &GeochatsStatedMessageObject::coreMessageChanged);
}

inline GeochatsStatedMessageObject::~GeochatsStatedMessageObject() {
}

inline void GeochatsStatedMessageObject::setChats(const QList<Chat> &chats) {
    if(m_core.chats() == chats) return;
    m_core.setChats(chats);
    Q_EMIT chatsChanged();
    Q_EMIT coreChanged();
}

inline QList<Chat> GeochatsStatedMessageObject::chats() const {
    return m_core.chats();
}

inline void GeochatsStatedMessageObject::setMessage(GeoChatMessageObject* message) {
    if(m_message == message) return;
    if(m_message) delete m_message;
    m_message = message;
    if(m_message) {
        m_message->setParent(this);
        m_core.setMessage(m_message->core());
        connect(m_message.data(), &GeoChatMessageObject::coreChanged, this, &GeochatsStatedMessageObject::coreMessageChanged);
    }
    Q_EMIT messageChanged();
    Q_EMIT coreChanged();
}

inline GeoChatMessageObject*  GeochatsStatedMessageObject::message() const {
    return m_message;
}

inline void GeochatsStatedMessageObject::setSeq(qint32 seq) {
    if(m_core.seq() == seq) return;
    m_core.setSeq(seq);
    Q_EMIT seqChanged();
    Q_EMIT coreChanged();
}

inline qint32 GeochatsStatedMessageObject::seq() const {
    return m_core.seq();
}

inline void GeochatsStatedMessageObject::setUsers(const QList<User> &users) {
    if(m_core.users() == users) return;
    m_core.setUsers(users);
    Q_EMIT usersChanged();
    Q_EMIT coreChanged();
}

inline QList<User> GeochatsStatedMessageObject::users() const {
    return m_core.users();
}

inline GeochatsStatedMessageObject &GeochatsStatedMessageObject::operator =(const GeochatsStatedMessage &b) {
    if(m_core == b) return *this;
    m_core = b;
    m_message->setCore(b.message());

    Q_EMIT chatsChanged();
    Q_EMIT messageChanged();
    Q_EMIT seqChanged();
    Q_EMIT usersChanged();
    Q_EMIT coreChanged();
    return *this;
}

inline bool GeochatsStatedMessageObject::operator ==(const GeochatsStatedMessage &b) const {
    return m_core == b;
}

inline void GeochatsStatedMessageObject::setClassType(quint32 classType) {
    GeochatsStatedMessage::GeochatsStatedMessageClassType result;
    switch(classType) {
    case TypeGeochatsStatedMessage:
        result = GeochatsStatedMessage::typeGeochatsStatedMessage;
        break;
    default:
        result = GeochatsStatedMessage::typeGeochatsStatedMessage;
        break;
    }

    if(m_core.classType() == result) return;
    m_core.setClassType(result);
    Q_EMIT classTypeChanged();
    Q_EMIT coreChanged();
}

inline quint32 GeochatsStatedMessageObject::classType() const {
    int result;
    switch(static_cast<qint64>(m_core.classType())) {
    case GeochatsStatedMessage::typeGeochatsStatedMessage:
        result = TypeGeochatsStatedMessage;
        break;
    default:
        result = TypeGeochatsStatedMessage;
        break;
    }

    return result;
}

inline void GeochatsStatedMessageObject::setCore(const GeochatsStatedMessage &core) {
    operator =(core);
}

inline GeochatsStatedMessage GeochatsStatedMessageObject::core() const {
    return m_core;
}

inline void GeochatsStatedMessageObject::coreMessageChanged() {
    if(m_core.message() == m_message->core()) return;
    m_core.setMessage(m_message->core());
    Q_EMIT messageChanged();
    Q_EMIT coreChanged();
}

#endif // LQTG_TYPE_GEOCHATSSTATEDMESSAGE_OBJECT
