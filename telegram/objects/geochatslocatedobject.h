// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#ifndef LQTG_TYPE_GEOCHATSLOCATED_OBJECT
#define LQTG_TYPE_GEOCHATSLOCATED_OBJECT

#include "telegramtypeqobject.h"
#include "telegram/types/geochatslocated.h"

#include <QPointer>

class LIBQTELEGRAMSHARED_EXPORT GeochatsLocatedObject : public TelegramTypeQObject
{
    Q_OBJECT
    Q_ENUMS(GeochatsLocatedClassType)
    Q_PROPERTY(QList<Chat> chats READ chats WRITE setChats NOTIFY chatsChanged)
    Q_PROPERTY(QList<GeoChatMessage> messages READ messages WRITE setMessages NOTIFY messagesChanged)
    Q_PROPERTY(QList<ChatLocated> results READ results WRITE setResults NOTIFY resultsChanged)
    Q_PROPERTY(QList<User> users READ users WRITE setUsers NOTIFY usersChanged)
    Q_PROPERTY(GeochatsLocated core READ core WRITE setCore NOTIFY coreChanged)
    Q_PROPERTY(quint32 classType READ classType WRITE setClassType NOTIFY classTypeChanged)

public:
    enum GeochatsLocatedClassType {
        TypeGeochatsLocated
    };

    GeochatsLocatedObject(const GeochatsLocated &core, QObject *parent = 0);
    GeochatsLocatedObject(QObject *parent = 0);
    virtual ~GeochatsLocatedObject();

    void setChats(const QList<Chat> &chats);
    QList<Chat> chats() const;

    void setMessages(const QList<GeoChatMessage> &messages);
    QList<GeoChatMessage> messages() const;

    void setResults(const QList<ChatLocated> &results);
    QList<ChatLocated> results() const;

    void setUsers(const QList<User> &users);
    QList<User> users() const;

    void setClassType(quint32 classType);
    quint32 classType() const;

    void setCore(const GeochatsLocated &core);
    GeochatsLocated core() const;

    GeochatsLocatedObject &operator =(const GeochatsLocated &b);
    bool operator ==(const GeochatsLocated &b) const;

Q_SIGNALS:
    void coreChanged();
    void classTypeChanged();
    void chatsChanged();
    void messagesChanged();
    void resultsChanged();
    void usersChanged();

private Q_SLOTS:

private:
    GeochatsLocated m_core;
};

inline GeochatsLocatedObject::GeochatsLocatedObject(const GeochatsLocated &core, QObject *parent) :
    TelegramTypeQObject(parent),
    m_core(core)
{
}

inline GeochatsLocatedObject::GeochatsLocatedObject(QObject *parent) :
    TelegramTypeQObject(parent),
    m_core()
{
}

inline GeochatsLocatedObject::~GeochatsLocatedObject() {
}

inline void GeochatsLocatedObject::setChats(const QList<Chat> &chats) {
    if(m_core.chats() == chats) return;
    m_core.setChats(chats);
    Q_EMIT chatsChanged();
    Q_EMIT coreChanged();
}

inline QList<Chat> GeochatsLocatedObject::chats() const {
    return m_core.chats();
}

inline void GeochatsLocatedObject::setMessages(const QList<GeoChatMessage> &messages) {
    if(m_core.messages() == messages) return;
    m_core.setMessages(messages);
    Q_EMIT messagesChanged();
    Q_EMIT coreChanged();
}

inline QList<GeoChatMessage> GeochatsLocatedObject::messages() const {
    return m_core.messages();
}

inline void GeochatsLocatedObject::setResults(const QList<ChatLocated> &results) {
    if(m_core.results() == results) return;
    m_core.setResults(results);
    Q_EMIT resultsChanged();
    Q_EMIT coreChanged();
}

inline QList<ChatLocated> GeochatsLocatedObject::results() const {
    return m_core.results();
}

inline void GeochatsLocatedObject::setUsers(const QList<User> &users) {
    if(m_core.users() == users) return;
    m_core.setUsers(users);
    Q_EMIT usersChanged();
    Q_EMIT coreChanged();
}

inline QList<User> GeochatsLocatedObject::users() const {
    return m_core.users();
}

inline GeochatsLocatedObject &GeochatsLocatedObject::operator =(const GeochatsLocated &b) {
    if(m_core == b) return *this;
    m_core = b;

    Q_EMIT chatsChanged();
    Q_EMIT messagesChanged();
    Q_EMIT resultsChanged();
    Q_EMIT usersChanged();
    Q_EMIT coreChanged();
    return *this;
}

inline bool GeochatsLocatedObject::operator ==(const GeochatsLocated &b) const {
    return m_core == b;
}

inline void GeochatsLocatedObject::setClassType(quint32 classType) {
    GeochatsLocated::GeochatsLocatedClassType result;
    switch(classType) {
    case TypeGeochatsLocated:
        result = GeochatsLocated::typeGeochatsLocated;
        break;
    default:
        result = GeochatsLocated::typeGeochatsLocated;
        break;
    }

    if(m_core.classType() == result) return;
    m_core.setClassType(result);
    Q_EMIT classTypeChanged();
    Q_EMIT coreChanged();
}

inline quint32 GeochatsLocatedObject::classType() const {
    int result;
    switch(static_cast<qint64>(m_core.classType())) {
    case GeochatsLocated::typeGeochatsLocated:
        result = TypeGeochatsLocated;
        break;
    default:
        result = TypeGeochatsLocated;
        break;
    }

    return result;
}

inline void GeochatsLocatedObject::setCore(const GeochatsLocated &core) {
    operator =(core);
}

inline GeochatsLocated GeochatsLocatedObject::core() const {
    return m_core;
}

#endif // LQTG_TYPE_GEOCHATSLOCATED_OBJECT
