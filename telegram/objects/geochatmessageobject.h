// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#ifndef LQTG_TYPE_GEOCHATMESSAGE_OBJECT
#define LQTG_TYPE_GEOCHATMESSAGE_OBJECT

#include "telegramtypeqobject.h"
#include "telegram/types/geochatmessage.h"

#include <QPointer>
#include "messageactionobject.h"
#include "messagemediaobject.h"

class LIBQTELEGRAMSHARED_EXPORT GeoChatMessageObject : public TelegramTypeQObject
{
    Q_OBJECT
    Q_ENUMS(GeoChatMessageClassType)
    Q_PROPERTY(MessageActionObject* action READ action WRITE setAction NOTIFY actionChanged)
    Q_PROPERTY(qint32 chatId READ chatId WRITE setChatId NOTIFY chatIdChanged)
    Q_PROPERTY(qint32 date READ date WRITE setDate NOTIFY dateChanged)
    Q_PROPERTY(qint32 fromId READ fromId WRITE setFromId NOTIFY fromIdChanged)
    Q_PROPERTY(qint32 id READ id WRITE setId NOTIFY idChanged)
    Q_PROPERTY(MessageMediaObject* media READ media WRITE setMedia NOTIFY mediaChanged)
    Q_PROPERTY(QString message READ message WRITE setMessage NOTIFY messageChanged)
    Q_PROPERTY(GeoChatMessage core READ core WRITE setCore NOTIFY coreChanged)
    Q_PROPERTY(quint32 classType READ classType WRITE setClassType NOTIFY classTypeChanged)

public:
    enum GeoChatMessageClassType {
        TypeGeoChatMessageEmpty,
        TypeGeoChatMessage,
        TypeGeoChatMessageService
    };

    GeoChatMessageObject(const GeoChatMessage &core, QObject *parent = 0);
    GeoChatMessageObject(QObject *parent = 0);
    virtual ~GeoChatMessageObject();

    void setAction(MessageActionObject* action);
    MessageActionObject* action() const;

    void setChatId(qint32 chatId);
    qint32 chatId() const;

    void setDate(qint32 date);
    qint32 date() const;

    void setFromId(qint32 fromId);
    qint32 fromId() const;

    void setId(qint32 id);
    qint32 id() const;

    void setMedia(MessageMediaObject* media);
    MessageMediaObject* media() const;

    void setMessage(const QString &message);
    QString message() const;

    void setClassType(quint32 classType);
    quint32 classType() const;

    void setCore(const GeoChatMessage &core);
    GeoChatMessage core() const;

    GeoChatMessageObject &operator =(const GeoChatMessage &b);
    bool operator ==(const GeoChatMessage &b) const;

Q_SIGNALS:
    void coreChanged();
    void classTypeChanged();
    void actionChanged();
    void chatIdChanged();
    void dateChanged();
    void fromIdChanged();
    void idChanged();
    void mediaChanged();
    void messageChanged();

private Q_SLOTS:
    void coreActionChanged();
    void coreMediaChanged();

private:
    QPointer<MessageActionObject> m_action;
    QPointer<MessageMediaObject> m_media;
    GeoChatMessage m_core;
};

inline GeoChatMessageObject::GeoChatMessageObject(const GeoChatMessage &core, QObject *parent) :
    TelegramTypeQObject(parent),
    m_action(0),
    m_media(0),
    m_core(core)
{
    m_action = new MessageActionObject(m_core.action(), this);
    connect(m_action.data(), &MessageActionObject::coreChanged, this, &GeoChatMessageObject::coreActionChanged);
    m_media = new MessageMediaObject(m_core.media(), this);
    connect(m_media.data(), &MessageMediaObject::coreChanged, this, &GeoChatMessageObject::coreMediaChanged);
}

inline GeoChatMessageObject::GeoChatMessageObject(QObject *parent) :
    TelegramTypeQObject(parent),
    m_action(0),
    m_media(0),
    m_core()
{
    m_action = new MessageActionObject(m_core.action(), this);
    connect(m_action.data(), &MessageActionObject::coreChanged, this, &GeoChatMessageObject::coreActionChanged);
    m_media = new MessageMediaObject(m_core.media(), this);
    connect(m_media.data(), &MessageMediaObject::coreChanged, this, &GeoChatMessageObject::coreMediaChanged);
}

inline GeoChatMessageObject::~GeoChatMessageObject() {
}

inline void GeoChatMessageObject::setAction(MessageActionObject* action) {
    if(m_action == action) return;
    if(m_action) delete m_action;
    m_action = action;
    if(m_action) {
        m_action->setParent(this);
        m_core.setAction(m_action->core());
        connect(m_action.data(), &MessageActionObject::coreChanged, this, &GeoChatMessageObject::coreActionChanged);
    }
    Q_EMIT actionChanged();
    Q_EMIT coreChanged();
}

inline MessageActionObject*  GeoChatMessageObject::action() const {
    return m_action;
}

inline void GeoChatMessageObject::setChatId(qint32 chatId) {
    if(m_core.chatId() == chatId) return;
    m_core.setChatId(chatId);
    Q_EMIT chatIdChanged();
    Q_EMIT coreChanged();
}

inline qint32 GeoChatMessageObject::chatId() const {
    return m_core.chatId();
}

inline void GeoChatMessageObject::setDate(qint32 date) {
    if(m_core.date() == date) return;
    m_core.setDate(date);
    Q_EMIT dateChanged();
    Q_EMIT coreChanged();
}

inline qint32 GeoChatMessageObject::date() const {
    return m_core.date();
}

inline void GeoChatMessageObject::setFromId(qint32 fromId) {
    if(m_core.fromId() == fromId) return;
    m_core.setFromId(fromId);
    Q_EMIT fromIdChanged();
    Q_EMIT coreChanged();
}

inline qint32 GeoChatMessageObject::fromId() const {
    return m_core.fromId();
}

inline void GeoChatMessageObject::setId(qint32 id) {
    if(m_core.id() == id) return;
    m_core.setId(id);
    Q_EMIT idChanged();
    Q_EMIT coreChanged();
}

inline qint32 GeoChatMessageObject::id() const {
    return m_core.id();
}

inline void GeoChatMessageObject::setMedia(MessageMediaObject* media) {
    if(m_media == media) return;
    if(m_media) delete m_media;
    m_media = media;
    if(m_media) {
        m_media->setParent(this);
        m_core.setMedia(m_media->core());
        connect(m_media.data(), &MessageMediaObject::coreChanged, this, &GeoChatMessageObject::coreMediaChanged);
    }
    Q_EMIT mediaChanged();
    Q_EMIT coreChanged();
}

inline MessageMediaObject*  GeoChatMessageObject::media() const {
    return m_media;
}

inline void GeoChatMessageObject::setMessage(const QString &message) {
    if(m_core.message() == message) return;
    m_core.setMessage(message);
    Q_EMIT messageChanged();
    Q_EMIT coreChanged();
}

inline QString GeoChatMessageObject::message() const {
    return m_core.message();
}

inline GeoChatMessageObject &GeoChatMessageObject::operator =(const GeoChatMessage &b) {
    if(m_core == b) return *this;
    m_core = b;
    m_action->setCore(b.action());
    m_media->setCore(b.media());

    Q_EMIT actionChanged();
    Q_EMIT chatIdChanged();
    Q_EMIT dateChanged();
    Q_EMIT fromIdChanged();
    Q_EMIT idChanged();
    Q_EMIT mediaChanged();
    Q_EMIT messageChanged();
    Q_EMIT coreChanged();
    return *this;
}

inline bool GeoChatMessageObject::operator ==(const GeoChatMessage &b) const {
    return m_core == b;
}

inline void GeoChatMessageObject::setClassType(quint32 classType) {
    GeoChatMessage::GeoChatMessageClassType result;
    switch(classType) {
    case TypeGeoChatMessageEmpty:
        result = GeoChatMessage::typeGeoChatMessageEmpty;
        break;
    case TypeGeoChatMessage:
        result = GeoChatMessage::typeGeoChatMessage;
        break;
    case TypeGeoChatMessageService:
        result = GeoChatMessage::typeGeoChatMessageService;
        break;
    default:
        result = GeoChatMessage::typeGeoChatMessageEmpty;
        break;
    }

    if(m_core.classType() == result) return;
    m_core.setClassType(result);
    Q_EMIT classTypeChanged();
    Q_EMIT coreChanged();
}

inline quint32 GeoChatMessageObject::classType() const {
    int result;
    switch(static_cast<qint64>(m_core.classType())) {
    case GeoChatMessage::typeGeoChatMessageEmpty:
        result = TypeGeoChatMessageEmpty;
        break;
    case GeoChatMessage::typeGeoChatMessage:
        result = TypeGeoChatMessage;
        break;
    case GeoChatMessage::typeGeoChatMessageService:
        result = TypeGeoChatMessageService;
        break;
    default:
        result = TypeGeoChatMessageEmpty;
        break;
    }

    return result;
}

inline void GeoChatMessageObject::setCore(const GeoChatMessage &core) {
    operator =(core);
}

inline GeoChatMessage GeoChatMessageObject::core() const {
    return m_core;
}

inline void GeoChatMessageObject::coreActionChanged() {
    if(m_core.action() == m_action->core()) return;
    m_core.setAction(m_action->core());
    Q_EMIT actionChanged();
    Q_EMIT coreChanged();
}

inline void GeoChatMessageObject::coreMediaChanged() {
    if(m_core.media() == m_media->core()) return;
    m_core.setMedia(m_media->core());
    Q_EMIT mediaChanged();
    Q_EMIT coreChanged();
}

#endif // LQTG_TYPE_GEOCHATMESSAGE_OBJECT
