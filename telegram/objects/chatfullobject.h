// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#ifndef LQTG_TYPE_CHATFULL_OBJECT
#define LQTG_TYPE_CHATFULL_OBJECT

#include "telegramtypeqobject.h"
#include "telegram/types/chatfull.h"

#include <QPointer>
#include "photoobject.h"
#include "exportedchatinviteobject.h"
#include "peernotifysettingsobject.h"
#include "chatparticipantsobject.h"

class LIBQTELEGRAMSHARED_EXPORT ChatFullObject : public TelegramTypeQObject
{
    Q_OBJECT
    Q_ENUMS(ChatFullClassType)
    Q_PROPERTY(PhotoObject* chatPhoto READ chatPhoto WRITE setChatPhoto NOTIFY chatPhotoChanged)
    Q_PROPERTY(ExportedChatInviteObject* exportedInvite READ exportedInvite WRITE setExportedInvite NOTIFY exportedInviteChanged)
    Q_PROPERTY(qint32 id READ id WRITE setId NOTIFY idChanged)
    Q_PROPERTY(PeerNotifySettingsObject* notifySettings READ notifySettings WRITE setNotifySettings NOTIFY notifySettingsChanged)
    Q_PROPERTY(ChatParticipantsObject* participants READ participants WRITE setParticipants NOTIFY participantsChanged)
    Q_PROPERTY(ChatFull core READ core WRITE setCore NOTIFY coreChanged)
    Q_PROPERTY(quint32 classType READ classType WRITE setClassType NOTIFY classTypeChanged)

public:
    enum ChatFullClassType {
        TypeChatFull
    };

    ChatFullObject(const ChatFull &core, QObject *parent = 0);
    ChatFullObject(QObject *parent = 0);
    virtual ~ChatFullObject();

    void setChatPhoto(PhotoObject* chatPhoto);
    PhotoObject* chatPhoto() const;

    void setExportedInvite(ExportedChatInviteObject* exportedInvite);
    ExportedChatInviteObject* exportedInvite() const;

    void setId(qint32 id);
    qint32 id() const;

    void setNotifySettings(PeerNotifySettingsObject* notifySettings);
    PeerNotifySettingsObject* notifySettings() const;

    void setParticipants(ChatParticipantsObject* participants);
    ChatParticipantsObject* participants() const;

    void setClassType(quint32 classType);
    quint32 classType() const;

    void setCore(const ChatFull &core);
    ChatFull core() const;

    ChatFullObject &operator =(const ChatFull &b);
    bool operator ==(const ChatFull &b) const;

Q_SIGNALS:
    void coreChanged();
    void classTypeChanged();
    void chatPhotoChanged();
    void exportedInviteChanged();
    void idChanged();
    void notifySettingsChanged();
    void participantsChanged();

private Q_SLOTS:
    void coreChatPhotoChanged();
    void coreExportedInviteChanged();
    void coreNotifySettingsChanged();
    void coreParticipantsChanged();

private:
    QPointer<PhotoObject> m_chatPhoto;
    QPointer<ExportedChatInviteObject> m_exportedInvite;
    QPointer<PeerNotifySettingsObject> m_notifySettings;
    QPointer<ChatParticipantsObject> m_participants;
    ChatFull m_core;
};

inline ChatFullObject::ChatFullObject(const ChatFull &core, QObject *parent) :
    TelegramTypeQObject(parent),
    m_chatPhoto(0),
    m_exportedInvite(0),
    m_notifySettings(0),
    m_participants(0),
    m_core(core)
{
    m_chatPhoto = new PhotoObject(m_core.chatPhoto(), this);
    connect(m_chatPhoto.data(), &PhotoObject::coreChanged, this, &ChatFullObject::coreChatPhotoChanged);
    m_exportedInvite = new ExportedChatInviteObject(m_core.exportedInvite(), this);
    connect(m_exportedInvite.data(), &ExportedChatInviteObject::coreChanged, this, &ChatFullObject::coreExportedInviteChanged);
    m_notifySettings = new PeerNotifySettingsObject(m_core.notifySettings(), this);
    connect(m_notifySettings.data(), &PeerNotifySettingsObject::coreChanged, this, &ChatFullObject::coreNotifySettingsChanged);
    m_participants = new ChatParticipantsObject(m_core.participants(), this);
    connect(m_participants.data(), &ChatParticipantsObject::coreChanged, this, &ChatFullObject::coreParticipantsChanged);
}

inline ChatFullObject::ChatFullObject(QObject *parent) :
    TelegramTypeQObject(parent),
    m_chatPhoto(0),
    m_exportedInvite(0),
    m_notifySettings(0),
    m_participants(0),
    m_core()
{
    m_chatPhoto = new PhotoObject(m_core.chatPhoto(), this);
    connect(m_chatPhoto.data(), &PhotoObject::coreChanged, this, &ChatFullObject::coreChatPhotoChanged);
    m_exportedInvite = new ExportedChatInviteObject(m_core.exportedInvite(), this);
    connect(m_exportedInvite.data(), &ExportedChatInviteObject::coreChanged, this, &ChatFullObject::coreExportedInviteChanged);
    m_notifySettings = new PeerNotifySettingsObject(m_core.notifySettings(), this);
    connect(m_notifySettings.data(), &PeerNotifySettingsObject::coreChanged, this, &ChatFullObject::coreNotifySettingsChanged);
    m_participants = new ChatParticipantsObject(m_core.participants(), this);
    connect(m_participants.data(), &ChatParticipantsObject::coreChanged, this, &ChatFullObject::coreParticipantsChanged);
}

inline ChatFullObject::~ChatFullObject() {
}

inline void ChatFullObject::setChatPhoto(PhotoObject* chatPhoto) {
    if(m_chatPhoto == chatPhoto) return;
    if(m_chatPhoto) delete m_chatPhoto;
    m_chatPhoto = chatPhoto;
    if(m_chatPhoto) {
        m_chatPhoto->setParent(this);
        m_core.setChatPhoto(m_chatPhoto->core());
        connect(m_chatPhoto.data(), &PhotoObject::coreChanged, this, &ChatFullObject::coreChatPhotoChanged);
    }
    Q_EMIT chatPhotoChanged();
    Q_EMIT coreChanged();
}

inline PhotoObject*  ChatFullObject::chatPhoto() const {
    return m_chatPhoto;
}

inline void ChatFullObject::setExportedInvite(ExportedChatInviteObject* exportedInvite) {
    if(m_exportedInvite == exportedInvite) return;
    if(m_exportedInvite) delete m_exportedInvite;
    m_exportedInvite = exportedInvite;
    if(m_exportedInvite) {
        m_exportedInvite->setParent(this);
        m_core.setExportedInvite(m_exportedInvite->core());
        connect(m_exportedInvite.data(), &ExportedChatInviteObject::coreChanged, this, &ChatFullObject::coreExportedInviteChanged);
    }
    Q_EMIT exportedInviteChanged();
    Q_EMIT coreChanged();
}

inline ExportedChatInviteObject*  ChatFullObject::exportedInvite() const {
    return m_exportedInvite;
}

inline void ChatFullObject::setId(qint32 id) {
    if(m_core.id() == id) return;
    m_core.setId(id);
    Q_EMIT idChanged();
    Q_EMIT coreChanged();
}

inline qint32 ChatFullObject::id() const {
    return m_core.id();
}

inline void ChatFullObject::setNotifySettings(PeerNotifySettingsObject* notifySettings) {
    if(m_notifySettings == notifySettings) return;
    if(m_notifySettings) delete m_notifySettings;
    m_notifySettings = notifySettings;
    if(m_notifySettings) {
        m_notifySettings->setParent(this);
        m_core.setNotifySettings(m_notifySettings->core());
        connect(m_notifySettings.data(), &PeerNotifySettingsObject::coreChanged, this, &ChatFullObject::coreNotifySettingsChanged);
    }
    Q_EMIT notifySettingsChanged();
    Q_EMIT coreChanged();
}

inline PeerNotifySettingsObject*  ChatFullObject::notifySettings() const {
    return m_notifySettings;
}

inline void ChatFullObject::setParticipants(ChatParticipantsObject* participants) {
    if(m_participants == participants) return;
    if(m_participants) delete m_participants;
    m_participants = participants;
    if(m_participants) {
        m_participants->setParent(this);
        m_core.setParticipants(m_participants->core());
        connect(m_participants.data(), &ChatParticipantsObject::coreChanged, this, &ChatFullObject::coreParticipantsChanged);
    }
    Q_EMIT participantsChanged();
    Q_EMIT coreChanged();
}

inline ChatParticipantsObject*  ChatFullObject::participants() const {
    return m_participants;
}

inline ChatFullObject &ChatFullObject::operator =(const ChatFull &b) {
    if(m_core == b) return *this;
    m_core = b;
    m_chatPhoto->setCore(b.chatPhoto());
    m_exportedInvite->setCore(b.exportedInvite());
    m_notifySettings->setCore(b.notifySettings());
    m_participants->setCore(b.participants());

    Q_EMIT chatPhotoChanged();
    Q_EMIT exportedInviteChanged();
    Q_EMIT idChanged();
    Q_EMIT notifySettingsChanged();
    Q_EMIT participantsChanged();
    Q_EMIT coreChanged();
    return *this;
}

inline bool ChatFullObject::operator ==(const ChatFull &b) const {
    return m_core == b;
}

inline void ChatFullObject::setClassType(quint32 classType) {
    ChatFull::ChatFullClassType result;
    switch(classType) {
    case TypeChatFull:
        result = ChatFull::typeChatFull;
        break;
    default:
        result = ChatFull::typeChatFull;
        break;
    }

    if(m_core.classType() == result) return;
    m_core.setClassType(result);
    Q_EMIT classTypeChanged();
    Q_EMIT coreChanged();
}

inline quint32 ChatFullObject::classType() const {
    int result;
    switch(static_cast<qint64>(m_core.classType())) {
    case ChatFull::typeChatFull:
        result = TypeChatFull;
        break;
    default:
        result = TypeChatFull;
        break;
    }

    return result;
}

inline void ChatFullObject::setCore(const ChatFull &core) {
    operator =(core);
}

inline ChatFull ChatFullObject::core() const {
    return m_core;
}

inline void ChatFullObject::coreChatPhotoChanged() {
    if(m_core.chatPhoto() == m_chatPhoto->core()) return;
    m_core.setChatPhoto(m_chatPhoto->core());
    Q_EMIT chatPhotoChanged();
    Q_EMIT coreChanged();
}

inline void ChatFullObject::coreExportedInviteChanged() {
    if(m_core.exportedInvite() == m_exportedInvite->core()) return;
    m_core.setExportedInvite(m_exportedInvite->core());
    Q_EMIT exportedInviteChanged();
    Q_EMIT coreChanged();
}

inline void ChatFullObject::coreNotifySettingsChanged() {
    if(m_core.notifySettings() == m_notifySettings->core()) return;
    m_core.setNotifySettings(m_notifySettings->core());
    Q_EMIT notifySettingsChanged();
    Q_EMIT coreChanged();
}

inline void ChatFullObject::coreParticipantsChanged() {
    if(m_core.participants() == m_participants->core()) return;
    m_core.setParticipants(m_participants->core());
    Q_EMIT participantsChanged();
    Q_EMIT coreChanged();
}

#endif // LQTG_TYPE_CHATFULL_OBJECT
