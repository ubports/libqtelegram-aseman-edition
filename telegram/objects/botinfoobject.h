// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#ifndef LQTG_TYPE_BOTINFO_OBJECT
#define LQTG_TYPE_BOTINFO_OBJECT

#include "telegramtypeqobject.h"
#include "telegram/types/botinfo.h"

#include <QPointer>

class LIBQTELEGRAMSHARED_EXPORT BotInfoObject : public TelegramTypeQObject
{
    Q_OBJECT
    Q_ENUMS(BotInfoClassType)
    Q_PROPERTY(QList<BotCommand> commands READ commands WRITE setCommands NOTIFY commandsChanged)
    Q_PROPERTY(QString description READ description WRITE setDescription NOTIFY descriptionChanged)
    Q_PROPERTY(QString shareText READ shareText WRITE setShareText NOTIFY shareTextChanged)
    Q_PROPERTY(qint32 userId READ userId WRITE setUserId NOTIFY userIdChanged)
    Q_PROPERTY(qint32 version READ version WRITE setVersion NOTIFY versionChanged)
    Q_PROPERTY(BotInfo core READ core WRITE setCore NOTIFY coreChanged)
    Q_PROPERTY(quint32 classType READ classType WRITE setClassType NOTIFY classTypeChanged)

public:
    enum BotInfoClassType {
        TypeBotInfoEmpty,
        TypeBotInfo
    };

    BotInfoObject(const BotInfo &core, QObject *parent = 0);
    BotInfoObject(QObject *parent = 0);
    virtual ~BotInfoObject();

    void setCommands(const QList<BotCommand> &commands);
    QList<BotCommand> commands() const;

    void setDescription(const QString &description);
    QString description() const;

    void setShareText(const QString &shareText);
    QString shareText() const;

    void setUserId(qint32 userId);
    qint32 userId() const;

    void setVersion(qint32 version);
    qint32 version() const;

    void setClassType(quint32 classType);
    quint32 classType() const;

    void setCore(const BotInfo &core);
    BotInfo core() const;

    BotInfoObject &operator =(const BotInfo &b);
    bool operator ==(const BotInfo &b) const;

Q_SIGNALS:
    void coreChanged();
    void classTypeChanged();
    void commandsChanged();
    void descriptionChanged();
    void shareTextChanged();
    void userIdChanged();
    void versionChanged();

private Q_SLOTS:

private:
    BotInfo m_core;
};

inline BotInfoObject::BotInfoObject(const BotInfo &core, QObject *parent) :
    TelegramTypeQObject(parent),
    m_core(core)
{
}

inline BotInfoObject::BotInfoObject(QObject *parent) :
    TelegramTypeQObject(parent),
    m_core()
{
}

inline BotInfoObject::~BotInfoObject() {
}

inline void BotInfoObject::setCommands(const QList<BotCommand> &commands) {
    if(m_core.commands() == commands) return;
    m_core.setCommands(commands);
    Q_EMIT commandsChanged();
    Q_EMIT coreChanged();
}

inline QList<BotCommand> BotInfoObject::commands() const {
    return m_core.commands();
}

inline void BotInfoObject::setDescription(const QString &description) {
    if(m_core.description() == description) return;
    m_core.setDescription(description);
    Q_EMIT descriptionChanged();
    Q_EMIT coreChanged();
}

inline QString BotInfoObject::description() const {
    return m_core.description();
}

inline void BotInfoObject::setShareText(const QString &shareText) {
    if(m_core.shareText() == shareText) return;
    m_core.setShareText(shareText);
    Q_EMIT shareTextChanged();
    Q_EMIT coreChanged();
}

inline QString BotInfoObject::shareText() const {
    return m_core.shareText();
}

inline void BotInfoObject::setUserId(qint32 userId) {
    if(m_core.userId() == userId) return;
    m_core.setUserId(userId);
    Q_EMIT userIdChanged();
    Q_EMIT coreChanged();
}

inline qint32 BotInfoObject::userId() const {
    return m_core.userId();
}

inline void BotInfoObject::setVersion(qint32 version) {
    if(m_core.version() == version) return;
    m_core.setVersion(version);
    Q_EMIT versionChanged();
    Q_EMIT coreChanged();
}

inline qint32 BotInfoObject::version() const {
    return m_core.version();
}

inline BotInfoObject &BotInfoObject::operator =(const BotInfo &b) {
    if(m_core == b) return *this;
    m_core = b;

    Q_EMIT commandsChanged();
    Q_EMIT descriptionChanged();
    Q_EMIT shareTextChanged();
    Q_EMIT userIdChanged();
    Q_EMIT versionChanged();
    Q_EMIT coreChanged();
    return *this;
}

inline bool BotInfoObject::operator ==(const BotInfo &b) const {
    return m_core == b;
}

inline void BotInfoObject::setClassType(quint32 classType) {
    BotInfo::BotInfoClassType result;
    switch(classType) {
    case TypeBotInfoEmpty:
        result = BotInfo::typeBotInfoEmpty;
        break;
    case TypeBotInfo:
        result = BotInfo::typeBotInfo;
        break;
    default:
        result = BotInfo::typeBotInfoEmpty;
        break;
    }

    if(m_core.classType() == result) return;
    m_core.setClassType(result);
    Q_EMIT classTypeChanged();
    Q_EMIT coreChanged();
}

inline quint32 BotInfoObject::classType() const {
    int result;
    switch(static_cast<qint64>(m_core.classType())) {
    case BotInfo::typeBotInfoEmpty:
        result = TypeBotInfoEmpty;
        break;
    case BotInfo::typeBotInfo:
        result = TypeBotInfo;
        break;
    default:
        result = TypeBotInfoEmpty;
        break;
    }

    return result;
}

inline void BotInfoObject::setCore(const BotInfo &core) {
    operator =(core);
}

inline BotInfo BotInfoObject::core() const {
    return m_core;
}

#endif // LQTG_TYPE_BOTINFO_OBJECT
