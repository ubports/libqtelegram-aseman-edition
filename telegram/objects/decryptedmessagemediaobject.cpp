// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "decryptedmessagemediaobject.h"

DecryptedMessageMediaObject::DecryptedMessageMediaObject(const DecryptedMessageMedia &core, QObject *parent) :
    TelegramTypeQObject(parent),
    m_thumbPhotoSize(0),
    m_core(core)
{
    m_thumbPhotoSize = new PhotoSizeObject(m_core.thumbPhotoSize(), this);
    connect(m_thumbPhotoSize.data(), &PhotoSizeObject::coreChanged, this, &DecryptedMessageMediaObject::coreThumbPhotoSizeChanged);
}

DecryptedMessageMediaObject::DecryptedMessageMediaObject(QObject *parent) :
    TelegramTypeQObject(parent),
    m_thumbPhotoSize(0),
    m_core()
{
    m_thumbPhotoSize = new PhotoSizeObject(m_core.thumbPhotoSize(), this);
    connect(m_thumbPhotoSize.data(), &PhotoSizeObject::coreChanged, this, &DecryptedMessageMediaObject::coreThumbPhotoSizeChanged);
}

DecryptedMessageMediaObject::~DecryptedMessageMediaObject() {
}

void DecryptedMessageMediaObject::setAccessHash(qint64 accessHash) {
    if(m_core.accessHash() == accessHash) return;
    m_core.setAccessHash(accessHash);
    Q_EMIT accessHashChanged();
    Q_EMIT coreChanged();
}

qint64 DecryptedMessageMediaObject::accessHash() const {
    return m_core.accessHash();
}

void DecryptedMessageMediaObject::setAttributes(const QList<DocumentAttribute> &attributes) {
    if(m_core.attributes() == attributes) return;
    m_core.setAttributes(attributes);
    Q_EMIT attributesChanged();
    Q_EMIT coreChanged();
}

QList<DocumentAttribute> DecryptedMessageMediaObject::attributes() const {
    return m_core.attributes();
}

void DecryptedMessageMediaObject::setDate(qint32 date) {
    if(m_core.date() == date) return;
    m_core.setDate(date);
    Q_EMIT dateChanged();
    Q_EMIT coreChanged();
}

qint32 DecryptedMessageMediaObject::date() const {
    return m_core.date();
}

void DecryptedMessageMediaObject::setDcId(qint32 dcId) {
    if(m_core.dcId() == dcId) return;
    m_core.setDcId(dcId);
    Q_EMIT dcIdChanged();
    Q_EMIT coreChanged();
}

qint32 DecryptedMessageMediaObject::dcId() const {
    return m_core.dcId();
}

void DecryptedMessageMediaObject::setDuration(qint32 duration) {
    if(m_core.duration() == duration) return;
    m_core.setDuration(duration);
    Q_EMIT durationChanged();
    Q_EMIT coreChanged();
}

qint32 DecryptedMessageMediaObject::duration() const {
    return m_core.duration();
}

void DecryptedMessageMediaObject::setFileName(const QString &fileName) {
    if(m_core.fileName() == fileName) return;
    m_core.setFileName(fileName);
    Q_EMIT fileNameChanged();
    Q_EMIT coreChanged();
}

QString DecryptedMessageMediaObject::fileName() const {
    return m_core.fileName();
}

void DecryptedMessageMediaObject::setFirstName(const QString &firstName) {
    if(m_core.firstName() == firstName) return;
    m_core.setFirstName(firstName);
    Q_EMIT firstNameChanged();
    Q_EMIT coreChanged();
}

QString DecryptedMessageMediaObject::firstName() const {
    return m_core.firstName();
}

void DecryptedMessageMediaObject::setH(qint32 h) {
    if(m_core.h() == h) return;
    m_core.setH(h);
    Q_EMIT hChanged();
    Q_EMIT coreChanged();
}

qint32 DecryptedMessageMediaObject::h() const {
    return m_core.h();
}

void DecryptedMessageMediaObject::setId(qint64 id) {
    if(m_core.id() == id) return;
    m_core.setId(id);
    Q_EMIT idChanged();
    Q_EMIT coreChanged();
}

qint64 DecryptedMessageMediaObject::id() const {
    return m_core.id();
}

void DecryptedMessageMediaObject::setIv(const QByteArray &iv) {
    if(m_core.iv() == iv) return;
    m_core.setIv(iv);
    Q_EMIT ivChanged();
    Q_EMIT coreChanged();
}

QByteArray DecryptedMessageMediaObject::iv() const {
    return m_core.iv();
}

void DecryptedMessageMediaObject::setKey(const QByteArray &key) {
    if(m_core.key() == key) return;
    m_core.setKey(key);
    Q_EMIT keyChanged();
    Q_EMIT coreChanged();
}

QByteArray DecryptedMessageMediaObject::key() const {
    return m_core.key();
}

void DecryptedMessageMediaObject::setLastName(const QString &lastName) {
    if(m_core.lastName() == lastName) return;
    m_core.setLastName(lastName);
    Q_EMIT lastNameChanged();
    Q_EMIT coreChanged();
}

QString DecryptedMessageMediaObject::lastName() const {
    return m_core.lastName();
}

void DecryptedMessageMediaObject::setLat(qreal lat) {
    if(m_core.lat() == lat) return;
    m_core.setLat(lat);
    Q_EMIT latChanged();
    Q_EMIT coreChanged();
}

qreal DecryptedMessageMediaObject::lat() const {
    return m_core.lat();
}

void DecryptedMessageMediaObject::setLongValue(qreal longValue) {
    if(m_core.longValue() == longValue) return;
    m_core.setLongValue(longValue);
    Q_EMIT longValueChanged();
    Q_EMIT coreChanged();
}

qreal DecryptedMessageMediaObject::longValue() const {
    return m_core.longValue();
}

void DecryptedMessageMediaObject::setMimeType(const QString &mimeType) {
    if(m_core.mimeType() == mimeType) return;
    m_core.setMimeType(mimeType);
    Q_EMIT mimeTypeChanged();
    Q_EMIT coreChanged();
}

QString DecryptedMessageMediaObject::mimeType() const {
    return m_core.mimeType();
}

void DecryptedMessageMediaObject::setPhoneNumber(const QString &phoneNumber) {
    if(m_core.phoneNumber() == phoneNumber) return;
    m_core.setPhoneNumber(phoneNumber);
    Q_EMIT phoneNumberChanged();
    Q_EMIT coreChanged();
}

QString DecryptedMessageMediaObject::phoneNumber() const {
    return m_core.phoneNumber();
}

void DecryptedMessageMediaObject::setSize(qint32 size) {
    if(m_core.size() == size) return;
    m_core.setSize(size);
    Q_EMIT sizeChanged();
    Q_EMIT coreChanged();
}

qint32 DecryptedMessageMediaObject::size() const {
    return m_core.size();
}

void DecryptedMessageMediaObject::setThumbPhotoSize(PhotoSizeObject* thumbPhotoSize) {
    if(m_thumbPhotoSize == thumbPhotoSize) return;
    if(m_thumbPhotoSize) delete m_thumbPhotoSize;
    m_thumbPhotoSize = thumbPhotoSize;
    if(m_thumbPhotoSize) {
        m_thumbPhotoSize->setParent(this);
        m_core.setThumbPhotoSize(m_thumbPhotoSize->core());
        connect(m_thumbPhotoSize.data(), &PhotoSizeObject::coreChanged, this, &DecryptedMessageMediaObject::coreThumbPhotoSizeChanged);
    }
    Q_EMIT thumbPhotoSizeChanged();
    Q_EMIT coreChanged();
}

PhotoSizeObject*  DecryptedMessageMediaObject::thumbPhotoSize() const {
    return m_thumbPhotoSize;
}

void DecryptedMessageMediaObject::setThumbBytes(const QByteArray &thumbBytes) {
    if(m_core.thumbBytes() == thumbBytes) return;
    m_core.setThumbBytes(thumbBytes);
    Q_EMIT thumbBytesChanged();
    Q_EMIT coreChanged();
}

QByteArray DecryptedMessageMediaObject::thumbBytes() const {
    return m_core.thumbBytes();
}

void DecryptedMessageMediaObject::setThumbH(qint32 thumbH) {
    if(m_core.thumbH() == thumbH) return;
    m_core.setThumbH(thumbH);
    Q_EMIT thumbHChanged();
    Q_EMIT coreChanged();
}

qint32 DecryptedMessageMediaObject::thumbH() const {
    return m_core.thumbH();
}

void DecryptedMessageMediaObject::setThumbW(qint32 thumbW) {
    if(m_core.thumbW() == thumbW) return;
    m_core.setThumbW(thumbW);
    Q_EMIT thumbWChanged();
    Q_EMIT coreChanged();
}

qint32 DecryptedMessageMediaObject::thumbW() const {
    return m_core.thumbW();
}

void DecryptedMessageMediaObject::setUserId(qint32 userId) {
    if(m_core.userId() == userId) return;
    m_core.setUserId(userId);
    Q_EMIT userIdChanged();
    Q_EMIT coreChanged();
}

qint32 DecryptedMessageMediaObject::userId() const {
    return m_core.userId();
}

void DecryptedMessageMediaObject::setW(qint32 w) {
    if(m_core.w() == w) return;
    m_core.setW(w);
    Q_EMIT wChanged();
    Q_EMIT coreChanged();
}

qint32 DecryptedMessageMediaObject::w() const {
    return m_core.w();
}

DecryptedMessageMediaObject &DecryptedMessageMediaObject::operator =(const DecryptedMessageMedia &b) {
    if(m_core == b) return *this;
    m_core = b;
    m_thumbPhotoSize->setCore(b.thumbPhotoSize());

    Q_EMIT accessHashChanged();
    Q_EMIT attributesChanged();
    Q_EMIT dateChanged();
    Q_EMIT dcIdChanged();
    Q_EMIT durationChanged();
    Q_EMIT fileNameChanged();
    Q_EMIT firstNameChanged();
    Q_EMIT hChanged();
    Q_EMIT idChanged();
    Q_EMIT ivChanged();
    Q_EMIT keyChanged();
    Q_EMIT lastNameChanged();
    Q_EMIT latChanged();
    Q_EMIT longValueChanged();
    Q_EMIT mimeTypeChanged();
    Q_EMIT phoneNumberChanged();
    Q_EMIT sizeChanged();
    Q_EMIT thumbPhotoSizeChanged();
    Q_EMIT thumbBytesChanged();
    Q_EMIT thumbHChanged();
    Q_EMIT thumbWChanged();
    Q_EMIT userIdChanged();
    Q_EMIT wChanged();
    Q_EMIT coreChanged();
    return *this;
}

bool DecryptedMessageMediaObject::operator ==(const DecryptedMessageMedia &b) const {
    return m_core == b;
}

void DecryptedMessageMediaObject::setClassType(quint32 classType) {
    DecryptedMessageMedia::DecryptedMessageMediaClassType result;
    switch(classType) {
    case TypeDecryptedMessageMediaEmptySecret8:
        result = DecryptedMessageMedia::typeDecryptedMessageMediaEmptySecret8;
        break;
    case TypeDecryptedMessageMediaPhotoSecret8:
        result = DecryptedMessageMedia::typeDecryptedMessageMediaPhotoSecret8;
        break;
    case TypeDecryptedMessageMediaVideoSecret8:
        result = DecryptedMessageMedia::typeDecryptedMessageMediaVideoSecret8;
        break;
    case TypeDecryptedMessageMediaGeoPointSecret8:
        result = DecryptedMessageMedia::typeDecryptedMessageMediaGeoPointSecret8;
        break;
    case TypeDecryptedMessageMediaContactSecret8:
        result = DecryptedMessageMedia::typeDecryptedMessageMediaContactSecret8;
        break;
    case TypeDecryptedMessageMediaDocumentSecret8:
        result = DecryptedMessageMedia::typeDecryptedMessageMediaDocumentSecret8;
        break;
    case TypeDecryptedMessageMediaAudioSecret8:
        result = DecryptedMessageMedia::typeDecryptedMessageMediaAudioSecret8;
        break;
    case TypeDecryptedMessageMediaVideoSecret17:
        result = DecryptedMessageMedia::typeDecryptedMessageMediaVideoSecret17;
        break;
    case TypeDecryptedMessageMediaAudioSecret17:
        result = DecryptedMessageMedia::typeDecryptedMessageMediaAudioSecret17;
        break;
    case TypeDecryptedMessageMediaExternalDocumentSecret23:
        result = DecryptedMessageMedia::typeDecryptedMessageMediaExternalDocumentSecret23;
        break;
    default:
        result = DecryptedMessageMedia::typeDecryptedMessageMediaEmptySecret8;
        break;
    }

    if(m_core.classType() == result) return;
    m_core.setClassType(result);
    Q_EMIT classTypeChanged();
    Q_EMIT coreChanged();
}

quint32 DecryptedMessageMediaObject::classType() const {
    int result;
    switch(static_cast<qint64>(m_core.classType())) {
    case DecryptedMessageMedia::typeDecryptedMessageMediaEmptySecret8:
        result = TypeDecryptedMessageMediaEmptySecret8;
        break;
    case DecryptedMessageMedia::typeDecryptedMessageMediaPhotoSecret8:
        result = TypeDecryptedMessageMediaPhotoSecret8;
        break;
    case DecryptedMessageMedia::typeDecryptedMessageMediaVideoSecret8:
        result = TypeDecryptedMessageMediaVideoSecret8;
        break;
    case DecryptedMessageMedia::typeDecryptedMessageMediaGeoPointSecret8:
        result = TypeDecryptedMessageMediaGeoPointSecret8;
        break;
    case DecryptedMessageMedia::typeDecryptedMessageMediaContactSecret8:
        result = TypeDecryptedMessageMediaContactSecret8;
        break;
    case DecryptedMessageMedia::typeDecryptedMessageMediaDocumentSecret8:
        result = TypeDecryptedMessageMediaDocumentSecret8;
        break;
    case DecryptedMessageMedia::typeDecryptedMessageMediaAudioSecret8:
        result = TypeDecryptedMessageMediaAudioSecret8;
        break;
    case DecryptedMessageMedia::typeDecryptedMessageMediaVideoSecret17:
        result = TypeDecryptedMessageMediaVideoSecret17;
        break;
    case DecryptedMessageMedia::typeDecryptedMessageMediaAudioSecret17:
        result = TypeDecryptedMessageMediaAudioSecret17;
        break;
    case DecryptedMessageMedia::typeDecryptedMessageMediaExternalDocumentSecret23:
        result = TypeDecryptedMessageMediaExternalDocumentSecret23;
        break;
    default:
        result = TypeDecryptedMessageMediaEmptySecret8;
        break;
    }

    return result;
}

void DecryptedMessageMediaObject::setCore(const DecryptedMessageMedia &core) {
    operator =(core);
}

DecryptedMessageMedia DecryptedMessageMediaObject::core() const {
    return m_core;
}

void DecryptedMessageMediaObject::coreThumbPhotoSizeChanged() {
    if(m_core.thumbPhotoSize() == m_thumbPhotoSize->core()) return;
    m_core.setThumbPhotoSize(m_thumbPhotoSize->core());
    Q_EMIT thumbPhotoSizeChanged();
    Q_EMIT coreChanged();
}

