// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#ifndef LQTG_TYPE_AUDIO_OBJECT
#define LQTG_TYPE_AUDIO_OBJECT

#include "telegramtypeqobject.h"
#include "telegram/types/audio.h"

#include <QPointer>

class LIBQTELEGRAMSHARED_EXPORT AudioObject : public TelegramTypeQObject
{
    Q_OBJECT
    Q_ENUMS(AudioClassType)
    Q_PROPERTY(qint64 accessHash READ accessHash WRITE setAccessHash NOTIFY accessHashChanged)
    Q_PROPERTY(qint32 date READ date WRITE setDate NOTIFY dateChanged)
    Q_PROPERTY(qint32 dcId READ dcId WRITE setDcId NOTIFY dcIdChanged)
    Q_PROPERTY(qint32 duration READ duration WRITE setDuration NOTIFY durationChanged)
    Q_PROPERTY(qint64 id READ id WRITE setId NOTIFY idChanged)
    Q_PROPERTY(QString mimeType READ mimeType WRITE setMimeType NOTIFY mimeTypeChanged)
    Q_PROPERTY(qint32 size READ size WRITE setSize NOTIFY sizeChanged)
    Q_PROPERTY(Audio core READ core WRITE setCore NOTIFY coreChanged)
    Q_PROPERTY(quint32 classType READ classType WRITE setClassType NOTIFY classTypeChanged)

public:
    enum AudioClassType {
        TypeAudioEmpty,
        TypeAudio
    };

    AudioObject(const Audio &core, QObject *parent = 0);
    AudioObject(QObject *parent = 0);
    virtual ~AudioObject();

    void setAccessHash(qint64 accessHash);
    qint64 accessHash() const;

    void setDate(qint32 date);
    qint32 date() const;

    void setDcId(qint32 dcId);
    qint32 dcId() const;

    void setDuration(qint32 duration);
    qint32 duration() const;

    void setId(qint64 id);
    qint64 id() const;

    void setMimeType(const QString &mimeType);
    QString mimeType() const;

    void setSize(qint32 size);
    qint32 size() const;

    void setClassType(quint32 classType);
    quint32 classType() const;

    void setCore(const Audio &core);
    Audio core() const;

    AudioObject &operator =(const Audio &b);
    bool operator ==(const Audio &b) const;

Q_SIGNALS:
    void coreChanged();
    void classTypeChanged();
    void accessHashChanged();
    void dateChanged();
    void dcIdChanged();
    void durationChanged();
    void idChanged();
    void mimeTypeChanged();
    void sizeChanged();

private Q_SLOTS:

private:
    Audio m_core;
};

inline AudioObject::AudioObject(const Audio &core, QObject *parent) :
    TelegramTypeQObject(parent),
    m_core(core)
{
}

inline AudioObject::AudioObject(QObject *parent) :
    TelegramTypeQObject(parent),
    m_core()
{
}

inline AudioObject::~AudioObject() {
}

inline void AudioObject::setAccessHash(qint64 accessHash) {
    if(m_core.accessHash() == accessHash) return;
    m_core.setAccessHash(accessHash);
    Q_EMIT accessHashChanged();
    Q_EMIT coreChanged();
}

inline qint64 AudioObject::accessHash() const {
    return m_core.accessHash();
}

inline void AudioObject::setDate(qint32 date) {
    if(m_core.date() == date) return;
    m_core.setDate(date);
    Q_EMIT dateChanged();
    Q_EMIT coreChanged();
}

inline qint32 AudioObject::date() const {
    return m_core.date();
}

inline void AudioObject::setDcId(qint32 dcId) {
    if(m_core.dcId() == dcId) return;
    m_core.setDcId(dcId);
    Q_EMIT dcIdChanged();
    Q_EMIT coreChanged();
}

inline qint32 AudioObject::dcId() const {
    return m_core.dcId();
}

inline void AudioObject::setDuration(qint32 duration) {
    if(m_core.duration() == duration) return;
    m_core.setDuration(duration);
    Q_EMIT durationChanged();
    Q_EMIT coreChanged();
}

inline qint32 AudioObject::duration() const {
    return m_core.duration();
}

inline void AudioObject::setId(qint64 id) {
    if(m_core.id() == id) return;
    m_core.setId(id);
    Q_EMIT idChanged();
    Q_EMIT coreChanged();
}

inline qint64 AudioObject::id() const {
    return m_core.id();
}

inline void AudioObject::setMimeType(const QString &mimeType) {
    if(m_core.mimeType() == mimeType) return;
    m_core.setMimeType(mimeType);
    Q_EMIT mimeTypeChanged();
    Q_EMIT coreChanged();
}

inline QString AudioObject::mimeType() const {
    return m_core.mimeType();
}

inline void AudioObject::setSize(qint32 size) {
    if(m_core.size() == size) return;
    m_core.setSize(size);
    Q_EMIT sizeChanged();
    Q_EMIT coreChanged();
}

inline qint32 AudioObject::size() const {
    return m_core.size();
}

inline AudioObject &AudioObject::operator =(const Audio &b) {
    if(m_core == b) return *this;
    m_core = b;

    Q_EMIT accessHashChanged();
    Q_EMIT dateChanged();
    Q_EMIT dcIdChanged();
    Q_EMIT durationChanged();
    Q_EMIT idChanged();
    Q_EMIT mimeTypeChanged();
    Q_EMIT sizeChanged();
    Q_EMIT coreChanged();
    return *this;
}

inline bool AudioObject::operator ==(const Audio &b) const {
    return m_core == b;
}

inline void AudioObject::setClassType(quint32 classType) {
    Audio::AudioClassType result;
    switch(classType) {
    case TypeAudioEmpty:
        result = Audio::typeAudioEmpty;
        break;
    case TypeAudio:
        result = Audio::typeAudio;
        break;
    default:
        result = Audio::typeAudioEmpty;
        break;
    }

    if(m_core.classType() == result) return;
    m_core.setClassType(result);
    Q_EMIT classTypeChanged();
    Q_EMIT coreChanged();
}

inline quint32 AudioObject::classType() const {
    int result;
    switch(static_cast<qint64>(m_core.classType())) {
    case Audio::typeAudioEmpty:
        result = TypeAudioEmpty;
        break;
    case Audio::typeAudio:
        result = TypeAudio;
        break;
    default:
        result = TypeAudioEmpty;
        break;
    }

    return result;
}

inline void AudioObject::setCore(const Audio &core) {
    operator =(core);
}

inline Audio AudioObject::core() const {
    return m_core;
}

#endif // LQTG_TYPE_AUDIO_OBJECT
