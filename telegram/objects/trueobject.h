// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#ifndef LQTG_TYPE_TRUE_OBJECT
#define LQTG_TYPE_TRUE_OBJECT

#include "telegramtypeqobject.h"
#include "telegram/types/true.h"

#include <QPointer>

class LIBQTELEGRAMSHARED_EXPORT TrueObject : public TelegramTypeQObject
{
    Q_OBJECT
    Q_ENUMS(TrueClassType)
    Q_PROPERTY(True core READ core WRITE setCore NOTIFY coreChanged)
    Q_PROPERTY(quint32 classType READ classType WRITE setClassType NOTIFY classTypeChanged)

public:
    enum TrueClassType {
        TypeTrue
    };

    TrueObject(const True &core, QObject *parent = 0);
    TrueObject(QObject *parent = 0);
    virtual ~TrueObject();

    void setClassType(quint32 classType);
    quint32 classType() const;

    void setCore(const True &core);
    True core() const;

    TrueObject &operator =(const True &b);
    bool operator ==(const True &b) const;

Q_SIGNALS:
    void coreChanged();
    void classTypeChanged();

private Q_SLOTS:

private:
    True m_core;
};

inline TrueObject::TrueObject(const True &core, QObject *parent) :
    TelegramTypeQObject(parent),
    m_core(core)
{
}

inline TrueObject::TrueObject(QObject *parent) :
    TelegramTypeQObject(parent),
    m_core()
{
}

inline TrueObject::~TrueObject() {
}

inline TrueObject &TrueObject::operator =(const True &b) {
    if(m_core == b) return *this;
    m_core = b;

    Q_EMIT coreChanged();
    return *this;
}

inline bool TrueObject::operator ==(const True &b) const {
    return m_core == b;
}

inline void TrueObject::setClassType(quint32 classType) {
    True::TrueClassType result;
    switch(classType) {
    case TypeTrue:
        result = True::typeTrue;
        break;
    default:
        result = True::typeTrue;
        break;
    }

    if(m_core.classType() == result) return;
    m_core.setClassType(result);
    Q_EMIT classTypeChanged();
    Q_EMIT coreChanged();
}

inline quint32 TrueObject::classType() const {
    int result;
    switch(static_cast<qint64>(m_core.classType())) {
    case True::typeTrue:
        result = TypeTrue;
        break;
    default:
        result = TypeTrue;
        break;
    }

    return result;
}

inline void TrueObject::setCore(const True &core) {
    operator =(core);
}

inline True TrueObject::core() const {
    return m_core;
}

#endif // LQTG_TYPE_TRUE_OBJECT
