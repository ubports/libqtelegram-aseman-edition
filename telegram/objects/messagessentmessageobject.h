// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#ifndef LQTG_TYPE_MESSAGESSENTMESSAGE_OBJECT
#define LQTG_TYPE_MESSAGESSENTMESSAGE_OBJECT

#include "telegramtypeqobject.h"
#include "telegram/types/messagessentmessage.h"

#include <QPointer>
#include "messagemediaobject.h"

class LIBQTELEGRAMSHARED_EXPORT MessagesSentMessageObject : public TelegramTypeQObject
{
    Q_OBJECT
    Q_ENUMS(MessagesSentMessageClassType)
    Q_PROPERTY(qint32 date READ date WRITE setDate NOTIFY dateChanged)
    Q_PROPERTY(qint32 id READ id WRITE setId NOTIFY idChanged)
    Q_PROPERTY(QList<ContactsLink> links READ links WRITE setLinks NOTIFY linksChanged)
    Q_PROPERTY(MessageMediaObject* media READ media WRITE setMedia NOTIFY mediaChanged)
    Q_PROPERTY(qint32 pts READ pts WRITE setPts NOTIFY ptsChanged)
    Q_PROPERTY(qint32 ptsCount READ ptsCount WRITE setPtsCount NOTIFY ptsCountChanged)
    Q_PROPERTY(qint32 seq READ seq WRITE setSeq NOTIFY seqChanged)
    Q_PROPERTY(MessagesSentMessage core READ core WRITE setCore NOTIFY coreChanged)
    Q_PROPERTY(quint32 classType READ classType WRITE setClassType NOTIFY classTypeChanged)

public:
    enum MessagesSentMessageClassType {
        TypeMessagesSentMessage,
        TypeMessagesSentMessageLink
    };

    MessagesSentMessageObject(const MessagesSentMessage &core, QObject *parent = 0);
    MessagesSentMessageObject(QObject *parent = 0);
    virtual ~MessagesSentMessageObject();

    void setDate(qint32 date);
    qint32 date() const;

    void setId(qint32 id);
    qint32 id() const;

    void setLinks(const QList<ContactsLink> &links);
    QList<ContactsLink> links() const;

    void setMedia(MessageMediaObject* media);
    MessageMediaObject* media() const;

    void setPts(qint32 pts);
    qint32 pts() const;

    void setPtsCount(qint32 ptsCount);
    qint32 ptsCount() const;

    void setSeq(qint32 seq);
    qint32 seq() const;

    void setClassType(quint32 classType);
    quint32 classType() const;

    void setCore(const MessagesSentMessage &core);
    MessagesSentMessage core() const;

    MessagesSentMessageObject &operator =(const MessagesSentMessage &b);
    bool operator ==(const MessagesSentMessage &b) const;

Q_SIGNALS:
    void coreChanged();
    void classTypeChanged();
    void dateChanged();
    void idChanged();
    void linksChanged();
    void mediaChanged();
    void ptsChanged();
    void ptsCountChanged();
    void seqChanged();

private Q_SLOTS:
    void coreMediaChanged();

private:
    QPointer<MessageMediaObject> m_media;
    MessagesSentMessage m_core;
};

inline MessagesSentMessageObject::MessagesSentMessageObject(const MessagesSentMessage &core, QObject *parent) :
    TelegramTypeQObject(parent),
    m_media(0),
    m_core(core)
{
    m_media = new MessageMediaObject(m_core.media(), this);
    connect(m_media.data(), &MessageMediaObject::coreChanged, this, &MessagesSentMessageObject::coreMediaChanged);
}

inline MessagesSentMessageObject::MessagesSentMessageObject(QObject *parent) :
    TelegramTypeQObject(parent),
    m_media(0),
    m_core()
{
    m_media = new MessageMediaObject(m_core.media(), this);
    connect(m_media.data(), &MessageMediaObject::coreChanged, this, &MessagesSentMessageObject::coreMediaChanged);
}

inline MessagesSentMessageObject::~MessagesSentMessageObject() {
}

inline void MessagesSentMessageObject::setDate(qint32 date) {
    if(m_core.date() == date) return;
    m_core.setDate(date);
    Q_EMIT dateChanged();
    Q_EMIT coreChanged();
}

inline qint32 MessagesSentMessageObject::date() const {
    return m_core.date();
}

inline void MessagesSentMessageObject::setId(qint32 id) {
    if(m_core.id() == id) return;
    m_core.setId(id);
    Q_EMIT idChanged();
    Q_EMIT coreChanged();
}

inline qint32 MessagesSentMessageObject::id() const {
    return m_core.id();
}

inline void MessagesSentMessageObject::setLinks(const QList<ContactsLink> &links) {
    if(m_core.links() == links) return;
    m_core.setLinks(links);
    Q_EMIT linksChanged();
    Q_EMIT coreChanged();
}

inline QList<ContactsLink> MessagesSentMessageObject::links() const {
    return m_core.links();
}

inline void MessagesSentMessageObject::setMedia(MessageMediaObject* media) {
    if(m_media == media) return;
    if(m_media) delete m_media;
    m_media = media;
    if(m_media) {
        m_media->setParent(this);
        m_core.setMedia(m_media->core());
        connect(m_media.data(), &MessageMediaObject::coreChanged, this, &MessagesSentMessageObject::coreMediaChanged);
    }
    Q_EMIT mediaChanged();
    Q_EMIT coreChanged();
}

inline MessageMediaObject*  MessagesSentMessageObject::media() const {
    return m_media;
}

inline void MessagesSentMessageObject::setPts(qint32 pts) {
    if(m_core.pts() == pts) return;
    m_core.setPts(pts);
    Q_EMIT ptsChanged();
    Q_EMIT coreChanged();
}

inline qint32 MessagesSentMessageObject::pts() const {
    return m_core.pts();
}

inline void MessagesSentMessageObject::setPtsCount(qint32 ptsCount) {
    if(m_core.ptsCount() == ptsCount) return;
    m_core.setPtsCount(ptsCount);
    Q_EMIT ptsCountChanged();
    Q_EMIT coreChanged();
}

inline qint32 MessagesSentMessageObject::ptsCount() const {
    return m_core.ptsCount();
}

inline void MessagesSentMessageObject::setSeq(qint32 seq) {
    if(m_core.seq() == seq) return;
    m_core.setSeq(seq);
    Q_EMIT seqChanged();
    Q_EMIT coreChanged();
}

inline qint32 MessagesSentMessageObject::seq() const {
    return m_core.seq();
}

inline MessagesSentMessageObject &MessagesSentMessageObject::operator =(const MessagesSentMessage &b) {
    if(m_core == b) return *this;
    m_core = b;
    m_media->setCore(b.media());

    Q_EMIT dateChanged();
    Q_EMIT idChanged();
    Q_EMIT linksChanged();
    Q_EMIT mediaChanged();
    Q_EMIT ptsChanged();
    Q_EMIT ptsCountChanged();
    Q_EMIT seqChanged();
    Q_EMIT coreChanged();
    return *this;
}

inline bool MessagesSentMessageObject::operator ==(const MessagesSentMessage &b) const {
    return m_core == b;
}

inline void MessagesSentMessageObject::setClassType(quint32 classType) {
    MessagesSentMessage::MessagesSentMessageClassType result;
    switch(classType) {
    case TypeMessagesSentMessage:
        result = MessagesSentMessage::typeMessagesSentMessage;
        break;
    case TypeMessagesSentMessageLink:
        result = MessagesSentMessage::typeMessagesSentMessageLink;
        break;
    default:
        result = MessagesSentMessage::typeMessagesSentMessage;
        break;
    }

    if(m_core.classType() == result) return;
    m_core.setClassType(result);
    Q_EMIT classTypeChanged();
    Q_EMIT coreChanged();
}

inline quint32 MessagesSentMessageObject::classType() const {
    int result;
    switch(static_cast<qint64>(m_core.classType())) {
    case MessagesSentMessage::typeMessagesSentMessage:
        result = TypeMessagesSentMessage;
        break;
    case MessagesSentMessage::typeMessagesSentMessageLink:
        result = TypeMessagesSentMessageLink;
        break;
    default:
        result = TypeMessagesSentMessage;
        break;
    }

    return result;
}

inline void MessagesSentMessageObject::setCore(const MessagesSentMessage &core) {
    operator =(core);
}

inline MessagesSentMessage MessagesSentMessageObject::core() const {
    return m_core;
}

inline void MessagesSentMessageObject::coreMediaChanged() {
    if(m_core.media() == m_media->core()) return;
    m_core.setMedia(m_media->core());
    Q_EMIT mediaChanged();
    Q_EMIT coreChanged();
}

#endif // LQTG_TYPE_MESSAGESSENTMESSAGE_OBJECT
