// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#ifndef LQTG_TYPE_CONTACTSUGGESTED_OBJECT
#define LQTG_TYPE_CONTACTSUGGESTED_OBJECT

#include "telegramtypeqobject.h"
#include "telegram/types/contactsuggested.h"

#include <QPointer>

class LIBQTELEGRAMSHARED_EXPORT ContactSuggestedObject : public TelegramTypeQObject
{
    Q_OBJECT
    Q_ENUMS(ContactSuggestedClassType)
    Q_PROPERTY(qint32 mutualContacts READ mutualContacts WRITE setMutualContacts NOTIFY mutualContactsChanged)
    Q_PROPERTY(qint32 userId READ userId WRITE setUserId NOTIFY userIdChanged)
    Q_PROPERTY(ContactSuggested core READ core WRITE setCore NOTIFY coreChanged)
    Q_PROPERTY(quint32 classType READ classType WRITE setClassType NOTIFY classTypeChanged)

public:
    enum ContactSuggestedClassType {
        TypeContactSuggested
    };

    ContactSuggestedObject(const ContactSuggested &core, QObject *parent = 0);
    ContactSuggestedObject(QObject *parent = 0);
    virtual ~ContactSuggestedObject();

    void setMutualContacts(qint32 mutualContacts);
    qint32 mutualContacts() const;

    void setUserId(qint32 userId);
    qint32 userId() const;

    void setClassType(quint32 classType);
    quint32 classType() const;

    void setCore(const ContactSuggested &core);
    ContactSuggested core() const;

    ContactSuggestedObject &operator =(const ContactSuggested &b);
    bool operator ==(const ContactSuggested &b) const;

Q_SIGNALS:
    void coreChanged();
    void classTypeChanged();
    void mutualContactsChanged();
    void userIdChanged();

private Q_SLOTS:

private:
    ContactSuggested m_core;
};

inline ContactSuggestedObject::ContactSuggestedObject(const ContactSuggested &core, QObject *parent) :
    TelegramTypeQObject(parent),
    m_core(core)
{
}

inline ContactSuggestedObject::ContactSuggestedObject(QObject *parent) :
    TelegramTypeQObject(parent),
    m_core()
{
}

inline ContactSuggestedObject::~ContactSuggestedObject() {
}

inline void ContactSuggestedObject::setMutualContacts(qint32 mutualContacts) {
    if(m_core.mutualContacts() == mutualContacts) return;
    m_core.setMutualContacts(mutualContacts);
    Q_EMIT mutualContactsChanged();
    Q_EMIT coreChanged();
}

inline qint32 ContactSuggestedObject::mutualContacts() const {
    return m_core.mutualContacts();
}

inline void ContactSuggestedObject::setUserId(qint32 userId) {
    if(m_core.userId() == userId) return;
    m_core.setUserId(userId);
    Q_EMIT userIdChanged();
    Q_EMIT coreChanged();
}

inline qint32 ContactSuggestedObject::userId() const {
    return m_core.userId();
}

inline ContactSuggestedObject &ContactSuggestedObject::operator =(const ContactSuggested &b) {
    if(m_core == b) return *this;
    m_core = b;

    Q_EMIT mutualContactsChanged();
    Q_EMIT userIdChanged();
    Q_EMIT coreChanged();
    return *this;
}

inline bool ContactSuggestedObject::operator ==(const ContactSuggested &b) const {
    return m_core == b;
}

inline void ContactSuggestedObject::setClassType(quint32 classType) {
    ContactSuggested::ContactSuggestedClassType result;
    switch(classType) {
    case TypeContactSuggested:
        result = ContactSuggested::typeContactSuggested;
        break;
    default:
        result = ContactSuggested::typeContactSuggested;
        break;
    }

    if(m_core.classType() == result) return;
    m_core.setClassType(result);
    Q_EMIT classTypeChanged();
    Q_EMIT coreChanged();
}

inline quint32 ContactSuggestedObject::classType() const {
    int result;
    switch(static_cast<qint64>(m_core.classType())) {
    case ContactSuggested::typeContactSuggested:
        result = TypeContactSuggested;
        break;
    default:
        result = TypeContactSuggested;
        break;
    }

    return result;
}

inline void ContactSuggestedObject::setCore(const ContactSuggested &core) {
    operator =(core);
}

inline ContactSuggested ContactSuggestedObject::core() const {
    return m_core;
}

#endif // LQTG_TYPE_CONTACTSUGGESTED_OBJECT
