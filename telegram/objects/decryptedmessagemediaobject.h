// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#ifndef LQTG_TYPE_DECRYPTEDMESSAGEMEDIA_OBJECT
#define LQTG_TYPE_DECRYPTEDMESSAGEMEDIA_OBJECT

#include "telegramtypeqobject.h"
#include "telegram/types/decryptedmessagemedia.h"

#include <QPointer>
#include "photosizeobject.h"

class LIBQTELEGRAMSHARED_EXPORT DecryptedMessageMediaObject : public TelegramTypeQObject
{
    Q_OBJECT
    Q_ENUMS(DecryptedMessageMediaClassType)
    Q_PROPERTY(qint64 accessHash READ accessHash WRITE setAccessHash NOTIFY accessHashChanged)
    Q_PROPERTY(QList<DocumentAttribute> attributes READ attributes WRITE setAttributes NOTIFY attributesChanged)
    Q_PROPERTY(qint32 date READ date WRITE setDate NOTIFY dateChanged)
    Q_PROPERTY(qint32 dcId READ dcId WRITE setDcId NOTIFY dcIdChanged)
    Q_PROPERTY(qint32 duration READ duration WRITE setDuration NOTIFY durationChanged)
    Q_PROPERTY(QString fileName READ fileName WRITE setFileName NOTIFY fileNameChanged)
    Q_PROPERTY(QString firstName READ firstName WRITE setFirstName NOTIFY firstNameChanged)
    Q_PROPERTY(qint32 h READ h WRITE setH NOTIFY hChanged)
    Q_PROPERTY(qint64 id READ id WRITE setId NOTIFY idChanged)
    Q_PROPERTY(QByteArray iv READ iv WRITE setIv NOTIFY ivChanged)
    Q_PROPERTY(QByteArray key READ key WRITE setKey NOTIFY keyChanged)
    Q_PROPERTY(QString lastName READ lastName WRITE setLastName NOTIFY lastNameChanged)
    Q_PROPERTY(qreal lat READ lat WRITE setLat NOTIFY latChanged)
    Q_PROPERTY(qreal longValue READ longValue WRITE setLongValue NOTIFY longValueChanged)
    Q_PROPERTY(QString mimeType READ mimeType WRITE setMimeType NOTIFY mimeTypeChanged)
    Q_PROPERTY(QString phoneNumber READ phoneNumber WRITE setPhoneNumber NOTIFY phoneNumberChanged)
    Q_PROPERTY(qint32 size READ size WRITE setSize NOTIFY sizeChanged)
    Q_PROPERTY(PhotoSizeObject* thumbPhotoSize READ thumbPhotoSize WRITE setThumbPhotoSize NOTIFY thumbPhotoSizeChanged)
    Q_PROPERTY(QByteArray thumbBytes READ thumbBytes WRITE setThumbBytes NOTIFY thumbBytesChanged)
    Q_PROPERTY(qint32 thumbH READ thumbH WRITE setThumbH NOTIFY thumbHChanged)
    Q_PROPERTY(qint32 thumbW READ thumbW WRITE setThumbW NOTIFY thumbWChanged)
    Q_PROPERTY(qint32 userId READ userId WRITE setUserId NOTIFY userIdChanged)
    Q_PROPERTY(qint32 w READ w WRITE setW NOTIFY wChanged)
    Q_PROPERTY(DecryptedMessageMedia core READ core WRITE setCore NOTIFY coreChanged)
    Q_PROPERTY(quint32 classType READ classType WRITE setClassType NOTIFY classTypeChanged)

public:
    enum DecryptedMessageMediaClassType {
        TypeDecryptedMessageMediaEmptySecret8,
        TypeDecryptedMessageMediaPhotoSecret8,
        TypeDecryptedMessageMediaVideoSecret8,
        TypeDecryptedMessageMediaGeoPointSecret8,
        TypeDecryptedMessageMediaContactSecret8,
        TypeDecryptedMessageMediaDocumentSecret8,
        TypeDecryptedMessageMediaAudioSecret8,
        TypeDecryptedMessageMediaVideoSecret17,
        TypeDecryptedMessageMediaAudioSecret17,
        TypeDecryptedMessageMediaExternalDocumentSecret23
    };

    DecryptedMessageMediaObject(const DecryptedMessageMedia &core, QObject *parent = 0);
    DecryptedMessageMediaObject(QObject *parent = 0);
    virtual ~DecryptedMessageMediaObject();

    void setAccessHash(qint64 accessHash);
    qint64 accessHash() const;

    void setAttributes(const QList<DocumentAttribute> &attributes);
    QList<DocumentAttribute> attributes() const;

    void setDate(qint32 date);
    qint32 date() const;

    void setDcId(qint32 dcId);
    qint32 dcId() const;

    void setDuration(qint32 duration);
    qint32 duration() const;

    void setFileName(const QString &fileName);
    QString fileName() const;

    void setFirstName(const QString &firstName);
    QString firstName() const;

    void setH(qint32 h);
    qint32 h() const;

    void setId(qint64 id);
    qint64 id() const;

    void setIv(const QByteArray &iv);
    QByteArray iv() const;

    void setKey(const QByteArray &key);
    QByteArray key() const;

    void setLastName(const QString &lastName);
    QString lastName() const;

    void setLat(qreal lat);
    qreal lat() const;

    void setLongValue(qreal longValue);
    qreal longValue() const;

    void setMimeType(const QString &mimeType);
    QString mimeType() const;

    void setPhoneNumber(const QString &phoneNumber);
    QString phoneNumber() const;

    void setSize(qint32 size);
    qint32 size() const;

    void setThumbPhotoSize(PhotoSizeObject* thumbPhotoSize);
    PhotoSizeObject* thumbPhotoSize() const;

    void setThumbBytes(const QByteArray &thumbBytes);
    QByteArray thumbBytes() const;

    void setThumbH(qint32 thumbH);
    qint32 thumbH() const;

    void setThumbW(qint32 thumbW);
    qint32 thumbW() const;

    void setUserId(qint32 userId);
    qint32 userId() const;

    void setW(qint32 w);
    qint32 w() const;

    void setClassType(quint32 classType);
    quint32 classType() const;

    void setCore(const DecryptedMessageMedia &core);
    DecryptedMessageMedia core() const;

    DecryptedMessageMediaObject &operator =(const DecryptedMessageMedia &b);
    bool operator ==(const DecryptedMessageMedia &b) const;

Q_SIGNALS:
    void coreChanged();
    void classTypeChanged();
    void accessHashChanged();
    void attributesChanged();
    void dateChanged();
    void dcIdChanged();
    void durationChanged();
    void fileNameChanged();
    void firstNameChanged();
    void hChanged();
    void idChanged();
    void ivChanged();
    void keyChanged();
    void lastNameChanged();
    void latChanged();
    void longValueChanged();
    void mimeTypeChanged();
    void phoneNumberChanged();
    void sizeChanged();
    void thumbPhotoSizeChanged();
    void thumbBytesChanged();
    void thumbHChanged();
    void thumbWChanged();
    void userIdChanged();
    void wChanged();

private Q_SLOTS:
    void coreThumbPhotoSizeChanged();

private:
    QPointer<PhotoSizeObject> m_thumbPhotoSize;
    DecryptedMessageMedia m_core;
};

#endif // LQTG_TYPE_DECRYPTEDMESSAGEMEDIA_OBJECT
