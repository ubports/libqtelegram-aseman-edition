// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#ifndef LQTG_TYPE_AUTHSENTCODE_OBJECT
#define LQTG_TYPE_AUTHSENTCODE_OBJECT

#include "telegramtypeqobject.h"
#include "telegram/types/authsentcode.h"

#include <QPointer>

class LIBQTELEGRAMSHARED_EXPORT AuthSentCodeObject : public TelegramTypeQObject
{
    Q_OBJECT
    Q_ENUMS(AuthSentCodeClassType)
    Q_PROPERTY(bool isPassword READ isPassword WRITE setIsPassword NOTIFY isPasswordChanged)
    Q_PROPERTY(QString phoneCodeHash READ phoneCodeHash WRITE setPhoneCodeHash NOTIFY phoneCodeHashChanged)
    Q_PROPERTY(bool phoneRegistered READ phoneRegistered WRITE setPhoneRegistered NOTIFY phoneRegisteredChanged)
    Q_PROPERTY(qint32 sendCallTimeout READ sendCallTimeout WRITE setSendCallTimeout NOTIFY sendCallTimeoutChanged)
    Q_PROPERTY(AuthSentCode core READ core WRITE setCore NOTIFY coreChanged)
    Q_PROPERTY(quint32 classType READ classType WRITE setClassType NOTIFY classTypeChanged)

public:
    enum AuthSentCodeClassType {
        TypeAuthSentCode,
        TypeAuthSentAppCode
    };

    AuthSentCodeObject(const AuthSentCode &core, QObject *parent = 0);
    AuthSentCodeObject(QObject *parent = 0);
    virtual ~AuthSentCodeObject();

    void setIsPassword(bool isPassword);
    bool isPassword() const;

    void setPhoneCodeHash(const QString &phoneCodeHash);
    QString phoneCodeHash() const;

    void setPhoneRegistered(bool phoneRegistered);
    bool phoneRegistered() const;

    void setSendCallTimeout(qint32 sendCallTimeout);
    qint32 sendCallTimeout() const;

    void setClassType(quint32 classType);
    quint32 classType() const;

    void setCore(const AuthSentCode &core);
    AuthSentCode core() const;

    AuthSentCodeObject &operator =(const AuthSentCode &b);
    bool operator ==(const AuthSentCode &b) const;

Q_SIGNALS:
    void coreChanged();
    void classTypeChanged();
    void isPasswordChanged();
    void phoneCodeHashChanged();
    void phoneRegisteredChanged();
    void sendCallTimeoutChanged();

private Q_SLOTS:

private:
    AuthSentCode m_core;
};

inline AuthSentCodeObject::AuthSentCodeObject(const AuthSentCode &core, QObject *parent) :
    TelegramTypeQObject(parent),
    m_core(core)
{
}

inline AuthSentCodeObject::AuthSentCodeObject(QObject *parent) :
    TelegramTypeQObject(parent),
    m_core()
{
}

inline AuthSentCodeObject::~AuthSentCodeObject() {
}

inline void AuthSentCodeObject::setIsPassword(bool isPassword) {
    if(m_core.isPassword() == isPassword) return;
    m_core.setIsPassword(isPassword);
    Q_EMIT isPasswordChanged();
    Q_EMIT coreChanged();
}

inline bool AuthSentCodeObject::isPassword() const {
    return m_core.isPassword();
}

inline void AuthSentCodeObject::setPhoneCodeHash(const QString &phoneCodeHash) {
    if(m_core.phoneCodeHash() == phoneCodeHash) return;
    m_core.setPhoneCodeHash(phoneCodeHash);
    Q_EMIT phoneCodeHashChanged();
    Q_EMIT coreChanged();
}

inline QString AuthSentCodeObject::phoneCodeHash() const {
    return m_core.phoneCodeHash();
}

inline void AuthSentCodeObject::setPhoneRegistered(bool phoneRegistered) {
    if(m_core.phoneRegistered() == phoneRegistered) return;
    m_core.setPhoneRegistered(phoneRegistered);
    Q_EMIT phoneRegisteredChanged();
    Q_EMIT coreChanged();
}

inline bool AuthSentCodeObject::phoneRegistered() const {
    return m_core.phoneRegistered();
}

inline void AuthSentCodeObject::setSendCallTimeout(qint32 sendCallTimeout) {
    if(m_core.sendCallTimeout() == sendCallTimeout) return;
    m_core.setSendCallTimeout(sendCallTimeout);
    Q_EMIT sendCallTimeoutChanged();
    Q_EMIT coreChanged();
}

inline qint32 AuthSentCodeObject::sendCallTimeout() const {
    return m_core.sendCallTimeout();
}

inline AuthSentCodeObject &AuthSentCodeObject::operator =(const AuthSentCode &b) {
    if(m_core == b) return *this;
    m_core = b;

    Q_EMIT isPasswordChanged();
    Q_EMIT phoneCodeHashChanged();
    Q_EMIT phoneRegisteredChanged();
    Q_EMIT sendCallTimeoutChanged();
    Q_EMIT coreChanged();
    return *this;
}

inline bool AuthSentCodeObject::operator ==(const AuthSentCode &b) const {
    return m_core == b;
}

inline void AuthSentCodeObject::setClassType(quint32 classType) {
    AuthSentCode::AuthSentCodeClassType result;
    switch(classType) {
    case TypeAuthSentCode:
        result = AuthSentCode::typeAuthSentCode;
        break;
    case TypeAuthSentAppCode:
        result = AuthSentCode::typeAuthSentAppCode;
        break;
    default:
        result = AuthSentCode::typeAuthSentCode;
        break;
    }

    if(m_core.classType() == result) return;
    m_core.setClassType(result);
    Q_EMIT classTypeChanged();
    Q_EMIT coreChanged();
}

inline quint32 AuthSentCodeObject::classType() const {
    int result;
    switch(static_cast<qint64>(m_core.classType())) {
    case AuthSentCode::typeAuthSentCode:
        result = TypeAuthSentCode;
        break;
    case AuthSentCode::typeAuthSentAppCode:
        result = TypeAuthSentAppCode;
        break;
    default:
        result = TypeAuthSentCode;
        break;
    }

    return result;
}

inline void AuthSentCodeObject::setCore(const AuthSentCode &core) {
    operator =(core);
}

inline AuthSentCode AuthSentCodeObject::core() const {
    return m_core;
}

#endif // LQTG_TYPE_AUTHSENTCODE_OBJECT
