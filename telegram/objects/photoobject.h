// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#ifndef LQTG_TYPE_PHOTO_OBJECT
#define LQTG_TYPE_PHOTO_OBJECT

#include "telegramtypeqobject.h"
#include "telegram/types/photo.h"

#include <QPointer>
#include "geopointobject.h"

class LIBQTELEGRAMSHARED_EXPORT PhotoObject : public TelegramTypeQObject
{
    Q_OBJECT
    Q_ENUMS(PhotoClassType)
    Q_PROPERTY(qint64 accessHash READ accessHash WRITE setAccessHash NOTIFY accessHashChanged)
    Q_PROPERTY(qint32 date READ date WRITE setDate NOTIFY dateChanged)
    Q_PROPERTY(GeoPointObject* geo READ geo WRITE setGeo NOTIFY geoChanged)
    Q_PROPERTY(qint64 id READ id WRITE setId NOTIFY idChanged)
    Q_PROPERTY(QList<PhotoSize> sizes READ sizes WRITE setSizes NOTIFY sizesChanged)
    Q_PROPERTY(qint32 userId READ userId WRITE setUserId NOTIFY userIdChanged)
    Q_PROPERTY(Photo core READ core WRITE setCore NOTIFY coreChanged)
    Q_PROPERTY(quint32 classType READ classType WRITE setClassType NOTIFY classTypeChanged)

public:
    enum PhotoClassType {
        TypePhotoEmpty,
        TypePhoto
    };

    PhotoObject(const Photo &core, QObject *parent = 0);
    PhotoObject(QObject *parent = 0);
    virtual ~PhotoObject();

    void setAccessHash(qint64 accessHash);
    qint64 accessHash() const;

    void setDate(qint32 date);
    qint32 date() const;

    void setGeo(GeoPointObject* geo);
    GeoPointObject* geo() const;

    void setId(qint64 id);
    qint64 id() const;

    void setSizes(const QList<PhotoSize> &sizes);
    QList<PhotoSize> sizes() const;

    void setUserId(qint32 userId);
    qint32 userId() const;

    void setClassType(quint32 classType);
    quint32 classType() const;

    void setCore(const Photo &core);
    Photo core() const;

    PhotoObject &operator =(const Photo &b);
    bool operator ==(const Photo &b) const;

Q_SIGNALS:
    void coreChanged();
    void classTypeChanged();
    void accessHashChanged();
    void dateChanged();
    void geoChanged();
    void idChanged();
    void sizesChanged();
    void userIdChanged();

private Q_SLOTS:
    void coreGeoChanged();

private:
    QPointer<GeoPointObject> m_geo;
    Photo m_core;
};

inline PhotoObject::PhotoObject(const Photo &core, QObject *parent) :
    TelegramTypeQObject(parent),
    m_geo(0),
    m_core(core)
{
    m_geo = new GeoPointObject(m_core.geo(), this);
    connect(m_geo.data(), &GeoPointObject::coreChanged, this, &PhotoObject::coreGeoChanged);
}

inline PhotoObject::PhotoObject(QObject *parent) :
    TelegramTypeQObject(parent),
    m_geo(0),
    m_core()
{
    m_geo = new GeoPointObject(m_core.geo(), this);
    connect(m_geo.data(), &GeoPointObject::coreChanged, this, &PhotoObject::coreGeoChanged);
}

inline PhotoObject::~PhotoObject() {
}

inline void PhotoObject::setAccessHash(qint64 accessHash) {
    if(m_core.accessHash() == accessHash) return;
    m_core.setAccessHash(accessHash);
    Q_EMIT accessHashChanged();
    Q_EMIT coreChanged();
}

inline qint64 PhotoObject::accessHash() const {
    return m_core.accessHash();
}

inline void PhotoObject::setDate(qint32 date) {
    if(m_core.date() == date) return;
    m_core.setDate(date);
    Q_EMIT dateChanged();
    Q_EMIT coreChanged();
}

inline qint32 PhotoObject::date() const {
    return m_core.date();
}

inline void PhotoObject::setGeo(GeoPointObject* geo) {
    if(m_geo == geo) return;
    if(m_geo) delete m_geo;
    m_geo = geo;
    if(m_geo) {
        m_geo->setParent(this);
        m_core.setGeo(m_geo->core());
        connect(m_geo.data(), &GeoPointObject::coreChanged, this, &PhotoObject::coreGeoChanged);
    }
    Q_EMIT geoChanged();
    Q_EMIT coreChanged();
}

inline GeoPointObject*  PhotoObject::geo() const {
    return m_geo;
}

inline void PhotoObject::setId(qint64 id) {
    if(m_core.id() == id) return;
    m_core.setId(id);
    Q_EMIT idChanged();
    Q_EMIT coreChanged();
}

inline qint64 PhotoObject::id() const {
    return m_core.id();
}

inline void PhotoObject::setSizes(const QList<PhotoSize> &sizes) {
    if(m_core.sizes() == sizes) return;
    m_core.setSizes(sizes);
    Q_EMIT sizesChanged();
    Q_EMIT coreChanged();
}

inline QList<PhotoSize> PhotoObject::sizes() const {
    return m_core.sizes();
}

inline void PhotoObject::setUserId(qint32 userId) {
    if(m_core.userId() == userId) return;
    m_core.setUserId(userId);
    Q_EMIT userIdChanged();
    Q_EMIT coreChanged();
}

inline qint32 PhotoObject::userId() const {
    return m_core.userId();
}

inline PhotoObject &PhotoObject::operator =(const Photo &b) {
    if(m_core == b) return *this;
    m_core = b;
    m_geo->setCore(b.geo());

    Q_EMIT accessHashChanged();
    Q_EMIT dateChanged();
    Q_EMIT geoChanged();
    Q_EMIT idChanged();
    Q_EMIT sizesChanged();
    Q_EMIT userIdChanged();
    Q_EMIT coreChanged();
    return *this;
}

inline bool PhotoObject::operator ==(const Photo &b) const {
    return m_core == b;
}

inline void PhotoObject::setClassType(quint32 classType) {
    Photo::PhotoClassType result;
    switch(classType) {
    case TypePhotoEmpty:
        result = Photo::typePhotoEmpty;
        break;
    case TypePhoto:
        result = Photo::typePhoto;
        break;
    default:
        result = Photo::typePhotoEmpty;
        break;
    }

    if(m_core.classType() == result) return;
    m_core.setClassType(result);
    Q_EMIT classTypeChanged();
    Q_EMIT coreChanged();
}

inline quint32 PhotoObject::classType() const {
    int result;
    switch(static_cast<qint64>(m_core.classType())) {
    case Photo::typePhotoEmpty:
        result = TypePhotoEmpty;
        break;
    case Photo::typePhoto:
        result = TypePhoto;
        break;
    default:
        result = TypePhotoEmpty;
        break;
    }

    return result;
}

inline void PhotoObject::setCore(const Photo &core) {
    operator =(core);
}

inline Photo PhotoObject::core() const {
    return m_core;
}

inline void PhotoObject::coreGeoChanged() {
    if(m_core.geo() == m_geo->core()) return;
    m_core.setGeo(m_geo->core());
    Q_EMIT geoChanged();
    Q_EMIT coreChanged();
}

#endif // LQTG_TYPE_PHOTO_OBJECT
