// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#ifndef LQTG_TYPE_ACCOUNTSENTCHANGEPHONECODE_OBJECT
#define LQTG_TYPE_ACCOUNTSENTCHANGEPHONECODE_OBJECT

#include "telegramtypeqobject.h"
#include "telegram/types/accountsentchangephonecode.h"

#include <QPointer>

class LIBQTELEGRAMSHARED_EXPORT AccountSentChangePhoneCodeObject : public TelegramTypeQObject
{
    Q_OBJECT
    Q_ENUMS(AccountSentChangePhoneCodeClassType)
    Q_PROPERTY(QString phoneCodeHash READ phoneCodeHash WRITE setPhoneCodeHash NOTIFY phoneCodeHashChanged)
    Q_PROPERTY(qint32 sendCallTimeout READ sendCallTimeout WRITE setSendCallTimeout NOTIFY sendCallTimeoutChanged)
    Q_PROPERTY(AccountSentChangePhoneCode core READ core WRITE setCore NOTIFY coreChanged)
    Q_PROPERTY(quint32 classType READ classType WRITE setClassType NOTIFY classTypeChanged)

public:
    enum AccountSentChangePhoneCodeClassType {
        TypeAccountSentChangePhoneCode
    };

    AccountSentChangePhoneCodeObject(const AccountSentChangePhoneCode &core, QObject *parent = 0);
    AccountSentChangePhoneCodeObject(QObject *parent = 0);
    virtual ~AccountSentChangePhoneCodeObject();

    void setPhoneCodeHash(const QString &phoneCodeHash);
    QString phoneCodeHash() const;

    void setSendCallTimeout(qint32 sendCallTimeout);
    qint32 sendCallTimeout() const;

    void setClassType(quint32 classType);
    quint32 classType() const;

    void setCore(const AccountSentChangePhoneCode &core);
    AccountSentChangePhoneCode core() const;

    AccountSentChangePhoneCodeObject &operator =(const AccountSentChangePhoneCode &b);
    bool operator ==(const AccountSentChangePhoneCode &b) const;

Q_SIGNALS:
    void coreChanged();
    void classTypeChanged();
    void phoneCodeHashChanged();
    void sendCallTimeoutChanged();

private Q_SLOTS:

private:
    AccountSentChangePhoneCode m_core;
};

inline AccountSentChangePhoneCodeObject::AccountSentChangePhoneCodeObject(const AccountSentChangePhoneCode &core, QObject *parent) :
    TelegramTypeQObject(parent),
    m_core(core)
{
}

inline AccountSentChangePhoneCodeObject::AccountSentChangePhoneCodeObject(QObject *parent) :
    TelegramTypeQObject(parent),
    m_core()
{
}

inline AccountSentChangePhoneCodeObject::~AccountSentChangePhoneCodeObject() {
}

inline void AccountSentChangePhoneCodeObject::setPhoneCodeHash(const QString &phoneCodeHash) {
    if(m_core.phoneCodeHash() == phoneCodeHash) return;
    m_core.setPhoneCodeHash(phoneCodeHash);
    Q_EMIT phoneCodeHashChanged();
    Q_EMIT coreChanged();
}

inline QString AccountSentChangePhoneCodeObject::phoneCodeHash() const {
    return m_core.phoneCodeHash();
}

inline void AccountSentChangePhoneCodeObject::setSendCallTimeout(qint32 sendCallTimeout) {
    if(m_core.sendCallTimeout() == sendCallTimeout) return;
    m_core.setSendCallTimeout(sendCallTimeout);
    Q_EMIT sendCallTimeoutChanged();
    Q_EMIT coreChanged();
}

inline qint32 AccountSentChangePhoneCodeObject::sendCallTimeout() const {
    return m_core.sendCallTimeout();
}

inline AccountSentChangePhoneCodeObject &AccountSentChangePhoneCodeObject::operator =(const AccountSentChangePhoneCode &b) {
    if(m_core == b) return *this;
    m_core = b;

    Q_EMIT phoneCodeHashChanged();
    Q_EMIT sendCallTimeoutChanged();
    Q_EMIT coreChanged();
    return *this;
}

inline bool AccountSentChangePhoneCodeObject::operator ==(const AccountSentChangePhoneCode &b) const {
    return m_core == b;
}

inline void AccountSentChangePhoneCodeObject::setClassType(quint32 classType) {
    AccountSentChangePhoneCode::AccountSentChangePhoneCodeClassType result;
    switch(classType) {
    case TypeAccountSentChangePhoneCode:
        result = AccountSentChangePhoneCode::typeAccountSentChangePhoneCode;
        break;
    default:
        result = AccountSentChangePhoneCode::typeAccountSentChangePhoneCode;
        break;
    }

    if(m_core.classType() == result) return;
    m_core.setClassType(result);
    Q_EMIT classTypeChanged();
    Q_EMIT coreChanged();
}

inline quint32 AccountSentChangePhoneCodeObject::classType() const {
    int result;
    switch(static_cast<qint64>(m_core.classType())) {
    case AccountSentChangePhoneCode::typeAccountSentChangePhoneCode:
        result = TypeAccountSentChangePhoneCode;
        break;
    default:
        result = TypeAccountSentChangePhoneCode;
        break;
    }

    return result;
}

inline void AccountSentChangePhoneCodeObject::setCore(const AccountSentChangePhoneCode &core) {
    operator =(core);
}

inline AccountSentChangePhoneCode AccountSentChangePhoneCodeObject::core() const {
    return m_core;
}

#endif // LQTG_TYPE_ACCOUNTSENTCHANGEPHONECODE_OBJECT
