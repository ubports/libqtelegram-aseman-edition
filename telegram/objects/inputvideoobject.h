// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#ifndef LQTG_TYPE_INPUTVIDEO_OBJECT
#define LQTG_TYPE_INPUTVIDEO_OBJECT

#include "telegramtypeqobject.h"
#include "telegram/types/inputvideo.h"

#include <QPointer>

class LIBQTELEGRAMSHARED_EXPORT InputVideoObject : public TelegramTypeQObject
{
    Q_OBJECT
    Q_ENUMS(InputVideoClassType)
    Q_PROPERTY(qint64 accessHash READ accessHash WRITE setAccessHash NOTIFY accessHashChanged)
    Q_PROPERTY(qint64 id READ id WRITE setId NOTIFY idChanged)
    Q_PROPERTY(InputVideo core READ core WRITE setCore NOTIFY coreChanged)
    Q_PROPERTY(quint32 classType READ classType WRITE setClassType NOTIFY classTypeChanged)

public:
    enum InputVideoClassType {
        TypeInputVideoEmpty,
        TypeInputVideo
    };

    InputVideoObject(const InputVideo &core, QObject *parent = 0);
    InputVideoObject(QObject *parent = 0);
    virtual ~InputVideoObject();

    void setAccessHash(qint64 accessHash);
    qint64 accessHash() const;

    void setId(qint64 id);
    qint64 id() const;

    void setClassType(quint32 classType);
    quint32 classType() const;

    void setCore(const InputVideo &core);
    InputVideo core() const;

    InputVideoObject &operator =(const InputVideo &b);
    bool operator ==(const InputVideo &b) const;

Q_SIGNALS:
    void coreChanged();
    void classTypeChanged();
    void accessHashChanged();
    void idChanged();

private Q_SLOTS:

private:
    InputVideo m_core;
};

inline InputVideoObject::InputVideoObject(const InputVideo &core, QObject *parent) :
    TelegramTypeQObject(parent),
    m_core(core)
{
}

inline InputVideoObject::InputVideoObject(QObject *parent) :
    TelegramTypeQObject(parent),
    m_core()
{
}

inline InputVideoObject::~InputVideoObject() {
}

inline void InputVideoObject::setAccessHash(qint64 accessHash) {
    if(m_core.accessHash() == accessHash) return;
    m_core.setAccessHash(accessHash);
    Q_EMIT accessHashChanged();
    Q_EMIT coreChanged();
}

inline qint64 InputVideoObject::accessHash() const {
    return m_core.accessHash();
}

inline void InputVideoObject::setId(qint64 id) {
    if(m_core.id() == id) return;
    m_core.setId(id);
    Q_EMIT idChanged();
    Q_EMIT coreChanged();
}

inline qint64 InputVideoObject::id() const {
    return m_core.id();
}

inline InputVideoObject &InputVideoObject::operator =(const InputVideo &b) {
    if(m_core == b) return *this;
    m_core = b;

    Q_EMIT accessHashChanged();
    Q_EMIT idChanged();
    Q_EMIT coreChanged();
    return *this;
}

inline bool InputVideoObject::operator ==(const InputVideo &b) const {
    return m_core == b;
}

inline void InputVideoObject::setClassType(quint32 classType) {
    InputVideo::InputVideoClassType result;
    switch(classType) {
    case TypeInputVideoEmpty:
        result = InputVideo::typeInputVideoEmpty;
        break;
    case TypeInputVideo:
        result = InputVideo::typeInputVideo;
        break;
    default:
        result = InputVideo::typeInputVideoEmpty;
        break;
    }

    if(m_core.classType() == result) return;
    m_core.setClassType(result);
    Q_EMIT classTypeChanged();
    Q_EMIT coreChanged();
}

inline quint32 InputVideoObject::classType() const {
    int result;
    switch(static_cast<qint64>(m_core.classType())) {
    case InputVideo::typeInputVideoEmpty:
        result = TypeInputVideoEmpty;
        break;
    case InputVideo::typeInputVideo:
        result = TypeInputVideo;
        break;
    default:
        result = TypeInputVideoEmpty;
        break;
    }

    return result;
}

inline void InputVideoObject::setCore(const InputVideo &core) {
    operator =(core);
}

inline InputVideo InputVideoObject::core() const {
    return m_core;
}

#endif // LQTG_TYPE_INPUTVIDEO_OBJECT
