// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#ifndef LQTG_TYPE_CONTACTFOUND_OBJECT
#define LQTG_TYPE_CONTACTFOUND_OBJECT

#include "telegramtypeqobject.h"
#include "telegram/types/contactfound.h"

#include <QPointer>

class LIBQTELEGRAMSHARED_EXPORT ContactFoundObject : public TelegramTypeQObject
{
    Q_OBJECT
    Q_ENUMS(ContactFoundClassType)
    Q_PROPERTY(qint32 userId READ userId WRITE setUserId NOTIFY userIdChanged)
    Q_PROPERTY(ContactFound core READ core WRITE setCore NOTIFY coreChanged)
    Q_PROPERTY(quint32 classType READ classType WRITE setClassType NOTIFY classTypeChanged)

public:
    enum ContactFoundClassType {
        TypeContactFound
    };

    ContactFoundObject(const ContactFound &core, QObject *parent = 0);
    ContactFoundObject(QObject *parent = 0);
    virtual ~ContactFoundObject();

    void setUserId(qint32 userId);
    qint32 userId() const;

    void setClassType(quint32 classType);
    quint32 classType() const;

    void setCore(const ContactFound &core);
    ContactFound core() const;

    ContactFoundObject &operator =(const ContactFound &b);
    bool operator ==(const ContactFound &b) const;

Q_SIGNALS:
    void coreChanged();
    void classTypeChanged();
    void userIdChanged();

private Q_SLOTS:

private:
    ContactFound m_core;
};

inline ContactFoundObject::ContactFoundObject(const ContactFound &core, QObject *parent) :
    TelegramTypeQObject(parent),
    m_core(core)
{
}

inline ContactFoundObject::ContactFoundObject(QObject *parent) :
    TelegramTypeQObject(parent),
    m_core()
{
}

inline ContactFoundObject::~ContactFoundObject() {
}

inline void ContactFoundObject::setUserId(qint32 userId) {
    if(m_core.userId() == userId) return;
    m_core.setUserId(userId);
    Q_EMIT userIdChanged();
    Q_EMIT coreChanged();
}

inline qint32 ContactFoundObject::userId() const {
    return m_core.userId();
}

inline ContactFoundObject &ContactFoundObject::operator =(const ContactFound &b) {
    if(m_core == b) return *this;
    m_core = b;

    Q_EMIT userIdChanged();
    Q_EMIT coreChanged();
    return *this;
}

inline bool ContactFoundObject::operator ==(const ContactFound &b) const {
    return m_core == b;
}

inline void ContactFoundObject::setClassType(quint32 classType) {
    ContactFound::ContactFoundClassType result;
    switch(classType) {
    case TypeContactFound:
        result = ContactFound::typeContactFound;
        break;
    default:
        result = ContactFound::typeContactFound;
        break;
    }

    if(m_core.classType() == result) return;
    m_core.setClassType(result);
    Q_EMIT classTypeChanged();
    Q_EMIT coreChanged();
}

inline quint32 ContactFoundObject::classType() const {
    int result;
    switch(static_cast<qint64>(m_core.classType())) {
    case ContactFound::typeContactFound:
        result = TypeContactFound;
        break;
    default:
        result = TypeContactFound;
        break;
    }

    return result;
}

inline void ContactFoundObject::setCore(const ContactFound &core) {
    operator =(core);
}

inline ContactFound ContactFoundObject::core() const {
    return m_core;
}

#endif // LQTG_TYPE_CONTACTFOUND_OBJECT
