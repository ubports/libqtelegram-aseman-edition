// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#ifndef LQTG_TYPE_MESSAGESALLSTICKERS_OBJECT
#define LQTG_TYPE_MESSAGESALLSTICKERS_OBJECT

#include "telegramtypeqobject.h"
#include "telegram/types/messagesallstickers.h"

#include <QPointer>

class LIBQTELEGRAMSHARED_EXPORT MessagesAllStickersObject : public TelegramTypeQObject
{
    Q_OBJECT
    Q_ENUMS(MessagesAllStickersClassType)
    Q_PROPERTY(QList<Document> documents READ documents WRITE setDocuments NOTIFY documentsChanged)
    Q_PROPERTY(QString hash READ hash WRITE setHash NOTIFY hashChanged)
    Q_PROPERTY(QList<StickerPack> packs READ packs WRITE setPacks NOTIFY packsChanged)
    Q_PROPERTY(QList<StickerSet> sets READ sets WRITE setSets NOTIFY setsChanged)
    Q_PROPERTY(MessagesAllStickers core READ core WRITE setCore NOTIFY coreChanged)
    Q_PROPERTY(quint32 classType READ classType WRITE setClassType NOTIFY classTypeChanged)

public:
    enum MessagesAllStickersClassType {
        TypeMessagesAllStickersNotModified,
        TypeMessagesAllStickers
    };

    MessagesAllStickersObject(const MessagesAllStickers &core, QObject *parent = 0);
    MessagesAllStickersObject(QObject *parent = 0);
    virtual ~MessagesAllStickersObject();

    void setDocuments(const QList<Document> &documents);
    QList<Document> documents() const;

    void setHash(const QString &hash);
    QString hash() const;

    void setPacks(const QList<StickerPack> &packs);
    QList<StickerPack> packs() const;

    void setSets(const QList<StickerSet> &sets);
    QList<StickerSet> sets() const;

    void setClassType(quint32 classType);
    quint32 classType() const;

    void setCore(const MessagesAllStickers &core);
    MessagesAllStickers core() const;

    MessagesAllStickersObject &operator =(const MessagesAllStickers &b);
    bool operator ==(const MessagesAllStickers &b) const;

Q_SIGNALS:
    void coreChanged();
    void classTypeChanged();
    void documentsChanged();
    void hashChanged();
    void packsChanged();
    void setsChanged();

private Q_SLOTS:

private:
    MessagesAllStickers m_core;
};

inline MessagesAllStickersObject::MessagesAllStickersObject(const MessagesAllStickers &core, QObject *parent) :
    TelegramTypeQObject(parent),
    m_core(core)
{
}

inline MessagesAllStickersObject::MessagesAllStickersObject(QObject *parent) :
    TelegramTypeQObject(parent),
    m_core()
{
}

inline MessagesAllStickersObject::~MessagesAllStickersObject() {
}

inline void MessagesAllStickersObject::setDocuments(const QList<Document> &documents) {
    if(m_core.documents() == documents) return;
    m_core.setDocuments(documents);
    Q_EMIT documentsChanged();
    Q_EMIT coreChanged();
}

inline QList<Document> MessagesAllStickersObject::documents() const {
    return m_core.documents();
}

inline void MessagesAllStickersObject::setHash(const QString &hash) {
    if(m_core.hash() == hash) return;
    m_core.setHash(hash);
    Q_EMIT hashChanged();
    Q_EMIT coreChanged();
}

inline QString MessagesAllStickersObject::hash() const {
    return m_core.hash();
}

inline void MessagesAllStickersObject::setPacks(const QList<StickerPack> &packs) {
    if(m_core.packs() == packs) return;
    m_core.setPacks(packs);
    Q_EMIT packsChanged();
    Q_EMIT coreChanged();
}

inline QList<StickerPack> MessagesAllStickersObject::packs() const {
    return m_core.packs();
}

inline void MessagesAllStickersObject::setSets(const QList<StickerSet> &sets) {
    if(m_core.sets() == sets) return;
    m_core.setSets(sets);
    Q_EMIT setsChanged();
    Q_EMIT coreChanged();
}

inline QList<StickerSet> MessagesAllStickersObject::sets() const {
    return m_core.sets();
}

inline MessagesAllStickersObject &MessagesAllStickersObject::operator =(const MessagesAllStickers &b) {
    if(m_core == b) return *this;
    m_core = b;

    Q_EMIT documentsChanged();
    Q_EMIT hashChanged();
    Q_EMIT packsChanged();
    Q_EMIT setsChanged();
    Q_EMIT coreChanged();
    return *this;
}

inline bool MessagesAllStickersObject::operator ==(const MessagesAllStickers &b) const {
    return m_core == b;
}

inline void MessagesAllStickersObject::setClassType(quint32 classType) {
    MessagesAllStickers::MessagesAllStickersClassType result;
    switch(classType) {
    case TypeMessagesAllStickersNotModified:
        result = MessagesAllStickers::typeMessagesAllStickersNotModified;
        break;
    case TypeMessagesAllStickers:
        result = MessagesAllStickers::typeMessagesAllStickers;
        break;
    default:
        result = MessagesAllStickers::typeMessagesAllStickersNotModified;
        break;
    }

    if(m_core.classType() == result) return;
    m_core.setClassType(result);
    Q_EMIT classTypeChanged();
    Q_EMIT coreChanged();
}

inline quint32 MessagesAllStickersObject::classType() const {
    int result;
    switch(static_cast<qint64>(m_core.classType())) {
    case MessagesAllStickers::typeMessagesAllStickersNotModified:
        result = TypeMessagesAllStickersNotModified;
        break;
    case MessagesAllStickers::typeMessagesAllStickers:
        result = TypeMessagesAllStickers;
        break;
    default:
        result = TypeMessagesAllStickersNotModified;
        break;
    }

    return result;
}

inline void MessagesAllStickersObject::setCore(const MessagesAllStickers &core) {
    operator =(core);
}

inline MessagesAllStickers MessagesAllStickersObject::core() const {
    return m_core;
}

#endif // LQTG_TYPE_MESSAGESALLSTICKERS_OBJECT
