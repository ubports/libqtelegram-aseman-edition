// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#ifndef LQTG_TYPE_INPUTGEOCHAT_OBJECT
#define LQTG_TYPE_INPUTGEOCHAT_OBJECT

#include "telegramtypeqobject.h"
#include "telegram/types/inputgeochat.h"

#include <QPointer>

class LIBQTELEGRAMSHARED_EXPORT InputGeoChatObject : public TelegramTypeQObject
{
    Q_OBJECT
    Q_ENUMS(InputGeoChatClassType)
    Q_PROPERTY(qint64 accessHash READ accessHash WRITE setAccessHash NOTIFY accessHashChanged)
    Q_PROPERTY(qint32 chatId READ chatId WRITE setChatId NOTIFY chatIdChanged)
    Q_PROPERTY(InputGeoChat core READ core WRITE setCore NOTIFY coreChanged)
    Q_PROPERTY(quint32 classType READ classType WRITE setClassType NOTIFY classTypeChanged)

public:
    enum InputGeoChatClassType {
        TypeInputGeoChat
    };

    InputGeoChatObject(const InputGeoChat &core, QObject *parent = 0);
    InputGeoChatObject(QObject *parent = 0);
    virtual ~InputGeoChatObject();

    void setAccessHash(qint64 accessHash);
    qint64 accessHash() const;

    void setChatId(qint32 chatId);
    qint32 chatId() const;

    void setClassType(quint32 classType);
    quint32 classType() const;

    void setCore(const InputGeoChat &core);
    InputGeoChat core() const;

    InputGeoChatObject &operator =(const InputGeoChat &b);
    bool operator ==(const InputGeoChat &b) const;

Q_SIGNALS:
    void coreChanged();
    void classTypeChanged();
    void accessHashChanged();
    void chatIdChanged();

private Q_SLOTS:

private:
    InputGeoChat m_core;
};

inline InputGeoChatObject::InputGeoChatObject(const InputGeoChat &core, QObject *parent) :
    TelegramTypeQObject(parent),
    m_core(core)
{
}

inline InputGeoChatObject::InputGeoChatObject(QObject *parent) :
    TelegramTypeQObject(parent),
    m_core()
{
}

inline InputGeoChatObject::~InputGeoChatObject() {
}

inline void InputGeoChatObject::setAccessHash(qint64 accessHash) {
    if(m_core.accessHash() == accessHash) return;
    m_core.setAccessHash(accessHash);
    Q_EMIT accessHashChanged();
    Q_EMIT coreChanged();
}

inline qint64 InputGeoChatObject::accessHash() const {
    return m_core.accessHash();
}

inline void InputGeoChatObject::setChatId(qint32 chatId) {
    if(m_core.chatId() == chatId) return;
    m_core.setChatId(chatId);
    Q_EMIT chatIdChanged();
    Q_EMIT coreChanged();
}

inline qint32 InputGeoChatObject::chatId() const {
    return m_core.chatId();
}

inline InputGeoChatObject &InputGeoChatObject::operator =(const InputGeoChat &b) {
    if(m_core == b) return *this;
    m_core = b;

    Q_EMIT accessHashChanged();
    Q_EMIT chatIdChanged();
    Q_EMIT coreChanged();
    return *this;
}

inline bool InputGeoChatObject::operator ==(const InputGeoChat &b) const {
    return m_core == b;
}

inline void InputGeoChatObject::setClassType(quint32 classType) {
    InputGeoChat::InputGeoChatClassType result;
    switch(classType) {
    case TypeInputGeoChat:
        result = InputGeoChat::typeInputGeoChat;
        break;
    default:
        result = InputGeoChat::typeInputGeoChat;
        break;
    }

    if(m_core.classType() == result) return;
    m_core.setClassType(result);
    Q_EMIT classTypeChanged();
    Q_EMIT coreChanged();
}

inline quint32 InputGeoChatObject::classType() const {
    int result;
    switch(static_cast<qint64>(m_core.classType())) {
    case InputGeoChat::typeInputGeoChat:
        result = TypeInputGeoChat;
        break;
    default:
        result = TypeInputGeoChat;
        break;
    }

    return result;
}

inline void InputGeoChatObject::setCore(const InputGeoChat &core) {
    operator =(core);
}

inline InputGeoChat InputGeoChatObject::core() const {
    return m_core;
}

#endif // LQTG_TYPE_INPUTGEOCHAT_OBJECT
