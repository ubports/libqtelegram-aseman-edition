// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#ifndef LQTG_TYPE_UPDATE_OBJECT
#define LQTG_TYPE_UPDATE_OBJECT

#include "telegramtypeqobject.h"
#include "telegram/types/update.h"

#include <QPointer>
#include "sendmessageactionobject.h"
#include "encryptedchatobject.h"
#include "contactlinkobject.h"
#include "privacykeyobject.h"
#include "messagemediaobject.h"
#include "encryptedmessageobject.h"
#include "geochatmessageobject.h"
#include "messageobject.h"
#include "peernotifysettingsobject.h"
#include "chatparticipantsobject.h"
#include "notifypeerobject.h"
#include "peerobject.h"
#include "userprofilephotoobject.h"
#include "userstatusobject.h"
#include "webpageobject.h"

class LIBQTELEGRAMSHARED_EXPORT UpdateObject : public TelegramTypeQObject
{
    Q_OBJECT
    Q_ENUMS(UpdateClassType)
    Q_PROPERTY(SendMessageActionObject* action READ action WRITE setAction NOTIFY actionChanged)
    Q_PROPERTY(qint64 authKeyId READ authKeyId WRITE setAuthKeyId NOTIFY authKeyIdChanged)
    Q_PROPERTY(bool blocked READ blocked WRITE setBlocked NOTIFY blockedChanged)
    Q_PROPERTY(EncryptedChatObject* chat READ chat WRITE setChat NOTIFY chatChanged)
    Q_PROPERTY(qint32 chatId READ chatId WRITE setChatId NOTIFY chatIdChanged)
    Q_PROPERTY(qint32 date READ date WRITE setDate NOTIFY dateChanged)
    Q_PROPERTY(QList<DcOption> dcOptions READ dcOptions WRITE setDcOptions NOTIFY dcOptionsChanged)
    Q_PROPERTY(QString device READ device WRITE setDevice NOTIFY deviceChanged)
    Q_PROPERTY(QString firstName READ firstName WRITE setFirstName NOTIFY firstNameChanged)
    Q_PROPERTY(ContactLinkObject* foreignLink READ foreignLink WRITE setForeignLink NOTIFY foreignLinkChanged)
    Q_PROPERTY(qint32 id READ id WRITE setId NOTIFY idChanged)
    Q_PROPERTY(qint32 inviterId READ inviterId WRITE setInviterId NOTIFY inviterIdChanged)
    Q_PROPERTY(PrivacyKeyObject* key READ key WRITE setKey NOTIFY keyChanged)
    Q_PROPERTY(QString lastName READ lastName WRITE setLastName NOTIFY lastNameChanged)
    Q_PROPERTY(QString location READ location WRITE setLocation NOTIFY locationChanged)
    Q_PROPERTY(qint32 maxDate READ maxDate WRITE setMaxDate NOTIFY maxDateChanged)
    Q_PROPERTY(qint32 maxId READ maxId WRITE setMaxId NOTIFY maxIdChanged)
    Q_PROPERTY(MessageMediaObject* media READ media WRITE setMedia NOTIFY mediaChanged)
    Q_PROPERTY(EncryptedMessageObject* messageEncrypted READ messageEncrypted WRITE setMessageEncrypted NOTIFY messageEncryptedChanged)
    Q_PROPERTY(GeoChatMessageObject* messageGeoChat READ messageGeoChat WRITE setMessageGeoChat NOTIFY messageGeoChatChanged)
    Q_PROPERTY(MessageObject* message READ message WRITE setMessage NOTIFY messageChanged)
    Q_PROPERTY(QString messageString READ messageString WRITE setMessageString NOTIFY messageStringChanged)
    Q_PROPERTY(QList<qint32> messages READ messages WRITE setMessages NOTIFY messagesChanged)
    Q_PROPERTY(ContactLinkObject* myLink READ myLink WRITE setMyLink NOTIFY myLinkChanged)
    Q_PROPERTY(PeerNotifySettingsObject* notifySettings READ notifySettings WRITE setNotifySettings NOTIFY notifySettingsChanged)
    Q_PROPERTY(ChatParticipantsObject* participants READ participants WRITE setParticipants NOTIFY participantsChanged)
    Q_PROPERTY(NotifyPeerObject* peerNotify READ peerNotify WRITE setPeerNotify NOTIFY peerNotifyChanged)
    Q_PROPERTY(PeerObject* peer READ peer WRITE setPeer NOTIFY peerChanged)
    Q_PROPERTY(QString phone READ phone WRITE setPhone NOTIFY phoneChanged)
    Q_PROPERTY(UserProfilePhotoObject* photo READ photo WRITE setPhoto NOTIFY photoChanged)
    Q_PROPERTY(bool popup READ popup WRITE setPopup NOTIFY popupChanged)
    Q_PROPERTY(bool previous READ previous WRITE setPrevious NOTIFY previousChanged)
    Q_PROPERTY(qint32 pts READ pts WRITE setPts NOTIFY ptsChanged)
    Q_PROPERTY(qint32 ptsCount READ ptsCount WRITE setPtsCount NOTIFY ptsCountChanged)
    Q_PROPERTY(qint32 qts READ qts WRITE setQts NOTIFY qtsChanged)
    Q_PROPERTY(qint64 randomId READ randomId WRITE setRandomId NOTIFY randomIdChanged)
    Q_PROPERTY(QList<PrivacyRule> rules READ rules WRITE setRules NOTIFY rulesChanged)
    Q_PROPERTY(UserStatusObject* status READ status WRITE setStatus NOTIFY statusChanged)
    Q_PROPERTY(QString type READ type WRITE setType NOTIFY typeChanged)
    Q_PROPERTY(qint32 userId READ userId WRITE setUserId NOTIFY userIdChanged)
    Q_PROPERTY(QString username READ username WRITE setUsername NOTIFY usernameChanged)
    Q_PROPERTY(qint32 version READ version WRITE setVersion NOTIFY versionChanged)
    Q_PROPERTY(WebPageObject* webpage READ webpage WRITE setWebpage NOTIFY webpageChanged)
    Q_PROPERTY(Update core READ core WRITE setCore NOTIFY coreChanged)
    Q_PROPERTY(quint32 classType READ classType WRITE setClassType NOTIFY classTypeChanged)

public:
    enum UpdateClassType {
        TypeUpdateNewMessage,
        TypeUpdateMessageID,
        TypeUpdateDeleteMessages,
        TypeUpdateUserTyping,
        TypeUpdateChatUserTyping,
        TypeUpdateChatParticipants,
        TypeUpdateUserStatus,
        TypeUpdateUserName,
        TypeUpdateUserPhoto,
        TypeUpdateContactRegistered,
        TypeUpdateContactLink,
        TypeUpdateNewAuthorization,
        TypeUpdateNewGeoChatMessage,
        TypeUpdateNewEncryptedMessage,
        TypeUpdateEncryptedChatTyping,
        TypeUpdateEncryption,
        TypeUpdateEncryptedMessagesRead,
        TypeUpdateChatParticipantAdd,
        TypeUpdateChatParticipantDelete,
        TypeUpdateDcOptions,
        TypeUpdateUserBlocked,
        TypeUpdateNotifySettings,
        TypeUpdateServiceNotification,
        TypeUpdatePrivacy,
        TypeUpdateUserPhone,
        TypeUpdateReadHistoryInbox,
        TypeUpdateReadHistoryOutbox,
        TypeUpdateWebPage,
        TypeUpdateReadMessagesContents
    };

    UpdateObject(const Update &core, QObject *parent = 0);
    UpdateObject(QObject *parent = 0);
    virtual ~UpdateObject();

    void setAction(SendMessageActionObject* action);
    SendMessageActionObject* action() const;

    void setAuthKeyId(qint64 authKeyId);
    qint64 authKeyId() const;

    void setBlocked(bool blocked);
    bool blocked() const;

    void setChat(EncryptedChatObject* chat);
    EncryptedChatObject* chat() const;

    void setChatId(qint32 chatId);
    qint32 chatId() const;

    void setDate(qint32 date);
    qint32 date() const;

    void setDcOptions(const QList<DcOption> &dcOptions);
    QList<DcOption> dcOptions() const;

    void setDevice(const QString &device);
    QString device() const;

    void setFirstName(const QString &firstName);
    QString firstName() const;

    void setForeignLink(ContactLinkObject* foreignLink);
    ContactLinkObject* foreignLink() const;

    void setId(qint32 id);
    qint32 id() const;

    void setInviterId(qint32 inviterId);
    qint32 inviterId() const;

    void setKey(PrivacyKeyObject* key);
    PrivacyKeyObject* key() const;

    void setLastName(const QString &lastName);
    QString lastName() const;

    void setLocation(const QString &location);
    QString location() const;

    void setMaxDate(qint32 maxDate);
    qint32 maxDate() const;

    void setMaxId(qint32 maxId);
    qint32 maxId() const;

    void setMedia(MessageMediaObject* media);
    MessageMediaObject* media() const;

    void setMessageEncrypted(EncryptedMessageObject* messageEncrypted);
    EncryptedMessageObject* messageEncrypted() const;

    void setMessageGeoChat(GeoChatMessageObject* messageGeoChat);
    GeoChatMessageObject* messageGeoChat() const;

    void setMessage(MessageObject* message);
    MessageObject* message() const;

    void setMessageString(const QString &messageString);
    QString messageString() const;

    void setMessages(const QList<qint32> &messages);
    QList<qint32> messages() const;

    void setMyLink(ContactLinkObject* myLink);
    ContactLinkObject* myLink() const;

    void setNotifySettings(PeerNotifySettingsObject* notifySettings);
    PeerNotifySettingsObject* notifySettings() const;

    void setParticipants(ChatParticipantsObject* participants);
    ChatParticipantsObject* participants() const;

    void setPeerNotify(NotifyPeerObject* peerNotify);
    NotifyPeerObject* peerNotify() const;

    void setPeer(PeerObject* peer);
    PeerObject* peer() const;

    void setPhone(const QString &phone);
    QString phone() const;

    void setPhoto(UserProfilePhotoObject* photo);
    UserProfilePhotoObject* photo() const;

    void setPopup(bool popup);
    bool popup() const;

    void setPrevious(bool previous);
    bool previous() const;

    void setPts(qint32 pts);
    qint32 pts() const;

    void setPtsCount(qint32 ptsCount);
    qint32 ptsCount() const;

    void setQts(qint32 qts);
    qint32 qts() const;

    void setRandomId(qint64 randomId);
    qint64 randomId() const;

    void setRules(const QList<PrivacyRule> &rules);
    QList<PrivacyRule> rules() const;

    void setStatus(UserStatusObject* status);
    UserStatusObject* status() const;

    void setType(const QString &type);
    QString type() const;

    void setUserId(qint32 userId);
    qint32 userId() const;

    void setUsername(const QString &username);
    QString username() const;

    void setVersion(qint32 version);
    qint32 version() const;

    void setWebpage(WebPageObject* webpage);
    WebPageObject* webpage() const;

    void setClassType(quint32 classType);
    quint32 classType() const;

    void setCore(const Update &core);
    Update core() const;

    UpdateObject &operator =(const Update &b);
    bool operator ==(const Update &b) const;

Q_SIGNALS:
    void coreChanged();
    void classTypeChanged();
    void actionChanged();
    void authKeyIdChanged();
    void blockedChanged();
    void chatChanged();
    void chatIdChanged();
    void dateChanged();
    void dcOptionsChanged();
    void deviceChanged();
    void firstNameChanged();
    void foreignLinkChanged();
    void idChanged();
    void inviterIdChanged();
    void keyChanged();
    void lastNameChanged();
    void locationChanged();
    void maxDateChanged();
    void maxIdChanged();
    void mediaChanged();
    void messageEncryptedChanged();
    void messageGeoChatChanged();
    void messageChanged();
    void messageStringChanged();
    void messagesChanged();
    void myLinkChanged();
    void notifySettingsChanged();
    void participantsChanged();
    void peerNotifyChanged();
    void peerChanged();
    void phoneChanged();
    void photoChanged();
    void popupChanged();
    void previousChanged();
    void ptsChanged();
    void ptsCountChanged();
    void qtsChanged();
    void randomIdChanged();
    void rulesChanged();
    void statusChanged();
    void typeChanged();
    void userIdChanged();
    void usernameChanged();
    void versionChanged();
    void webpageChanged();

private Q_SLOTS:
    void coreActionChanged();
    void coreChatChanged();
    void coreForeignLinkChanged();
    void coreKeyChanged();
    void coreMediaChanged();
    void coreMessageEncryptedChanged();
    void coreMessageGeoChatChanged();
    void coreMessageChanged();
    void coreMyLinkChanged();
    void coreNotifySettingsChanged();
    void coreParticipantsChanged();
    void corePeerNotifyChanged();
    void corePeerChanged();
    void corePhotoChanged();
    void coreStatusChanged();
    void coreWebpageChanged();

private:
    QPointer<SendMessageActionObject> m_action;
    QPointer<EncryptedChatObject> m_chat;
    QPointer<ContactLinkObject> m_foreignLink;
    QPointer<PrivacyKeyObject> m_key;
    QPointer<MessageMediaObject> m_media;
    QPointer<EncryptedMessageObject> m_messageEncrypted;
    QPointer<GeoChatMessageObject> m_messageGeoChat;
    QPointer<MessageObject> m_message;
    QPointer<ContactLinkObject> m_myLink;
    QPointer<PeerNotifySettingsObject> m_notifySettings;
    QPointer<ChatParticipantsObject> m_participants;
    QPointer<NotifyPeerObject> m_peerNotify;
    QPointer<PeerObject> m_peer;
    QPointer<UserProfilePhotoObject> m_photo;
    QPointer<UserStatusObject> m_status;
    QPointer<WebPageObject> m_webpage;
    Update m_core;
};

inline UpdateObject::UpdateObject(const Update &core, QObject *parent) :
    TelegramTypeQObject(parent),
    m_action(0),
    m_chat(0),
    m_foreignLink(0),
    m_key(0),
    m_media(0),
    m_messageEncrypted(0),
    m_messageGeoChat(0),
    m_message(0),
    m_myLink(0),
    m_notifySettings(0),
    m_participants(0),
    m_peerNotify(0),
    m_peer(0),
    m_photo(0),
    m_status(0),
    m_webpage(0),
    m_core(core)
{
    m_action = new SendMessageActionObject(m_core.action(), this);
    connect(m_action.data(), &SendMessageActionObject::coreChanged, this, &UpdateObject::coreActionChanged);
    m_chat = new EncryptedChatObject(m_core.chat(), this);
    connect(m_chat.data(), &EncryptedChatObject::coreChanged, this, &UpdateObject::coreChatChanged);
    m_foreignLink = new ContactLinkObject(m_core.foreignLink(), this);
    connect(m_foreignLink.data(), &ContactLinkObject::coreChanged, this, &UpdateObject::coreForeignLinkChanged);
    m_key = new PrivacyKeyObject(m_core.key(), this);
    connect(m_key.data(), &PrivacyKeyObject::coreChanged, this, &UpdateObject::coreKeyChanged);
    m_media = new MessageMediaObject(m_core.media(), this);
    connect(m_media.data(), &MessageMediaObject::coreChanged, this, &UpdateObject::coreMediaChanged);
    m_messageEncrypted = new EncryptedMessageObject(m_core.messageEncrypted(), this);
    connect(m_messageEncrypted.data(), &EncryptedMessageObject::coreChanged, this, &UpdateObject::coreMessageEncryptedChanged);
    m_messageGeoChat = new GeoChatMessageObject(m_core.messageGeoChat(), this);
    connect(m_messageGeoChat.data(), &GeoChatMessageObject::coreChanged, this, &UpdateObject::coreMessageGeoChatChanged);
    m_message = new MessageObject(m_core.message(), this);
    connect(m_message.data(), &MessageObject::coreChanged, this, &UpdateObject::coreMessageChanged);
    m_myLink = new ContactLinkObject(m_core.myLink(), this);
    connect(m_myLink.data(), &ContactLinkObject::coreChanged, this, &UpdateObject::coreMyLinkChanged);
    m_notifySettings = new PeerNotifySettingsObject(m_core.notifySettings(), this);
    connect(m_notifySettings.data(), &PeerNotifySettingsObject::coreChanged, this, &UpdateObject::coreNotifySettingsChanged);
    m_participants = new ChatParticipantsObject(m_core.participants(), this);
    connect(m_participants.data(), &ChatParticipantsObject::coreChanged, this, &UpdateObject::coreParticipantsChanged);
    m_peerNotify = new NotifyPeerObject(m_core.peerNotify(), this);
    connect(m_peerNotify.data(), &NotifyPeerObject::coreChanged, this, &UpdateObject::corePeerNotifyChanged);
    m_peer = new PeerObject(m_core.peer(), this);
    connect(m_peer.data(), &PeerObject::coreChanged, this, &UpdateObject::corePeerChanged);
    m_photo = new UserProfilePhotoObject(m_core.photo(), this);
    connect(m_photo.data(), &UserProfilePhotoObject::coreChanged, this, &UpdateObject::corePhotoChanged);
    m_status = new UserStatusObject(m_core.status(), this);
    connect(m_status.data(), &UserStatusObject::coreChanged, this, &UpdateObject::coreStatusChanged);
    m_webpage = new WebPageObject(m_core.webpage(), this);
    connect(m_webpage.data(), &WebPageObject::coreChanged, this, &UpdateObject::coreWebpageChanged);
}

inline UpdateObject::UpdateObject(QObject *parent) :
    TelegramTypeQObject(parent),
    m_action(0),
    m_chat(0),
    m_foreignLink(0),
    m_key(0),
    m_media(0),
    m_messageEncrypted(0),
    m_messageGeoChat(0),
    m_message(0),
    m_myLink(0),
    m_notifySettings(0),
    m_participants(0),
    m_peerNotify(0),
    m_peer(0),
    m_photo(0),
    m_status(0),
    m_webpage(0),
    m_core()
{
    m_action = new SendMessageActionObject(m_core.action(), this);
    connect(m_action.data(), &SendMessageActionObject::coreChanged, this, &UpdateObject::coreActionChanged);
    m_chat = new EncryptedChatObject(m_core.chat(), this);
    connect(m_chat.data(), &EncryptedChatObject::coreChanged, this, &UpdateObject::coreChatChanged);
    m_foreignLink = new ContactLinkObject(m_core.foreignLink(), this);
    connect(m_foreignLink.data(), &ContactLinkObject::coreChanged, this, &UpdateObject::coreForeignLinkChanged);
    m_key = new PrivacyKeyObject(m_core.key(), this);
    connect(m_key.data(), &PrivacyKeyObject::coreChanged, this, &UpdateObject::coreKeyChanged);
    m_media = new MessageMediaObject(m_core.media(), this);
    connect(m_media.data(), &MessageMediaObject::coreChanged, this, &UpdateObject::coreMediaChanged);
    m_messageEncrypted = new EncryptedMessageObject(m_core.messageEncrypted(), this);
    connect(m_messageEncrypted.data(), &EncryptedMessageObject::coreChanged, this, &UpdateObject::coreMessageEncryptedChanged);
    m_messageGeoChat = new GeoChatMessageObject(m_core.messageGeoChat(), this);
    connect(m_messageGeoChat.data(), &GeoChatMessageObject::coreChanged, this, &UpdateObject::coreMessageGeoChatChanged);
    m_message = new MessageObject(m_core.message(), this);
    connect(m_message.data(), &MessageObject::coreChanged, this, &UpdateObject::coreMessageChanged);
    m_myLink = new ContactLinkObject(m_core.myLink(), this);
    connect(m_myLink.data(), &ContactLinkObject::coreChanged, this, &UpdateObject::coreMyLinkChanged);
    m_notifySettings = new PeerNotifySettingsObject(m_core.notifySettings(), this);
    connect(m_notifySettings.data(), &PeerNotifySettingsObject::coreChanged, this, &UpdateObject::coreNotifySettingsChanged);
    m_participants = new ChatParticipantsObject(m_core.participants(), this);
    connect(m_participants.data(), &ChatParticipantsObject::coreChanged, this, &UpdateObject::coreParticipantsChanged);
    m_peerNotify = new NotifyPeerObject(m_core.peerNotify(), this);
    connect(m_peerNotify.data(), &NotifyPeerObject::coreChanged, this, &UpdateObject::corePeerNotifyChanged);
    m_peer = new PeerObject(m_core.peer(), this);
    connect(m_peer.data(), &PeerObject::coreChanged, this, &UpdateObject::corePeerChanged);
    m_photo = new UserProfilePhotoObject(m_core.photo(), this);
    connect(m_photo.data(), &UserProfilePhotoObject::coreChanged, this, &UpdateObject::corePhotoChanged);
    m_status = new UserStatusObject(m_core.status(), this);
    connect(m_status.data(), &UserStatusObject::coreChanged, this, &UpdateObject::coreStatusChanged);
    m_webpage = new WebPageObject(m_core.webpage(), this);
    connect(m_webpage.data(), &WebPageObject::coreChanged, this, &UpdateObject::coreWebpageChanged);
}

inline UpdateObject::~UpdateObject() {
}

inline void UpdateObject::setAction(SendMessageActionObject* action) {
    if(m_action == action) return;
    if(m_action) delete m_action;
    m_action = action;
    if(m_action) {
        m_action->setParent(this);
        m_core.setAction(m_action->core());
        connect(m_action.data(), &SendMessageActionObject::coreChanged, this, &UpdateObject::coreActionChanged);
    }
    Q_EMIT actionChanged();
    Q_EMIT coreChanged();
}

inline SendMessageActionObject*  UpdateObject::action() const {
    return m_action;
}

inline void UpdateObject::setAuthKeyId(qint64 authKeyId) {
    if(m_core.authKeyId() == authKeyId) return;
    m_core.setAuthKeyId(authKeyId);
    Q_EMIT authKeyIdChanged();
    Q_EMIT coreChanged();
}

inline qint64 UpdateObject::authKeyId() const {
    return m_core.authKeyId();
}

inline void UpdateObject::setBlocked(bool blocked) {
    if(m_core.blocked() == blocked) return;
    m_core.setBlocked(blocked);
    Q_EMIT blockedChanged();
    Q_EMIT coreChanged();
}

inline bool UpdateObject::blocked() const {
    return m_core.blocked();
}

inline void UpdateObject::setChat(EncryptedChatObject* chat) {
    if(m_chat == chat) return;
    if(m_chat) delete m_chat;
    m_chat = chat;
    if(m_chat) {
        m_chat->setParent(this);
        m_core.setChat(m_chat->core());
        connect(m_chat.data(), &EncryptedChatObject::coreChanged, this, &UpdateObject::coreChatChanged);
    }
    Q_EMIT chatChanged();
    Q_EMIT coreChanged();
}

inline EncryptedChatObject*  UpdateObject::chat() const {
    return m_chat;
}

inline void UpdateObject::setChatId(qint32 chatId) {
    if(m_core.chatId() == chatId) return;
    m_core.setChatId(chatId);
    Q_EMIT chatIdChanged();
    Q_EMIT coreChanged();
}

inline qint32 UpdateObject::chatId() const {
    return m_core.chatId();
}

inline void UpdateObject::setDate(qint32 date) {
    if(m_core.date() == date) return;
    m_core.setDate(date);
    Q_EMIT dateChanged();
    Q_EMIT coreChanged();
}

inline qint32 UpdateObject::date() const {
    return m_core.date();
}

inline void UpdateObject::setDcOptions(const QList<DcOption> &dcOptions) {
    if(m_core.dcOptions() == dcOptions) return;
    m_core.setDcOptions(dcOptions);
    Q_EMIT dcOptionsChanged();
    Q_EMIT coreChanged();
}

inline QList<DcOption> UpdateObject::dcOptions() const {
    return m_core.dcOptions();
}

inline void UpdateObject::setDevice(const QString &device) {
    if(m_core.device() == device) return;
    m_core.setDevice(device);
    Q_EMIT deviceChanged();
    Q_EMIT coreChanged();
}

inline QString UpdateObject::device() const {
    return m_core.device();
}

inline void UpdateObject::setFirstName(const QString &firstName) {
    if(m_core.firstName() == firstName) return;
    m_core.setFirstName(firstName);
    Q_EMIT firstNameChanged();
    Q_EMIT coreChanged();
}

inline QString UpdateObject::firstName() const {
    return m_core.firstName();
}

inline void UpdateObject::setForeignLink(ContactLinkObject* foreignLink) {
    if(m_foreignLink == foreignLink) return;
    if(m_foreignLink) delete m_foreignLink;
    m_foreignLink = foreignLink;
    if(m_foreignLink) {
        m_foreignLink->setParent(this);
        m_core.setForeignLink(m_foreignLink->core());
        connect(m_foreignLink.data(), &ContactLinkObject::coreChanged, this, &UpdateObject::coreForeignLinkChanged);
    }
    Q_EMIT foreignLinkChanged();
    Q_EMIT coreChanged();
}

inline ContactLinkObject*  UpdateObject::foreignLink() const {
    return m_foreignLink;
}

inline void UpdateObject::setId(qint32 id) {
    if(m_core.id() == id) return;
    m_core.setId(id);
    Q_EMIT idChanged();
    Q_EMIT coreChanged();
}

inline qint32 UpdateObject::id() const {
    return m_core.id();
}

inline void UpdateObject::setInviterId(qint32 inviterId) {
    if(m_core.inviterId() == inviterId) return;
    m_core.setInviterId(inviterId);
    Q_EMIT inviterIdChanged();
    Q_EMIT coreChanged();
}

inline qint32 UpdateObject::inviterId() const {
    return m_core.inviterId();
}

inline void UpdateObject::setKey(PrivacyKeyObject* key) {
    if(m_key == key) return;
    if(m_key) delete m_key;
    m_key = key;
    if(m_key) {
        m_key->setParent(this);
        m_core.setKey(m_key->core());
        connect(m_key.data(), &PrivacyKeyObject::coreChanged, this, &UpdateObject::coreKeyChanged);
    }
    Q_EMIT keyChanged();
    Q_EMIT coreChanged();
}

inline PrivacyKeyObject*  UpdateObject::key() const {
    return m_key;
}

inline void UpdateObject::setLastName(const QString &lastName) {
    if(m_core.lastName() == lastName) return;
    m_core.setLastName(lastName);
    Q_EMIT lastNameChanged();
    Q_EMIT coreChanged();
}

inline QString UpdateObject::lastName() const {
    return m_core.lastName();
}

inline void UpdateObject::setLocation(const QString &location) {
    if(m_core.location() == location) return;
    m_core.setLocation(location);
    Q_EMIT locationChanged();
    Q_EMIT coreChanged();
}

inline QString UpdateObject::location() const {
    return m_core.location();
}

inline void UpdateObject::setMaxDate(qint32 maxDate) {
    if(m_core.maxDate() == maxDate) return;
    m_core.setMaxDate(maxDate);
    Q_EMIT maxDateChanged();
    Q_EMIT coreChanged();
}

inline qint32 UpdateObject::maxDate() const {
    return m_core.maxDate();
}

inline void UpdateObject::setMaxId(qint32 maxId) {
    if(m_core.maxId() == maxId) return;
    m_core.setMaxId(maxId);
    Q_EMIT maxIdChanged();
    Q_EMIT coreChanged();
}

inline qint32 UpdateObject::maxId() const {
    return m_core.maxId();
}

inline void UpdateObject::setMedia(MessageMediaObject* media) {
    if(m_media == media) return;
    if(m_media) delete m_media;
    m_media = media;
    if(m_media) {
        m_media->setParent(this);
        m_core.setMedia(m_media->core());
        connect(m_media.data(), &MessageMediaObject::coreChanged, this, &UpdateObject::coreMediaChanged);
    }
    Q_EMIT mediaChanged();
    Q_EMIT coreChanged();
}

inline MessageMediaObject*  UpdateObject::media() const {
    return m_media;
}

inline void UpdateObject::setMessageEncrypted(EncryptedMessageObject* messageEncrypted) {
    if(m_messageEncrypted == messageEncrypted) return;
    if(m_messageEncrypted) delete m_messageEncrypted;
    m_messageEncrypted = messageEncrypted;
    if(m_messageEncrypted) {
        m_messageEncrypted->setParent(this);
        m_core.setMessageEncrypted(m_messageEncrypted->core());
        connect(m_messageEncrypted.data(), &EncryptedMessageObject::coreChanged, this, &UpdateObject::coreMessageEncryptedChanged);
    }
    Q_EMIT messageEncryptedChanged();
    Q_EMIT coreChanged();
}

inline EncryptedMessageObject*  UpdateObject::messageEncrypted() const {
    return m_messageEncrypted;
}

inline void UpdateObject::setMessageGeoChat(GeoChatMessageObject* messageGeoChat) {
    if(m_messageGeoChat == messageGeoChat) return;
    if(m_messageGeoChat) delete m_messageGeoChat;
    m_messageGeoChat = messageGeoChat;
    if(m_messageGeoChat) {
        m_messageGeoChat->setParent(this);
        m_core.setMessageGeoChat(m_messageGeoChat->core());
        connect(m_messageGeoChat.data(), &GeoChatMessageObject::coreChanged, this, &UpdateObject::coreMessageGeoChatChanged);
    }
    Q_EMIT messageGeoChatChanged();
    Q_EMIT coreChanged();
}

inline GeoChatMessageObject*  UpdateObject::messageGeoChat() const {
    return m_messageGeoChat;
}

inline void UpdateObject::setMessage(MessageObject* message) {
    if(m_message == message) return;
    if(m_message) delete m_message;
    m_message = message;
    if(m_message) {
        m_message->setParent(this);
        m_core.setMessage(m_message->core());
        connect(m_message.data(), &MessageObject::coreChanged, this, &UpdateObject::coreMessageChanged);
    }
    Q_EMIT messageChanged();
    Q_EMIT coreChanged();
}

inline MessageObject*  UpdateObject::message() const {
    return m_message;
}

inline void UpdateObject::setMessageString(const QString &messageString) {
    if(m_core.messageString() == messageString) return;
    m_core.setMessageString(messageString);
    Q_EMIT messageStringChanged();
    Q_EMIT coreChanged();
}

inline QString UpdateObject::messageString() const {
    return m_core.messageString();
}

inline void UpdateObject::setMessages(const QList<qint32> &messages) {
    if(m_core.messages() == messages) return;
    m_core.setMessages(messages);
    Q_EMIT messagesChanged();
    Q_EMIT coreChanged();
}

inline QList<qint32> UpdateObject::messages() const {
    return m_core.messages();
}

inline void UpdateObject::setMyLink(ContactLinkObject* myLink) {
    if(m_myLink == myLink) return;
    if(m_myLink) delete m_myLink;
    m_myLink = myLink;
    if(m_myLink) {
        m_myLink->setParent(this);
        m_core.setMyLink(m_myLink->core());
        connect(m_myLink.data(), &ContactLinkObject::coreChanged, this, &UpdateObject::coreMyLinkChanged);
    }
    Q_EMIT myLinkChanged();
    Q_EMIT coreChanged();
}

inline ContactLinkObject*  UpdateObject::myLink() const {
    return m_myLink;
}

inline void UpdateObject::setNotifySettings(PeerNotifySettingsObject* notifySettings) {
    if(m_notifySettings == notifySettings) return;
    if(m_notifySettings) delete m_notifySettings;
    m_notifySettings = notifySettings;
    if(m_notifySettings) {
        m_notifySettings->setParent(this);
        m_core.setNotifySettings(m_notifySettings->core());
        connect(m_notifySettings.data(), &PeerNotifySettingsObject::coreChanged, this, &UpdateObject::coreNotifySettingsChanged);
    }
    Q_EMIT notifySettingsChanged();
    Q_EMIT coreChanged();
}

inline PeerNotifySettingsObject*  UpdateObject::notifySettings() const {
    return m_notifySettings;
}

inline void UpdateObject::setParticipants(ChatParticipantsObject* participants) {
    if(m_participants == participants) return;
    if(m_participants) delete m_participants;
    m_participants = participants;
    if(m_participants) {
        m_participants->setParent(this);
        m_core.setParticipants(m_participants->core());
        connect(m_participants.data(), &ChatParticipantsObject::coreChanged, this, &UpdateObject::coreParticipantsChanged);
    }
    Q_EMIT participantsChanged();
    Q_EMIT coreChanged();
}

inline ChatParticipantsObject*  UpdateObject::participants() const {
    return m_participants;
}

inline void UpdateObject::setPeerNotify(NotifyPeerObject* peerNotify) {
    if(m_peerNotify == peerNotify) return;
    if(m_peerNotify) delete m_peerNotify;
    m_peerNotify = peerNotify;
    if(m_peerNotify) {
        m_peerNotify->setParent(this);
        m_core.setPeerNotify(m_peerNotify->core());
        connect(m_peerNotify.data(), &NotifyPeerObject::coreChanged, this, &UpdateObject::corePeerNotifyChanged);
    }
    Q_EMIT peerNotifyChanged();
    Q_EMIT coreChanged();
}

inline NotifyPeerObject*  UpdateObject::peerNotify() const {
    return m_peerNotify;
}

inline void UpdateObject::setPeer(PeerObject* peer) {
    if(m_peer == peer) return;
    if(m_peer) delete m_peer;
    m_peer = peer;
    if(m_peer) {
        m_peer->setParent(this);
        m_core.setPeer(m_peer->core());
        connect(m_peer.data(), &PeerObject::coreChanged, this, &UpdateObject::corePeerChanged);
    }
    Q_EMIT peerChanged();
    Q_EMIT coreChanged();
}

inline PeerObject*  UpdateObject::peer() const {
    return m_peer;
}

inline void UpdateObject::setPhone(const QString &phone) {
    if(m_core.phone() == phone) return;
    m_core.setPhone(phone);
    Q_EMIT phoneChanged();
    Q_EMIT coreChanged();
}

inline QString UpdateObject::phone() const {
    return m_core.phone();
}

inline void UpdateObject::setPhoto(UserProfilePhotoObject* photo) {
    if(m_photo == photo) return;
    if(m_photo) delete m_photo;
    m_photo = photo;
    if(m_photo) {
        m_photo->setParent(this);
        m_core.setPhoto(m_photo->core());
        connect(m_photo.data(), &UserProfilePhotoObject::coreChanged, this, &UpdateObject::corePhotoChanged);
    }
    Q_EMIT photoChanged();
    Q_EMIT coreChanged();
}

inline UserProfilePhotoObject*  UpdateObject::photo() const {
    return m_photo;
}

inline void UpdateObject::setPopup(bool popup) {
    if(m_core.popup() == popup) return;
    m_core.setPopup(popup);
    Q_EMIT popupChanged();
    Q_EMIT coreChanged();
}

inline bool UpdateObject::popup() const {
    return m_core.popup();
}

inline void UpdateObject::setPrevious(bool previous) {
    if(m_core.previous() == previous) return;
    m_core.setPrevious(previous);
    Q_EMIT previousChanged();
    Q_EMIT coreChanged();
}

inline bool UpdateObject::previous() const {
    return m_core.previous();
}

inline void UpdateObject::setPts(qint32 pts) {
    if(m_core.pts() == pts) return;
    m_core.setPts(pts);
    Q_EMIT ptsChanged();
    Q_EMIT coreChanged();
}

inline qint32 UpdateObject::pts() const {
    return m_core.pts();
}

inline void UpdateObject::setPtsCount(qint32 ptsCount) {
    if(m_core.ptsCount() == ptsCount) return;
    m_core.setPtsCount(ptsCount);
    Q_EMIT ptsCountChanged();
    Q_EMIT coreChanged();
}

inline qint32 UpdateObject::ptsCount() const {
    return m_core.ptsCount();
}

inline void UpdateObject::setQts(qint32 qts) {
    if(m_core.qts() == qts) return;
    m_core.setQts(qts);
    Q_EMIT qtsChanged();
    Q_EMIT coreChanged();
}

inline qint32 UpdateObject::qts() const {
    return m_core.qts();
}

inline void UpdateObject::setRandomId(qint64 randomId) {
    if(m_core.randomId() == randomId) return;
    m_core.setRandomId(randomId);
    Q_EMIT randomIdChanged();
    Q_EMIT coreChanged();
}

inline qint64 UpdateObject::randomId() const {
    return m_core.randomId();
}

inline void UpdateObject::setRules(const QList<PrivacyRule> &rules) {
    if(m_core.rules() == rules) return;
    m_core.setRules(rules);
    Q_EMIT rulesChanged();
    Q_EMIT coreChanged();
}

inline QList<PrivacyRule> UpdateObject::rules() const {
    return m_core.rules();
}

inline void UpdateObject::setStatus(UserStatusObject* status) {
    if(m_status == status) return;
    if(m_status) delete m_status;
    m_status = status;
    if(m_status) {
        m_status->setParent(this);
        m_core.setStatus(m_status->core());
        connect(m_status.data(), &UserStatusObject::coreChanged, this, &UpdateObject::coreStatusChanged);
    }
    Q_EMIT statusChanged();
    Q_EMIT coreChanged();
}

inline UserStatusObject*  UpdateObject::status() const {
    return m_status;
}

inline void UpdateObject::setType(const QString &type) {
    if(m_core.type() == type) return;
    m_core.setType(type);
    Q_EMIT typeChanged();
    Q_EMIT coreChanged();
}

inline QString UpdateObject::type() const {
    return m_core.type();
}

inline void UpdateObject::setUserId(qint32 userId) {
    if(m_core.userId() == userId) return;
    m_core.setUserId(userId);
    Q_EMIT userIdChanged();
    Q_EMIT coreChanged();
}

inline qint32 UpdateObject::userId() const {
    return m_core.userId();
}

inline void UpdateObject::setUsername(const QString &username) {
    if(m_core.username() == username) return;
    m_core.setUsername(username);
    Q_EMIT usernameChanged();
    Q_EMIT coreChanged();
}

inline QString UpdateObject::username() const {
    return m_core.username();
}

inline void UpdateObject::setVersion(qint32 version) {
    if(m_core.version() == version) return;
    m_core.setVersion(version);
    Q_EMIT versionChanged();
    Q_EMIT coreChanged();
}

inline qint32 UpdateObject::version() const {
    return m_core.version();
}

inline void UpdateObject::setWebpage(WebPageObject* webpage) {
    if(m_webpage == webpage) return;
    if(m_webpage) delete m_webpage;
    m_webpage = webpage;
    if(m_webpage) {
        m_webpage->setParent(this);
        m_core.setWebpage(m_webpage->core());
        connect(m_webpage.data(), &WebPageObject::coreChanged, this, &UpdateObject::coreWebpageChanged);
    }
    Q_EMIT webpageChanged();
    Q_EMIT coreChanged();
}

inline WebPageObject*  UpdateObject::webpage() const {
    return m_webpage;
}

inline UpdateObject &UpdateObject::operator =(const Update &b) {
    if(m_core == b) return *this;
    m_core = b;
    m_action->setCore(b.action());
    m_chat->setCore(b.chat());
    m_foreignLink->setCore(b.foreignLink());
    m_key->setCore(b.key());
    m_media->setCore(b.media());
    m_messageEncrypted->setCore(b.messageEncrypted());
    m_messageGeoChat->setCore(b.messageGeoChat());
    m_message->setCore(b.message());
    m_myLink->setCore(b.myLink());
    m_notifySettings->setCore(b.notifySettings());
    m_participants->setCore(b.participants());
    m_peerNotify->setCore(b.peerNotify());
    m_peer->setCore(b.peer());
    m_photo->setCore(b.photo());
    m_status->setCore(b.status());
    m_webpage->setCore(b.webpage());

    Q_EMIT actionChanged();
    Q_EMIT authKeyIdChanged();
    Q_EMIT blockedChanged();
    Q_EMIT chatChanged();
    Q_EMIT chatIdChanged();
    Q_EMIT dateChanged();
    Q_EMIT dcOptionsChanged();
    Q_EMIT deviceChanged();
    Q_EMIT firstNameChanged();
    Q_EMIT foreignLinkChanged();
    Q_EMIT idChanged();
    Q_EMIT inviterIdChanged();
    Q_EMIT keyChanged();
    Q_EMIT lastNameChanged();
    Q_EMIT locationChanged();
    Q_EMIT maxDateChanged();
    Q_EMIT maxIdChanged();
    Q_EMIT mediaChanged();
    Q_EMIT messageEncryptedChanged();
    Q_EMIT messageGeoChatChanged();
    Q_EMIT messageChanged();
    Q_EMIT messageStringChanged();
    Q_EMIT messagesChanged();
    Q_EMIT myLinkChanged();
    Q_EMIT notifySettingsChanged();
    Q_EMIT participantsChanged();
    Q_EMIT peerNotifyChanged();
    Q_EMIT peerChanged();
    Q_EMIT phoneChanged();
    Q_EMIT photoChanged();
    Q_EMIT popupChanged();
    Q_EMIT previousChanged();
    Q_EMIT ptsChanged();
    Q_EMIT ptsCountChanged();
    Q_EMIT qtsChanged();
    Q_EMIT randomIdChanged();
    Q_EMIT rulesChanged();
    Q_EMIT statusChanged();
    Q_EMIT typeChanged();
    Q_EMIT userIdChanged();
    Q_EMIT usernameChanged();
    Q_EMIT versionChanged();
    Q_EMIT webpageChanged();
    Q_EMIT coreChanged();
    return *this;
}

inline bool UpdateObject::operator ==(const Update &b) const {
    return m_core == b;
}

inline void UpdateObject::setClassType(quint32 classType) {
    Update::UpdateClassType result;
    switch(classType) {
    case TypeUpdateNewMessage:
        result = Update::typeUpdateNewMessage;
        break;
    case TypeUpdateMessageID:
        result = Update::typeUpdateMessageID;
        break;
    case TypeUpdateDeleteMessages:
        result = Update::typeUpdateDeleteMessages;
        break;
    case TypeUpdateUserTyping:
        result = Update::typeUpdateUserTyping;
        break;
    case TypeUpdateChatUserTyping:
        result = Update::typeUpdateChatUserTyping;
        break;
    case TypeUpdateChatParticipants:
        result = Update::typeUpdateChatParticipants;
        break;
    case TypeUpdateUserStatus:
        result = Update::typeUpdateUserStatus;
        break;
    case TypeUpdateUserName:
        result = Update::typeUpdateUserName;
        break;
    case TypeUpdateUserPhoto:
        result = Update::typeUpdateUserPhoto;
        break;
    case TypeUpdateContactRegistered:
        result = Update::typeUpdateContactRegistered;
        break;
    case TypeUpdateContactLink:
        result = Update::typeUpdateContactLink;
        break;
    case TypeUpdateNewAuthorization:
        result = Update::typeUpdateNewAuthorization;
        break;
    case TypeUpdateNewGeoChatMessage:
        result = Update::typeUpdateNewGeoChatMessage;
        break;
    case TypeUpdateNewEncryptedMessage:
        result = Update::typeUpdateNewEncryptedMessage;
        break;
    case TypeUpdateEncryptedChatTyping:
        result = Update::typeUpdateEncryptedChatTyping;
        break;
    case TypeUpdateEncryption:
        result = Update::typeUpdateEncryption;
        break;
    case TypeUpdateEncryptedMessagesRead:
        result = Update::typeUpdateEncryptedMessagesRead;
        break;
    case TypeUpdateChatParticipantAdd:
        result = Update::typeUpdateChatParticipantAdd;
        break;
    case TypeUpdateChatParticipantDelete:
        result = Update::typeUpdateChatParticipantDelete;
        break;
    case TypeUpdateDcOptions:
        result = Update::typeUpdateDcOptions;
        break;
    case TypeUpdateUserBlocked:
        result = Update::typeUpdateUserBlocked;
        break;
    case TypeUpdateNotifySettings:
        result = Update::typeUpdateNotifySettings;
        break;
    case TypeUpdateServiceNotification:
        result = Update::typeUpdateServiceNotification;
        break;
    case TypeUpdatePrivacy:
        result = Update::typeUpdatePrivacy;
        break;
    case TypeUpdateUserPhone:
        result = Update::typeUpdateUserPhone;
        break;
    case TypeUpdateReadHistoryInbox:
        result = Update::typeUpdateReadHistoryInbox;
        break;
    case TypeUpdateReadHistoryOutbox:
        result = Update::typeUpdateReadHistoryOutbox;
        break;
    case TypeUpdateWebPage:
        result = Update::typeUpdateWebPage;
        break;
    case TypeUpdateReadMessagesContents:
        result = Update::typeUpdateReadMessagesContents;
        break;
    default:
        result = Update::typeUpdateNewMessage;
        break;
    }

    if(m_core.classType() == result) return;
    m_core.setClassType(result);
    Q_EMIT classTypeChanged();
    Q_EMIT coreChanged();
}

inline quint32 UpdateObject::classType() const {
    int result;
    switch(static_cast<qint64>(m_core.classType())) {
    case Update::typeUpdateNewMessage:
        result = TypeUpdateNewMessage;
        break;
    case Update::typeUpdateMessageID:
        result = TypeUpdateMessageID;
        break;
    case Update::typeUpdateDeleteMessages:
        result = TypeUpdateDeleteMessages;
        break;
    case Update::typeUpdateUserTyping:
        result = TypeUpdateUserTyping;
        break;
    case Update::typeUpdateChatUserTyping:
        result = TypeUpdateChatUserTyping;
        break;
    case Update::typeUpdateChatParticipants:
        result = TypeUpdateChatParticipants;
        break;
    case Update::typeUpdateUserStatus:
        result = TypeUpdateUserStatus;
        break;
    case Update::typeUpdateUserName:
        result = TypeUpdateUserName;
        break;
    case Update::typeUpdateUserPhoto:
        result = TypeUpdateUserPhoto;
        break;
    case Update::typeUpdateContactRegistered:
        result = TypeUpdateContactRegistered;
        break;
    case Update::typeUpdateContactLink:
        result = TypeUpdateContactLink;
        break;
    case Update::typeUpdateNewAuthorization:
        result = TypeUpdateNewAuthorization;
        break;
    case Update::typeUpdateNewGeoChatMessage:
        result = TypeUpdateNewGeoChatMessage;
        break;
    case Update::typeUpdateNewEncryptedMessage:
        result = TypeUpdateNewEncryptedMessage;
        break;
    case Update::typeUpdateEncryptedChatTyping:
        result = TypeUpdateEncryptedChatTyping;
        break;
    case Update::typeUpdateEncryption:
        result = TypeUpdateEncryption;
        break;
    case Update::typeUpdateEncryptedMessagesRead:
        result = TypeUpdateEncryptedMessagesRead;
        break;
    case Update::typeUpdateChatParticipantAdd:
        result = TypeUpdateChatParticipantAdd;
        break;
    case Update::typeUpdateChatParticipantDelete:
        result = TypeUpdateChatParticipantDelete;
        break;
    case Update::typeUpdateDcOptions:
        result = TypeUpdateDcOptions;
        break;
    case Update::typeUpdateUserBlocked:
        result = TypeUpdateUserBlocked;
        break;
    case Update::typeUpdateNotifySettings:
        result = TypeUpdateNotifySettings;
        break;
    case Update::typeUpdateServiceNotification:
        result = TypeUpdateServiceNotification;
        break;
    case Update::typeUpdatePrivacy:
        result = TypeUpdatePrivacy;
        break;
    case Update::typeUpdateUserPhone:
        result = TypeUpdateUserPhone;
        break;
    case Update::typeUpdateReadHistoryInbox:
        result = TypeUpdateReadHistoryInbox;
        break;
    case Update::typeUpdateReadHistoryOutbox:
        result = TypeUpdateReadHistoryOutbox;
        break;
    case Update::typeUpdateWebPage:
        result = TypeUpdateWebPage;
        break;
    case Update::typeUpdateReadMessagesContents:
        result = TypeUpdateReadMessagesContents;
        break;
    default:
        result = TypeUpdateNewMessage;
        break;
    }

    return result;
}

inline void UpdateObject::setCore(const Update &core) {
    operator =(core);
}

inline Update UpdateObject::core() const {
    return m_core;
}

inline void UpdateObject::coreActionChanged() {
    if(m_core.action() == m_action->core()) return;
    m_core.setAction(m_action->core());
    Q_EMIT actionChanged();
    Q_EMIT coreChanged();
}

inline void UpdateObject::coreChatChanged() {
    if(m_core.chat() == m_chat->core()) return;
    m_core.setChat(m_chat->core());
    Q_EMIT chatChanged();
    Q_EMIT coreChanged();
}

inline void UpdateObject::coreForeignLinkChanged() {
    if(m_core.foreignLink() == m_foreignLink->core()) return;
    m_core.setForeignLink(m_foreignLink->core());
    Q_EMIT foreignLinkChanged();
    Q_EMIT coreChanged();
}

inline void UpdateObject::coreKeyChanged() {
    if(m_core.key() == m_key->core()) return;
    m_core.setKey(m_key->core());
    Q_EMIT keyChanged();
    Q_EMIT coreChanged();
}

inline void UpdateObject::coreMediaChanged() {
    if(m_core.media() == m_media->core()) return;
    m_core.setMedia(m_media->core());
    Q_EMIT mediaChanged();
    Q_EMIT coreChanged();
}

inline void UpdateObject::coreMessageEncryptedChanged() {
    if(m_core.messageEncrypted() == m_messageEncrypted->core()) return;
    m_core.setMessageEncrypted(m_messageEncrypted->core());
    Q_EMIT messageEncryptedChanged();
    Q_EMIT coreChanged();
}

inline void UpdateObject::coreMessageGeoChatChanged() {
    if(m_core.messageGeoChat() == m_messageGeoChat->core()) return;
    m_core.setMessageGeoChat(m_messageGeoChat->core());
    Q_EMIT messageGeoChatChanged();
    Q_EMIT coreChanged();
}

inline void UpdateObject::coreMessageChanged() {
    if(m_core.message() == m_message->core()) return;
    m_core.setMessage(m_message->core());
    Q_EMIT messageChanged();
    Q_EMIT coreChanged();
}

inline void UpdateObject::coreMyLinkChanged() {
    if(m_core.myLink() == m_myLink->core()) return;
    m_core.setMyLink(m_myLink->core());
    Q_EMIT myLinkChanged();
    Q_EMIT coreChanged();
}

inline void UpdateObject::coreNotifySettingsChanged() {
    if(m_core.notifySettings() == m_notifySettings->core()) return;
    m_core.setNotifySettings(m_notifySettings->core());
    Q_EMIT notifySettingsChanged();
    Q_EMIT coreChanged();
}

inline void UpdateObject::coreParticipantsChanged() {
    if(m_core.participants() == m_participants->core()) return;
    m_core.setParticipants(m_participants->core());
    Q_EMIT participantsChanged();
    Q_EMIT coreChanged();
}

inline void UpdateObject::corePeerNotifyChanged() {
    if(m_core.peerNotify() == m_peerNotify->core()) return;
    m_core.setPeerNotify(m_peerNotify->core());
    Q_EMIT peerNotifyChanged();
    Q_EMIT coreChanged();
}

inline void UpdateObject::corePeerChanged() {
    if(m_core.peer() == m_peer->core()) return;
    m_core.setPeer(m_peer->core());
    Q_EMIT peerChanged();
    Q_EMIT coreChanged();
}

inline void UpdateObject::corePhotoChanged() {
    if(m_core.photo() == m_photo->core()) return;
    m_core.setPhoto(m_photo->core());
    Q_EMIT photoChanged();
    Q_EMIT coreChanged();
}

inline void UpdateObject::coreStatusChanged() {
    if(m_core.status() == m_status->core()) return;
    m_core.setStatus(m_status->core());
    Q_EMIT statusChanged();
    Q_EMIT coreChanged();
}

inline void UpdateObject::coreWebpageChanged() {
    if(m_core.webpage() == m_webpage->core()) return;
    m_core.setWebpage(m_webpage->core());
    Q_EMIT webpageChanged();
    Q_EMIT coreChanged();
}

#endif // LQTG_TYPE_UPDATE_OBJECT
