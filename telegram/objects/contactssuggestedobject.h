// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#ifndef LQTG_TYPE_CONTACTSSUGGESTED_OBJECT
#define LQTG_TYPE_CONTACTSSUGGESTED_OBJECT

#include "telegramtypeqobject.h"
#include "telegram/types/contactssuggested.h"

#include <QPointer>

class LIBQTELEGRAMSHARED_EXPORT ContactsSuggestedObject : public TelegramTypeQObject
{
    Q_OBJECT
    Q_ENUMS(ContactsSuggestedClassType)
    Q_PROPERTY(QList<ContactSuggested> results READ results WRITE setResults NOTIFY resultsChanged)
    Q_PROPERTY(QList<User> users READ users WRITE setUsers NOTIFY usersChanged)
    Q_PROPERTY(ContactsSuggested core READ core WRITE setCore NOTIFY coreChanged)
    Q_PROPERTY(quint32 classType READ classType WRITE setClassType NOTIFY classTypeChanged)

public:
    enum ContactsSuggestedClassType {
        TypeContactsSuggested
    };

    ContactsSuggestedObject(const ContactsSuggested &core, QObject *parent = 0);
    ContactsSuggestedObject(QObject *parent = 0);
    virtual ~ContactsSuggestedObject();

    void setResults(const QList<ContactSuggested> &results);
    QList<ContactSuggested> results() const;

    void setUsers(const QList<User> &users);
    QList<User> users() const;

    void setClassType(quint32 classType);
    quint32 classType() const;

    void setCore(const ContactsSuggested &core);
    ContactsSuggested core() const;

    ContactsSuggestedObject &operator =(const ContactsSuggested &b);
    bool operator ==(const ContactsSuggested &b) const;

Q_SIGNALS:
    void coreChanged();
    void classTypeChanged();
    void resultsChanged();
    void usersChanged();

private Q_SLOTS:

private:
    ContactsSuggested m_core;
};

inline ContactsSuggestedObject::ContactsSuggestedObject(const ContactsSuggested &core, QObject *parent) :
    TelegramTypeQObject(parent),
    m_core(core)
{
}

inline ContactsSuggestedObject::ContactsSuggestedObject(QObject *parent) :
    TelegramTypeQObject(parent),
    m_core()
{
}

inline ContactsSuggestedObject::~ContactsSuggestedObject() {
}

inline void ContactsSuggestedObject::setResults(const QList<ContactSuggested> &results) {
    if(m_core.results() == results) return;
    m_core.setResults(results);
    Q_EMIT resultsChanged();
    Q_EMIT coreChanged();
}

inline QList<ContactSuggested> ContactsSuggestedObject::results() const {
    return m_core.results();
}

inline void ContactsSuggestedObject::setUsers(const QList<User> &users) {
    if(m_core.users() == users) return;
    m_core.setUsers(users);
    Q_EMIT usersChanged();
    Q_EMIT coreChanged();
}

inline QList<User> ContactsSuggestedObject::users() const {
    return m_core.users();
}

inline ContactsSuggestedObject &ContactsSuggestedObject::operator =(const ContactsSuggested &b) {
    if(m_core == b) return *this;
    m_core = b;

    Q_EMIT resultsChanged();
    Q_EMIT usersChanged();
    Q_EMIT coreChanged();
    return *this;
}

inline bool ContactsSuggestedObject::operator ==(const ContactsSuggested &b) const {
    return m_core == b;
}

inline void ContactsSuggestedObject::setClassType(quint32 classType) {
    ContactsSuggested::ContactsSuggestedClassType result;
    switch(classType) {
    case TypeContactsSuggested:
        result = ContactsSuggested::typeContactsSuggested;
        break;
    default:
        result = ContactsSuggested::typeContactsSuggested;
        break;
    }

    if(m_core.classType() == result) return;
    m_core.setClassType(result);
    Q_EMIT classTypeChanged();
    Q_EMIT coreChanged();
}

inline quint32 ContactsSuggestedObject::classType() const {
    int result;
    switch(static_cast<qint64>(m_core.classType())) {
    case ContactsSuggested::typeContactsSuggested:
        result = TypeContactsSuggested;
        break;
    default:
        result = TypeContactsSuggested;
        break;
    }

    return result;
}

inline void ContactsSuggestedObject::setCore(const ContactsSuggested &core) {
    operator =(core);
}

inline ContactsSuggested ContactsSuggestedObject::core() const {
    return m_core;
}

#endif // LQTG_TYPE_CONTACTSSUGGESTED_OBJECT
