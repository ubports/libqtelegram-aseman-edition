// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#ifndef LQTG_TYPE_CHATLOCATED_OBJECT
#define LQTG_TYPE_CHATLOCATED_OBJECT

#include "telegramtypeqobject.h"
#include "telegram/types/chatlocated.h"

#include <QPointer>

class LIBQTELEGRAMSHARED_EXPORT ChatLocatedObject : public TelegramTypeQObject
{
    Q_OBJECT
    Q_ENUMS(ChatLocatedClassType)
    Q_PROPERTY(qint32 chatId READ chatId WRITE setChatId NOTIFY chatIdChanged)
    Q_PROPERTY(qint32 distance READ distance WRITE setDistance NOTIFY distanceChanged)
    Q_PROPERTY(ChatLocated core READ core WRITE setCore NOTIFY coreChanged)
    Q_PROPERTY(quint32 classType READ classType WRITE setClassType NOTIFY classTypeChanged)

public:
    enum ChatLocatedClassType {
        TypeChatLocated
    };

    ChatLocatedObject(const ChatLocated &core, QObject *parent = 0);
    ChatLocatedObject(QObject *parent = 0);
    virtual ~ChatLocatedObject();

    void setChatId(qint32 chatId);
    qint32 chatId() const;

    void setDistance(qint32 distance);
    qint32 distance() const;

    void setClassType(quint32 classType);
    quint32 classType() const;

    void setCore(const ChatLocated &core);
    ChatLocated core() const;

    ChatLocatedObject &operator =(const ChatLocated &b);
    bool operator ==(const ChatLocated &b) const;

Q_SIGNALS:
    void coreChanged();
    void classTypeChanged();
    void chatIdChanged();
    void distanceChanged();

private Q_SLOTS:

private:
    ChatLocated m_core;
};

inline ChatLocatedObject::ChatLocatedObject(const ChatLocated &core, QObject *parent) :
    TelegramTypeQObject(parent),
    m_core(core)
{
}

inline ChatLocatedObject::ChatLocatedObject(QObject *parent) :
    TelegramTypeQObject(parent),
    m_core()
{
}

inline ChatLocatedObject::~ChatLocatedObject() {
}

inline void ChatLocatedObject::setChatId(qint32 chatId) {
    if(m_core.chatId() == chatId) return;
    m_core.setChatId(chatId);
    Q_EMIT chatIdChanged();
    Q_EMIT coreChanged();
}

inline qint32 ChatLocatedObject::chatId() const {
    return m_core.chatId();
}

inline void ChatLocatedObject::setDistance(qint32 distance) {
    if(m_core.distance() == distance) return;
    m_core.setDistance(distance);
    Q_EMIT distanceChanged();
    Q_EMIT coreChanged();
}

inline qint32 ChatLocatedObject::distance() const {
    return m_core.distance();
}

inline ChatLocatedObject &ChatLocatedObject::operator =(const ChatLocated &b) {
    if(m_core == b) return *this;
    m_core = b;

    Q_EMIT chatIdChanged();
    Q_EMIT distanceChanged();
    Q_EMIT coreChanged();
    return *this;
}

inline bool ChatLocatedObject::operator ==(const ChatLocated &b) const {
    return m_core == b;
}

inline void ChatLocatedObject::setClassType(quint32 classType) {
    ChatLocated::ChatLocatedClassType result;
    switch(classType) {
    case TypeChatLocated:
        result = ChatLocated::typeChatLocated;
        break;
    default:
        result = ChatLocated::typeChatLocated;
        break;
    }

    if(m_core.classType() == result) return;
    m_core.setClassType(result);
    Q_EMIT classTypeChanged();
    Q_EMIT coreChanged();
}

inline quint32 ChatLocatedObject::classType() const {
    int result;
    switch(static_cast<qint64>(m_core.classType())) {
    case ChatLocated::typeChatLocated:
        result = TypeChatLocated;
        break;
    default:
        result = TypeChatLocated;
        break;
    }

    return result;
}

inline void ChatLocatedObject::setCore(const ChatLocated &core) {
    operator =(core);
}

inline ChatLocated ChatLocatedObject::core() const {
    return m_core;
}

#endif // LQTG_TYPE_CHATLOCATED_OBJECT
